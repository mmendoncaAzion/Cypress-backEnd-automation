{
  "timestamp": "2025-09-22T21:53:44.674Z",
  "executionTime": "88ms",
  "summary": {
    "totalEndpoints": 239,
    "totalCategories": 16,
    "currentCoverage": 9,
    "categoriesAnalyzed": [
      {
        "name": "account",
        "endpoints": 10,
        "priority": "high",
        "coverage": 0
      },
      {
        "name": "auth",
        "endpoints": 18,
        "priority": "high",
        "coverage": 0
      },
      {
        "name": "payments",
        "endpoints": 7,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "workspace",
        "endpoints": 23,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "dns",
        "endpoints": 15,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "data_stream",
        "endpoints": 13,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "digital_certificates",
        "endpoints": 14,
        "priority": "medium",
        "coverage": 0
      },
      {
        "name": "edge_application",
        "endpoints": 39,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "edge_connector",
        "endpoints": 6,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "edge_firewall",
        "endpoints": 33,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "edge_functions",
        "endpoints": 6,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "edge_sql",
        "endpoints": 5,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "edge_storage",
        "endpoints": 13,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "iam",
        "endpoints": 3,
        "priority": "high",
        "coverage": 0
      },
      {
        "name": "orchestrator",
        "endpoints": 27,
        "priority": "low",
        "coverage": 0
      },
      {
        "name": "identity",
        "endpoints": 7,
        "priority": "low",
        "coverage": 0
      }
    ]
  },
  "categories": {
    "account": {
      "name": "account",
      "endpoints": [
        {
          "name": "Retrieve account information details",
          "method": "GET",
          "url": "/account/accounts/{{accountId}}/info",
          "category": "account",
          "path": "account/accounts/{id}/info",
          "key": "GET /account/accounts/{{accountId}}/info",
          "pathParams": [
            {
              "name": "accountId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve detailed information about your account or a specific child account under your logged-in account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update account information details",
          "method": "PUT",
          "url": "/account/accounts/{{accountId}}/info",
          "category": "account",
          "path": "account/accounts/{id}/info",
          "key": "PUT /account/accounts/{{accountId}}/info",
          "pathParams": [
            {
              "name": "accountId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json; version=3",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "info": {
                "industry": "Services",
                "company_size": 100
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "info": {
                  "type": "object",
                  "properties": {
                    "industry": {
                      "type": "string"
                    },
                    "company_size": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "industry",
                    "company_size"
                  ]
                }
              },
              "required": [
                "info"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "info": {
                    "industry": "Services",
                    "company_size": 100
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "info": {
                    "industry": "Services",
                    "company_size": 100
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the information details about your account or a specific child account under your logged-in account. This operation allows replacing the entire account info data with new values. In this operation, you can also clear all detailed information of an account by providing an empty dictionary in the `info` field.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve account details",
          "method": "GET",
          "url": "/account/accounts/{{accountId}}",
          "category": "account",
          "path": "account/accounts/{id}",
          "key": "GET /account/accounts/{{accountId}}",
          "pathParams": [
            {
              "name": "accountId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve detailed information of a specific account under the logged-in user's account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update account details",
          "method": "PUT",
          "url": "/account/accounts/:id",
          "category": "account",
          "path": "account/accounts/{id}",
          "key": "PUT /account/accounts/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "I{!iq"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "I{!iq"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "I{!iq"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the information of a specific account under the logged-in user's account. This operation allows replacing the entire account data with new values.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update account details",
          "method": "PATCH",
          "url": "/account/accounts/:id",
          "category": "account",
          "path": "account/accounts/{id}",
          "key": "PATCH /account/accounts/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "!Q{0Td"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "!Q{0Td"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "!Q{0Td"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update specific fields of an account under the logged-in user's account. Only editable fields, such as `name`, can be updated with this operation.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List accounts",
          "method": "GET",
          "url": "/account/accounts",
          "category": "account",
          "path": "account/accounts",
          "key": "GET /account/accounts",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all accounts that are descendants of the logged-in user's account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new account",
          "method": "POST",
          "url": "/account/accounts",
          "category": "account",
          "path": "account/accounts",
          "key": "POST /account/accounts",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Azion - Engineering (Testes Funcionais - new monster)",
              "type": "Workspace",
              "parent_id": 231
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "parent_id": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "type",
                "parent_id"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Azion - Engineering (Testes Funcionais - new monster)",
                  "type": "Workspace",
                  "parent_id": 231
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Azion - Engineering (Testes Funcionais - new monster)",
                  "type": "Workspace",
                  "parent_id": 231
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new sub-account under the logged-in user's account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve logged account details",
          "method": "GET",
          "url": "/account/account",
          "category": "account",
          "path": "account/account",
          "key": "GET /account/account",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve detailed information about the currently logged-in user's account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update logged account details",
          "method": "PUT",
          "url": "/account/account",
          "category": "account",
          "path": "account/account",
          "key": "PUT /account/account",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n  \"name\": \"Azion - Engineering (Testes Funcionais - new monster)\",\n  \"title\": \"QE\",\n  \"detail\": \"test\",\n  \"type\": \"Workspace\" // Add the appropriate type value\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the details of the currently logged-in user's account. This operation allows replacing the entire account data with new values.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update logged account details",
          "method": "PATCH",
          "url": "/account/account",
          "category": "account",
          "path": "account/account",
          "key": "PATCH /account/account",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Azion - Engineering (Testes Funcionais - new monster) Patch"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Azion - Engineering (Testes Funcionais - new monster) Patch"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Azion - Engineering (Testes Funcionais - new monster) Patch"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Partially update specific fields of the currently logged-in user's account. Only editable fields, such as `name`, can be updated with this operation.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 4,
        "PUT": 3,
        "PATCH": 2,
        "POST": 1
      },
      "priorityCounts": {
        "high": 10,
        "medium": 0,
        "low": 0
      },
      "complexityCounts": {
        "high": 1,
        "medium": 2,
        "low": 7
      },
      "totalEndpoints": 10,
      "coverage": 0,
      "priority": "high"
    },
    "auth": {
      "name": "auth",
      "endpoints": [
        {
          "name": "Retrieve user login method",
          "method": "GET",
          "url": "/auth/login/method",
          "category": "auth",
          "path": "auth/login/method",
          "key": "GET /auth/login/method",
          "pathParams": [],
          "queryParams": [
            {
              "key": "email",
              "value": "<email>",
              "description": "Email address of the user",
              "required": false,
              "type": "email"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": false,
          "description": "Retrieve details of a specific user's login method",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve user JWT tokens",
          "method": "POST",
          "url": "/auth/login",
          "category": "auth",
          "path": "auth/login",
          "key": "POST /auth/login",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "",
              "password": "",
              "account_id": ""
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "account_id": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password",
                "account_id"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "",
                  "password": "",
                  "account_id": ""
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "",
                  "password": "",
                  "account_id": ""
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": false,
          "description": "Retrieve user JWT tokens",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a TOTP device",
          "method": "DELETE",
          "url": "/auth/mfa/totp/:id",
          "category": "auth",
          "path": "auth/mfa/totp/{id}",
          "key": "DELETE /auth/mfa/totp/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific TOTP device from your account or descendant account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of TOTP devices",
          "method": "GET",
          "url": "/auth/mfa/totp",
          "category": "auth",
          "path": "auth/mfa/totp",
          "key": "GET /auth/mfa/totp",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all totp devices for user account and descendant accounts.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a TOTP device",
          "method": "POST",
          "url": "/auth/mfa/totp",
          "category": "auth",
          "path": "auth/mfa/totp",
          "key": "POST /auth/mfa/totp",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new TOTP device for your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Refresh user JWT access token",
          "method": "POST",
          "url": "/auth/token",
          "category": "auth",
          "path": "auth/token",
          "key": "POST /auth/token",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "account_id": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string"
                }
              },
              "required": [
                "account_id"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "account_id": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "account_id": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Refresh JWT access token, via a POST request.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Revoke user JWT refresh token",
          "method": "POST",
          "url": "/auth/revoke",
          "category": "auth",
          "path": "auth/revoke",
          "key": "POST /auth/revoke",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Revoke refresh token via a POST request.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve user JWT tokens by MFA auth",
          "method": "POST",
          "url": "/auth/verify",
          "category": "auth",
          "path": "auth/verify",
          "key": "POST /auth/verify",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "<string>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                }
              },
              "required": [
                "code"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "<string>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "<string>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieves JWT access and refresh tokens, via a POST request with jwt mfa token as auth + code.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Get Lockout Policy",
          "method": "GET",
          "url": "/auth/policies/lockout?fields=<string>",
          "category": "auth",
          "path": "auth/policies/lockout",
          "key": "GET /auth/policies/lockout?fields=<string>",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Get Lockout Policy for the current account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Put Lockout Policy",
          "method": "PUT",
          "url": "/auth/policies/lockout",
          "category": "auth",
          "path": "auth/policies/lockout",
          "key": "PUT /auth/policies/lockout",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": "<boolean>",
              "blocking_period": "<integer>",
              "max_attempts": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "string"
                },
                "blocking_period": {
                  "type": "string"
                },
                "max_attempts": {
                  "type": "string"
                }
              },
              "required": [
                "active",
                "blocking_period",
                "max_attempts"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": "<boolean>",
                  "blocking_period": "<integer>",
                  "max_attempts": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": "<boolean>",
                  "blocking_period": "<integer>",
                  "max_attempts": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Put Lockout Policy for the current account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a policy",
          "method": "GET",
          "url": "/auth/policies/:id?fields=<string>",
          "category": "auth",
          "path": "auth/policies/{id}",
          "key": "GET /auth/policies/:id?fields=<string>",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific policy from your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a policy",
          "method": "PUT",
          "url": "/auth/policies/:id",
          "category": "auth",
          "path": "auth/policies/{id}",
          "key": "PUT /auth/policies/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": "<boolean>",
              "name": " ",
              "rules": [
                {
                  "actions": [
                    "<string>",
                    "<string>"
                  ],
                  "effect": "deny",
                  "name": "K=8m2&(^[",
                  "resource": "<string>",
                  "condition": {
                    "ip_address": [
                      "<string>"
                    ]
                  }
                },
                {
                  "actions": [
                    "<string>",
                    "<string>"
                  ],
                  "effect": "allow",
                  "name": " ",
                  "resource": "<string>",
                  "condition": {
                    "ip_address": [
                      "<string>"
                    ]
                  }
                }
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "effect": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      },
                      "condition": {
                        "type": "object",
                        "properties": {
                          "ip_address": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "ip_address"
                        ]
                      }
                    },
                    "required": [
                      "actions",
                      "effect",
                      "name",
                      "resource",
                      "condition"
                    ]
                  }
                }
              },
              "required": [
                "active",
                "name",
                "rules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": "<boolean>",
                  "name": " ",
                  "rules": [
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "deny",
                      "name": "K=8m2&(^[",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    },
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": " ",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": "<boolean>",
                  "name": " ",
                  "rules": [
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "deny",
                      "name": "K=8m2&(^[",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    },
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": " ",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing policy. This replaces all policy rules with the new data provided.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a policy",
          "method": "PATCH",
          "url": "/auth/policies/:id",
          "category": "auth",
          "path": "auth/policies/{id}",
          "key": "PATCH /auth/policies/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "x/,2s-k^5e",
              "active": "<boolean>",
              "rules": [
                {
                  "actions": [
                    "<string>",
                    "<string>"
                  ],
                  "effect": "allow",
                  "name": "$f",
                  "resource": "<string>",
                  "condition": {
                    "ip_address": [
                      "<string>"
                    ]
                  }
                },
                {
                  "actions": [
                    "<string>",
                    "<string>"
                  ],
                  "effect": "allow",
                  "name": "kV]Q|0z&:",
                  "resource": "<string>",
                  "condition": {
                    "ip_address": [
                      "<string>"
                    ]
                  }
                }
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "string"
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "effect": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      },
                      "condition": {
                        "type": "object",
                        "properties": {
                          "ip_address": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "ip_address"
                        ]
                      }
                    },
                    "required": [
                      "actions",
                      "effect",
                      "name",
                      "resource",
                      "condition"
                    ]
                  }
                }
              },
              "required": [
                "name",
                "active",
                "rules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "x/,2s-k^5e",
                  "active": "<boolean>",
                  "rules": [
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": "$f",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    },
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": "kV]Q|0z&:",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "x/,2s-k^5e",
                  "active": "<boolean>",
                  "rules": [
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": "$f",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    },
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": "kV]Q|0z&:",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing policy without affecting other fields.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a policy",
          "method": "DELETE",
          "url": "/auth/policies/:id",
          "category": "auth",
          "path": "auth/policies/{id}",
          "key": "DELETE /auth/policies/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific policy from your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Get Session Timeout Policy",
          "method": "GET",
          "url": "/auth/policies/session?fields=<string>",
          "category": "auth",
          "path": "auth/policies/session",
          "key": "GET /auth/policies/session?fields=<string>",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Get Session Timeout Policy for the current account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Put Session Timeout Policy",
          "method": "PUT",
          "url": "/auth/policies/session",
          "category": "auth",
          "path": "auth/policies/session",
          "key": "PUT /auth/policies/session",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "max_idle_time": "<integer>",
              "max_session_time": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "max_idle_time": {
                  "type": "string"
                },
                "max_session_time": {
                  "type": "string"
                }
              },
              "required": [
                "max_idle_time",
                "max_session_time"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "max_idle_time": "<integer>",
                  "max_session_time": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "max_idle_time": "<integer>",
                  "max_session_time": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Put Session Timeout Policy for the current account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of account policies",
          "method": "GET",
          "url": "/auth/policies",
          "category": "auth",
          "path": "auth/policies",
          "key": "GET /auth/policies",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, active)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all your account policies.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new policy",
          "method": "POST",
          "url": "/auth/policies",
          "category": "auth",
          "path": "auth/policies",
          "key": "POST /auth/policies",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": "<boolean>",
              "name": " ",
              "rules": [
                {
                  "actions": [
                    "<string>",
                    "<string>"
                  ],
                  "effect": "deny",
                  "name": "K=8m2&(^[",
                  "resource": "<string>",
                  "condition": {
                    "ip_address": [
                      "<string>"
                    ]
                  }
                },
                {
                  "actions": [
                    "<string>",
                    "<string>"
                  ],
                  "effect": "allow",
                  "name": " ",
                  "resource": "<string>",
                  "condition": {
                    "ip_address": [
                      "<string>"
                    ]
                  }
                }
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "effect": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      },
                      "condition": {
                        "type": "object",
                        "properties": {
                          "ip_address": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "ip_address"
                        ]
                      }
                    },
                    "required": [
                      "actions",
                      "effect",
                      "name",
                      "resource",
                      "condition"
                    ]
                  }
                }
              },
              "required": [
                "active",
                "name",
                "rules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": "<boolean>",
                  "name": " ",
                  "rules": [
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "deny",
                      "name": "K=8m2&(^[",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    },
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": " ",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": "<boolean>",
                  "name": " ",
                  "rules": [
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "deny",
                      "name": "K=8m2&(^[",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    },
                    {
                      "actions": [
                        "<string>",
                        "<string>"
                      ],
                      "effect": "allow",
                      "name": " ",
                      "resource": "<string>",
                      "condition": {
                        "ip_address": [
                          "<string>"
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new policy for your account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 6,
        "POST": 6,
        "DELETE": 2,
        "PUT": 3,
        "PATCH": 1
      },
      "priorityCounts": {
        "high": 18,
        "medium": 0,
        "low": 0
      },
      "complexityCounts": {
        "high": 0,
        "medium": 7,
        "low": 11
      },
      "totalEndpoints": 18,
      "coverage": 0,
      "priority": "high"
    },
    "payments": {
      "name": "payments",
      "endpoints": [
        {
          "name": "Retrieve details from a credit card",
          "method": "GET",
          "url": "/payments/credit_cards/{{creditCardId}}",
          "category": "payments",
          "path": "payments/credit_cards/{id}",
          "key": "GET /payments/credit_cards/{{creditCardId}}",
          "pathParams": [
            {
              "name": "creditCardId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific credit card in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a credit card",
          "method": "PATCH",
          "url": "/payments/credit_cards/:id",
          "category": "payments",
          "path": "payments/credit_cards/{id}",
          "key": "PATCH /payments/credit_cards/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "is_default": "<boolean>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "is_default": {
                  "type": "string"
                }
              },
              "required": [
                "is_default"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "is_default": "<boolean>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "is_default": "<boolean>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the field 'is_default' to enable of an existing credit card.Only the field 'is_default' is editable for an existing card.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a credit card",
          "method": "DELETE",
          "url": "/payments/credit_cards/:id",
          "category": "payments",
          "path": "payments/credit_cards/{id}",
          "key": "DELETE /payments/credit_cards/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific credit card in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of the credit cards",
          "method": "GET",
          "url": "/payments/credit_cards",
          "category": "payments",
          "path": "payments/credit_cards",
          "key": "GET /payments/credit_cards",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all credit cards owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new credit card",
          "method": "POST",
          "url": "/payments/credit_cards",
          "category": "payments",
          "path": "payments/credit_cards",
          "key": "POST /payments/credit_cards",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "card_address_zip": "02110-001",
              "card_brand": "visa",
              "card_country": "BR",
              "card_expiration_month": 12,
              "card_expiration_year": 2026,
              "card_holder": "JOAO DA SILVA",
              "card_id": "card_1PQB46ErKN9EvH2jBhcny2h3",
              "card_last_4_digits": "4242",
              "stripe_token": "tok_visa",
              "card_address_line1": "Avenida Paulista, 1000",
              "card_address_line2": "Andar 10",
              "is_default": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "card_address_zip": {
                  "type": "string"
                },
                "card_brand": {
                  "type": "string"
                },
                "card_country": {
                  "type": "string"
                },
                "card_expiration_month": {
                  "type": "number"
                },
                "card_expiration_year": {
                  "type": "number"
                },
                "card_holder": {
                  "type": "string"
                },
                "card_id": {
                  "type": "string"
                },
                "card_last_4_digits": {
                  "type": "string"
                },
                "stripe_token": {
                  "type": "string"
                },
                "card_address_line1": {
                  "type": "string"
                },
                "card_address_line2": {
                  "type": "string"
                },
                "is_default": {
                  "type": "boolean"
                }
              },
              "required": [
                "card_address_zip",
                "card_brand",
                "card_country",
                "card_expiration_month",
                "card_expiration_year",
                "card_holder",
                "card_id",
                "card_last_4_digits",
                "stripe_token",
                "card_address_line1",
                "card_address_line2",
                "is_default"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "card_address_zip": "02110-001",
                  "card_brand": "visa",
                  "card_country": "BR",
                  "card_expiration_month": 12,
                  "card_expiration_year": 2026,
                  "card_holder": "JOAO DA SILVA",
                  "card_id": "card_1PQB46ErKN9EvH2jBhcny2h3",
                  "card_last_4_digits": "4242",
                  "stripe_token": "tok_visa",
                  "card_address_line1": "Avenida Paulista, 1000",
                  "card_address_line2": "Andar 10",
                  "is_default": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "card_address_zip": "02110-001",
                  "card_brand": "visa",
                  "card_country": "BR",
                  "card_expiration_month": 12,
                  "card_expiration_year": 2026,
                  "card_holder": "JOAO DA SILVA",
                  "card_id": "card_1PQB46ErKN9EvH2jBhcny2h3",
                  "card_last_4_digits": "4242",
                  "stripe_token": "tok_visa",
                  "card_address_line1": "Avenida Paulista, 1000",
                  "card_address_line2": "Andar 10",
                  "is_default": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new credit card for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Add credits using the default credit card",
          "method": "POST",
          "url": "/payments/credits",
          "category": "payments",
          "path": "payments/credits",
          "key": "POST /payments/credits",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "amount": "64"
            },
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string"
                }
              },
              "required": [
                "amount"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "amount": "64"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "amount": "64"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Add credit into the default credit card in US Dollars.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of the payment history",
          "method": "GET",
          "url": "/payments/history",
          "category": "payments",
          "path": "payments/history",
          "key": "GET /payments/history",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "#",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "payment_due",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "2",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "payment_method_details",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all details of the payment history.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 3,
        "PATCH": 1,
        "DELETE": 1,
        "POST": 2
      },
      "priorityCounts": {
        "high": 0,
        "medium": 4,
        "low": 3
      },
      "complexityCounts": {
        "high": 1,
        "medium": 2,
        "low": 4
      },
      "totalEndpoints": 7,
      "coverage": 0,
      "priority": "low"
    },
    "workspace": {
      "name": "workspace",
      "endpoints": [
        {
          "name": "Retrieve details of a Custom Page",
          "method": "GET",
          "url": "/workspace/custom_pages/{{customPageId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "GET /workspace/custom_pages/{{customPageId}}",
          "pathParams": [
            {
              "name": "customPageId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "****",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Custom Page in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Custom Page",
          "method": "PUT",
          "url": "/workspace/custom_pages/{{customPageId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "PUT /workspace/custom_pages/{{customPageId}}",
          "pathParams": [
            {
              "name": "customPageId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "default": false,
              "connector_custom_pages": {
                "edge_connector": 173,
                "pages": [
                  {
                    "code": "default",
                    "ttl": 3,
                    "uri": null,
                    "custom_status_code": null
                  },
                  {
                    "code": "426",
                    "ttl": 2,
                    "uri": null,
                    "custom_status_code": null
                  }
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "default": {
                  "type": "boolean"
                },
                "connector_custom_pages": {
                  "type": "object",
                  "properties": {
                    "edge_connector": {
                      "type": "number"
                    },
                    "pages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "ttl": {
                            "type": "number"
                          },
                          "uri": {
                            "type": "object"
                          },
                          "custom_status_code": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "code",
                          "ttl"
                        ]
                      }
                    }
                  },
                  "required": [
                    "edge_connector",
                    "pages"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "default",
                "connector_custom_pages"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Custom Page. This replaces the entire Custom Page with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Custom Page",
          "method": "PATCH",
          "url": "/workspace/custom_pages/{{customPageId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "PATCH /workspace/custom_pages/{{customPageId}}",
          "pathParams": [
            {
              "name": "customPageId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "default": false,
              "connector_custom_pages": {
                "edge_connector": 173,
                "pages": [
                  {
                    "code": "default",
                    "ttl": 3,
                    "uri": null,
                    "custom_status_code": null
                  },
                  {
                    "code": "426",
                    "ttl": 2,
                    "uri": null,
                    "custom_status_code": null
                  }
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "default": {
                  "type": "boolean"
                },
                "connector_custom_pages": {
                  "type": "object",
                  "properties": {
                    "edge_connector": {
                      "type": "number"
                    },
                    "pages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "ttl": {
                            "type": "number"
                          },
                          "uri": {
                            "type": "object"
                          },
                          "custom_status_code": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "code",
                          "ttl"
                        ]
                      }
                    }
                  },
                  "required": [
                    "edge_connector",
                    "pages"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "default",
                "connector_custom_pages"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Custom Page without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a Custom Page",
          "method": "DELETE",
          "url": "/workspace/custom_pages/{{deleteId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "DELETE /workspace/custom_pages/{{deleteId}}",
          "pathParams": [
            {
              "name": "deleteId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Custom Page in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Custom Pages",
          "method": "GET",
          "url": "/workspace/custom_pages",
          "category": "workspace",
          "path": "workspace/custom_pages",
          "key": "GET /workspace/custom_pages",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "custom_status_code",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "last_modified",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, last_editor, last_modified, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "1",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "100",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "Custom Page120525152504592",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Custom Pages owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Custom Page",
          "method": "POST",
          "url": "/workspace/custom_pages",
          "category": "workspace",
          "path": "workspace/custom_pages",
          "key": "POST /workspace/custom_pages",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{uniqueName}}-custom-page",
              "active": true,
              "pages": [
                {
                  "code": "404",
                  "uri": "/error-pages/404.html"
                },
                {
                  "code": "500",
                  "uri": "/error-pages/500.html"
                }
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "pages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "uri": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "code",
                      "uri"
                    ]
                  }
                }
              },
              "required": [
                "name",
                "active",
                "pages"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{uniqueName}}-custom-page",
                  "active": true,
                  "pages": [
                    {
                      "code": "404",
                      "uri": "/error-pages/404.html"
                    },
                    {
                      "code": "500",
                      "uri": "/error-pages/500.html"
                    }
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{uniqueName}}-custom-page",
                  "active": true,
                  "pages": [
                    {
                      "code": "404",
                      "uri": "/error-pages/404.html"
                    },
                    {
                      "code": "500",
                      "uri": "/error-pages/500.html"
                    }
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Custom Page in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Network List",
          "method": "GET",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "GET /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Network List in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Network List",
          "method": "PUT",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "PUT /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Network List. This replaces the entire Network List with the new data provided.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Network List",
          "method": "PATCH",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "PATCH /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Network List without affecting other fields.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a Network List",
          "method": "DELETE",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "DELETE /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Network List in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Network Lists",
          "method": "GET",
          "url": "/workspace/network_lists",
          "category": "workspace",
          "path": "workspace/network_lists",
          "key": "GET /workspace/network_lists",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, type, items, last_editor, last_modified, active)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Network Lists owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Network List",
          "method": "POST",
          "url": "/workspace/network_lists",
          "category": "workspace",
          "path": "workspace/network_lists",
          "key": "POST /workspace/network_lists",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{networkListName}}",
              "items": [
                "192.168.0.0/24",
                "10.0.0.0/8",
                "172.16.0.1"
              ],
              "type": "ip_cidr",
              "active": true,
              "list_type": "allow"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "list_type": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "items",
                "type",
                "active",
                "list_type"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{networkListName}}",
                  "items": [
                    "192.168.0.0/24",
                    "10.0.0.0/8",
                    "172.16.0.1"
                  ],
                  "type": "ip_cidr",
                  "active": true,
                  "list_type": "allow"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{networkListName}}",
                  "items": [
                    "192.168.0.0/24",
                    "10.0.0.0/8",
                    "172.16.0.1"
                  ],
                  "type": "ip_cidr",
                  "active": true,
                  "list_type": "allow"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Network List in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Purge Request",
          "method": "POST",
          "url": "/workspace/purge/url",
          "category": "workspace",
          "path": "workspace/purge/{purgeType}",
          "key": "POST /workspace/purge/url",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "items": [
                "https://domain-with-edge-app.map.azionedge.net",
                "https://domain-with-edge-app.map.azionedge.net/"
              ],
              "layer": "edge_cache"
            },
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "layer": {
                  "type": "string"
                }
              },
              "required": [
                "items",
                "layer"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "items": [
                    "https://domain-with-edge-app.map.azionedge.net",
                    "https://domain-with-edge-app.map.azionedge.net/"
                  ],
                  "layer": "edge_cache"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "items": [
                    "https://domain-with-edge-app.map.azionedge.net",
                    "https://domain-with-edge-app.map.azionedge.net/"
                  ],
                  "layer": "edge_cache"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Purge Request in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Workload Deployment",
          "method": "GET",
          "url": "/workspace/workloads/{{workloadId}}/deployments/{{workloadDeploymentsId}}",
          "category": "workspace",
          "path": "workspace/workloads/{workloadId}/deployments/{id}",
          "key": "GET /workspace/workloads/{{workloadId}}/deployments/{{workloadDeploymentsId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            },
            {
              "name": "workloadDeploymentsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Workload Deployment in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Workload Deployment",
          "method": "PUT",
          "url": "/workspace/workloads/{{workloadId}}/deployments/{{workloadDeploymentsId}}",
          "category": "workspace",
          "path": "workspace/workloads/{workloadId}/deployments/{id}",
          "key": "PUT /workspace/workloads/{{workloadId}}/deployments/{{workloadDeploymentsId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            },
            {
              "name": "workloadDeploymentsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Workload",
              "preset": {
                "name": "static"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "preset": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "name",
                "preset"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Workload Deployment. This replaces the entire Workload Deployment with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Workload Deployment",
          "method": "PATCH",
          "url": "/workspace/workloads/{{workloadId}}/deployments/{{workloadDeploymentsId}}",
          "category": "workspace",
          "path": "workspace/workloads/{workloadId}/deployments/{id}",
          "key": "PATCH /workspace/workloads/{{workloadId}}/deployments/{{workloadDeploymentsId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            },
            {
              "name": "workloadDeploymentsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Workload",
              "preset": {
                "name": "static"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "preset": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "name",
                "preset"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Workload Deployment without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Workload Deployments",
          "method": "GET",
          "url": "/workspace/workloads/{{workloadId}}/deployments",
          "category": "workspace",
          "path": "workspace/workloads/{workloadId}/deployments",
          "key": "GET /workspace/workloads/{{workloadId}}/deployments",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, tag, current)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Workload Deployments related to your account's Workloads.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Workload",
          "method": "GET",
          "url": "/workspace/workloads/{{workloadId}}",
          "category": "workspace",
          "path": "workspace/workloads/{globalId}",
          "key": "GET /workspace/workloads/{{workloadId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Workload in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Workload",
          "method": "PUT",
          "url": "/workspace/workloads/{{workloadId}}",
          "category": "workspace",
          "path": "workspace/workloads/{globalId}",
          "key": "PUT /workspace/workloads/{{workloadId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Workload",
              "preset": {
                "name": "static"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "preset": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "name",
                "preset"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Workload. This replaces the entire Workload with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Workload",
          "method": "PATCH",
          "url": "/workspace/workloads/{{workloadId}}",
          "category": "workspace",
          "path": "workspace/workloads/{globalId}",
          "key": "PATCH /workspace/workloads/{{workloadId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Workload",
              "preset": {
                "name": "static"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "preset": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "name",
                "preset"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Workload",
                  "preset": {
                    "name": "static"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Workload without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Workload",
          "method": "DELETE",
          "url": "/workspace/workloads/{{workloadId}}",
          "category": "workspace",
          "path": "workspace/workloads/{globalId}",
          "key": "DELETE /workspace/workloads/{{workloadId}}",
          "pathParams": [
            {
              "name": "workloadId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Workload in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Workloads",
          "method": "GET",
          "url": "/workspace/workloads",
          "category": "workspace",
          "path": "workspace/workloads",
          "key": "GET /workspace/workloads",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "domains",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: edge_application, edge_firewall, id, name, last_editor, last_modified, active, alternate_domains, network_map, domains, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "200",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Workloads owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Workload",
          "method": "POST",
          "url": "/workspace/workloads",
          "category": "workspace",
          "path": "workspace/workloads",
          "key": "POST /workspace/workloads",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Workload 2",
              "preset": {
                "name": "static"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "preset": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "name",
                "preset"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Workload 2",
                  "preset": {
                    "name": "static"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Workload 2",
                  "preset": {
                    "name": "static"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Workload in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 8,
        "PUT": 4,
        "PATCH": 4,
        "DELETE": 3,
        "POST": 4
      },
      "priorityCounts": {
        "high": 0,
        "medium": 12,
        "low": 11
      },
      "complexityCounts": {
        "high": 1,
        "medium": 12,
        "low": 10
      },
      "totalEndpoints": 23,
      "coverage": 0,
      "priority": "low"
    },
    "dns": {
      "name": "dns",
      "endpoints": [
        {
          "name": "Retrieve details of a DNSSEC",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}/dnssec",
          "category": "dns",
          "path": "dns/zones/{zoneId}/dnssec",
          "key": "GET /workspace/dns/zones/{{zoneId}}/dnssec",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific DNSSEC from a DNS Zone in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a DNSSEC",
          "method": "PUT",
          "url": "/workspace/dns/zones/{{zoneId}}/dnssec",
          "category": "dns",
          "path": "dns/zones/{zoneId}/dnssec",
          "key": "PUT /workspace/dns/zones/{{zoneId}}/dnssec",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "enabled": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "required": [
                "enabled"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "enabled": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "enabled": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing a DNSSEC. This replaces the entire DNSSEC with the new data provided.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a DNSSEC",
          "method": "PATCH",
          "url": "/workspace/dns/zones/{{zoneId}}/dnssec",
          "category": "dns",
          "path": "dns/zones/{zoneId}/dnssec",
          "key": "PATCH /workspace/dns/zones/{{zoneId}}/dnssec",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "enabled": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "required": [
                "enabled"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "enabled": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "enabled": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing DNSSEC without affecting other fields.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a DNS Record",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "GET /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific DNS Record from a DNS Zone in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a DNS Record",
          "method": "PUT",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "PUT /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "CNAME",
              "policy": "simple",
              "name": "recorddns",
              "rdata": [
                "recorddns.map.edgeazion.net"
              ],
              "ttl": 36,
              "description": "putTest",
              "weight": "100"
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "policy": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rdata": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ttl": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "policy",
                "name",
                "rdata",
                "ttl",
                "description",
                "weight"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "putTest",
                  "weight": "100"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "putTest",
                  "weight": "100"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing a DNS Record. This replaces the entire DNS Record with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a DNS Record",
          "method": "PATCH",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "PATCH /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "record_type": "CNAME",
              "policy": "simple",
              "entry": "recorddns",
              "answers_list": [
                "recorddns.map.edgeazion.net"
              ],
              "ttl": 36,
              "description": "patchTest",
              "weight": "100"
            },
            "schema": {
              "type": "object",
              "properties": {
                "record_type": {
                  "type": "string"
                },
                "policy": {
                  "type": "string"
                },
                "entry": {
                  "type": "string"
                },
                "answers_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ttl": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                }
              },
              "required": [
                "record_type",
                "policy",
                "entry",
                "answers_list",
                "ttl",
                "description",
                "weight"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "record_type": "CNAME",
                  "policy": "simple",
                  "entry": "recorddns",
                  "answers_list": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "patchTest",
                  "weight": "100"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "record_type": "CNAME",
                  "policy": "simple",
                  "entry": "recorddns",
                  "answers_list": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "patchTest",
                  "weight": "100"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing DNS Record without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a DNS Record",
          "method": "DELETE",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "DELETE /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific a DNS Record from a DNS Zone in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List DNS Records",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}/records",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records",
          "key": "GET /workspace/dns/zones/{{zoneId}}/records",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all DNS Records from a DNS Zone owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a DNS Record",
          "method": "POST",
          "url": "/workspace/dns/zones/{{zoneId}}/records",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records",
          "key": "POST /workspace/dns/zones/{{zoneId}}/records",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "CNAME",
              "policy": "simple",
              "name": "recorddns",
              "rdata": [
                "recorddns.map.edgeazion.net"
              ],
              "ttl": 3600,
              "description": "",
              "weight": "100"
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "policy": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rdata": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ttl": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "policy",
                "name",
                "rdata",
                "ttl",
                "description",
                "weight"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 3600,
                  "description": "",
                  "weight": "100"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 3600,
                  "description": "",
                  "weight": "100"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new DNS Record in a DNS Zone for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a DNS Zone",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}",
          "key": "GET /workspace/dns/zones/{{zoneId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific DNS Zone in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a DNS Zone",
          "method": "PUT",
          "url": "/workspace/dns/zones/{{zoneId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}",
          "key": "PUT /workspace/dns/zones/{{zoneId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": true,
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "active",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": true,
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": true,
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing a DNS Zone. This replaces the entire DNS Zone with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a DNS Zone",
          "method": "PATCH",
          "url": "/workspace/dns/zones/{{zoneId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}",
          "key": "PATCH /workspace/dns/zones/{{zoneId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": true,
              "name": "patchTest"
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "active",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": true,
                  "name": "patchTest"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": true,
                  "name": "patchTest"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing DNS Zone without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a DNS Zone",
          "method": "DELETE",
          "url": "/workspace/dns/zones/{{zoneId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}",
          "key": "DELETE /workspace/dns/zones/{{zoneId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific a DNS Zone in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List DNS Zones",
          "method": "GET",
          "url": "/workspace/dns/zones",
          "category": "dns",
          "path": "dns/zones",
          "key": "GET /workspace/dns/zones",
          "pathParams": [],
          "queryParams": [
            {
              "key": "domain",
              "value": "<string>",
              "description": "Search by domain",
              "required": false,
              "type": "string"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "name",
              "value": "21323213",
              "description": "Search by name",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all DNS Zones owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a DNS Zone",
          "method": "POST",
          "url": "/workspace/dns/zones",
          "category": "dns",
          "path": "dns/zones",
          "key": "POST /workspace/dns/zones",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomDnsName}}",
              "domain": "{{randomDnsDomain}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "domain": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "domain",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomDnsName}}",
                  "domain": "{{randomDnsDomain}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomDnsName}}",
                  "domain": "{{randomDnsDomain}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new DNS Zone for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 5,
        "PUT": 3,
        "PATCH": 3,
        "DELETE": 2,
        "POST": 2
      },
      "priorityCounts": {
        "high": 0,
        "medium": 7,
        "low": 8
      },
      "complexityCounts": {
        "high": 5,
        "medium": 3,
        "low": 7
      },
      "totalEndpoints": 15,
      "coverage": 0,
      "priority": "low"
    },
    "data_stream": {
      "name": "data_stream",
      "endpoints": [
        {
          "name": "Retrieve details of a template",
          "method": "GET",
          "url": "/data_stream/templates/{{templateId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "GET /data_stream/templates/{{templateId}}",
          "pathParams": [
            {
              "name": "templateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific Data Set in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a template",
          "method": "PUT",
          "url": "/data_stream/templates/{{dataSetId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "PUT /data_stream/templates/{{dataSetId}}",
          "pathParams": [
            {
              "name": "dataSetId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
              "name": "{{streamName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "data_set": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "data_set",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing custom Data Set.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a template",
          "method": "PATCH",
          "url": "/data_stream/templates/{{dataSetId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "PATCH /data_stream/templates/{{dataSetId}}",
          "pathParams": [
            {
              "name": "dataSetId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
              "name": "{{streamName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "data_set": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "data_set",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing custom Data Set.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a template",
          "method": "DELETE",
          "url": "/data_stream/data_sets/{{dataSetId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "DELETE /data_stream/data_sets/{{dataSetId}}",
          "pathParams": [
            {
              "name": "dataSetId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific custom Data Set in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Template",
          "method": "GET",
          "url": "/data_stream/templates",
          "category": "data_stream",
          "path": "data_stream/templates",
          "key": "GET /data_stream/templates",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Data Sets owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Template",
          "method": "POST",
          "url": "/data_stream/templates",
          "category": "data_stream",
          "path": "data_stream/templates",
          "key": "POST /data_stream/templates",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
              "name": "{{streamName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "data_set": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "data_set",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new custom Data Set in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of Data Sources",
          "method": "GET",
          "url": "/data_stream/data_sources",
          "category": "data_stream",
          "path": "data_stream/data_sources",
          "key": "GET /data_stream/data_sources",
          "pathParams": [],
          "queryParams": [
            {
              "key": "active",
              "value": "<boolean>",
              "description": "",
              "required": false,
              "type": "boolean"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "name",
              "value": "<string>",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            },
            {
              "key": "slug",
              "value": "<string>",
              "description": "",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Data Sources.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Data Stream",
          "method": "GET",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "GET /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific Data Stream in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Data Stream",
          "method": "PUT",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "PUT /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Data Stream",
              "template_id": 2,
              "domain_ids": [
                1
              ],
              "endpoint": {
                "endpoint_type": "standard",
                "url": "https://example.com/endpoint",
                "log_line_separator": "\\n",
                "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "template_id": {
                  "type": "number"
                },
                "domain_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "endpoint": {
                  "type": "object",
                  "properties": {
                    "endpoint_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "log_line_separator": {
                      "type": "string"
                    },
                    "payload_format": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "endpoint_type",
                    "url",
                    "log_line_separator",
                    "payload_format"
                  ]
                }
              },
              "required": [
                "name",
                "template_id",
                "domain_ids",
                "endpoint"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Data Stream.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Data Stream",
          "method": "PATCH",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "PATCH /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Data Stream",
              "template_id": 2,
              "domain_ids": [
                1
              ],
              "endpoint": {
                "endpoint_type": "standard",
                "url": "https://example.com/endpoint",
                "log_line_separator": "\\n",
                "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "template_id": {
                  "type": "number"
                },
                "domain_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "endpoint": {
                  "type": "object",
                  "properties": {
                    "endpoint_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "log_line_separator": {
                      "type": "string"
                    },
                    "payload_format": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "endpoint_type",
                    "url",
                    "log_line_separator",
                    "payload_format"
                  ]
                }
              },
              "required": [
                "name",
                "template_id",
                "domain_ids",
                "endpoint"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Data Stream.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a Data Stream",
          "method": "DELETE",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "DELETE /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Data Stream in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Data Streams",
          "method": "GET",
          "url": "/data_stream/streams",
          "category": "data_stream",
          "path": "data_stream/streams",
          "key": "GET /data_stream/streams",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Data Streams owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Data Stream",
          "method": "POST",
          "url": "/data_stream/streams",
          "category": "data_stream",
          "path": "data_stream/streams",
          "key": "POST /data_stream/streams",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Data Stream",
              "template_id": 2,
              "domain_ids": [
                1
              ],
              "endpoint": {
                "endpoint_type": "standard",
                "url": "https://example.com/endpoint",
                "log_line_separator": "\\n",
                "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "template_id": {
                  "type": "number"
                },
                "domain_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "endpoint": {
                  "type": "object",
                  "properties": {
                    "endpoint_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "log_line_separator": {
                      "type": "string"
                    },
                    "payload_format": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "endpoint_type",
                    "url",
                    "log_line_separator",
                    "payload_format"
                  ]
                }
              },
              "required": [
                "name",
                "template_id",
                "domain_ids",
                "endpoint"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Data Stream in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 5,
        "PUT": 2,
        "PATCH": 2,
        "DELETE": 2,
        "POST": 2
      },
      "priorityCounts": {
        "high": 0,
        "medium": 7,
        "low": 6
      },
      "complexityCounts": {
        "high": 1,
        "medium": 8,
        "low": 4
      },
      "totalEndpoints": 13,
      "coverage": 0,
      "priority": "low"
    },
    "digital_certificates": {
      "name": "digital_certificates",
      "endpoints": [
        {
          "name": "Create a certificate request (CR)",
          "method": "POST",
          "url": "/digital_certificates/certificates/request",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/request",
          "key": "POST /digital_certificates/certificates/request",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "authority": "lets_encrypt",
              "challenge": "dns",
              "common_name": "*.example-random.com",
              "name": "cert-random-timestamp"
            },
            "schema": {
              "type": "object",
              "properties": {
                "authority": {
                  "type": "string"
                },
                "challenge": {
                  "type": "string"
                },
                "common_name": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "authority",
                "challenge",
                "common_name",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "authority": "lets_encrypt",
                  "challenge": "dns",
                  "common_name": "*.example-random.com",
                  "name": "cert-random-timestamp"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "authority": "lets_encrypt",
                  "challenge": "dns",
                  "common_name": "*.example-random.com",
                  "name": "cert-random-timestamp"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new certificate request (CR) for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a certificate",
          "method": "GET",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "GET /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific certificate in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a certificate",
          "method": "PUT",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "PUT /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{certificateName}}",
              "type": "edge_certificate",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing certificate. This replaces the entire certificate with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a certificate",
          "method": "PATCH",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "PATCH /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{certificateName}}",
              "type": "edge_certificate",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing certificate without affecting other fields.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a certificate",
          "method": "DELETE",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "DELETE /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific certificate in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List certificates",
          "method": "GET",
          "url": "/digital_certificates/certificates",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates",
          "key": "GET /digital_certificates/certificates",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, certificate, issuer, subject_name, validity, status, type, managed, status_detail, csr, key_algorithm, challenge, authority, active, product_version, last_editor, last_modified)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all certificates owned by your account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a certificate",
          "method": "POST",
          "url": "/digital_certificates/certificates",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates",
          "key": "POST /digital_certificates/certificates",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomDnsName}}",
              "type": "edge_certificate"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomDnsName}}",
                  "type": "edge_certificate"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomDnsName}}",
                  "type": "edge_certificate"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new certificate for your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a certificate revocation lists (CRL)",
          "method": "GET",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "GET /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific certificate revocation lists (CRL) in your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a certificate revocation lists (CRL)",
          "method": "PUT",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "PUT /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
              "name": "{{certificateName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "crl": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "crl",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing certificate revocation lists (CRL).  This replaces the entire certificate with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a certificate revocation lists (CRL)",
          "method": "PATCH",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "PATCH /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
              "name": "{{certificateName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "crl": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "crl",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing certificate revocation lists (CRL) without affecting other fields.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a certificate revocation lists (CRL)",
          "method": "DELETE",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "DELETE /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific certificate revocation lists (CRL) in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List certificate revocation lists (CRL)",
          "method": "GET",
          "url": "/digital_certificates/crls",
          "category": "digital_certificates",
          "path": "digital_certificates/crls",
          "key": "GET /digital_certificates/crls",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, active, last_editor, last_modified, product_version, issuer, last_update, next_update, crl)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all List certificate revocation lists (CRL) owned by your account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a certificate revocation lists (CRL)",
          "method": "POST",
          "url": "/digital_certificates/crls",
          "category": "digital_certificates",
          "path": "digital_certificates/crls",
          "key": "POST /digital_certificates/crls",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
              "name": "{{certificateName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "crl": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "crl",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new certificate revocation lists (CRL) for your account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a certificate signing request (CSR)",
          "method": "POST",
          "url": "/digital_certificates/csr",
          "category": "digital_certificates",
          "path": "digital_certificates/csr",
          "key": "POST /digital_certificates/csr",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "alternative_names": [
                "*.y.*.T.*.GUKYpnix7Gr9b02dttWkBnXoXAoUsTK1FcaV0vwSojc14fyC9F73PypE9vXkm.0dqjLo3fpKD.*.O.*.I6hsZWaApmJHlKfdLDRT565dXI4YI.zBZCTweGGRag0btPWFwGOKKEzZl5efbZS-xxK6Xb6",
                "1UJU8zJJx-pmvV9eFap9F6fFqmkc21p12VpPDmoeSSYkc1hKrhxqMwX7BN9CPPd.p5vthrjEWdnVrhpLAx6910CfXExAynRR5gtsNBV.Ec66485rneneUn-zXEcwsVK5riPcZj6qnnshoeUK8P8ZeqOsAuNGn2bnxC6"
              ],
              "common_name": "*.example.com",
              "country": "BR",
              "email": "matheus.mendonca@azion.com",
              "locality": "Porto Alegre",
              "name": "{{csrName}}}}",
              "organization": "Azion",
              "organization_unity": "QE",
              "state": "RS",
              "key_algorithm": "rsa_2048"
            },
            "schema": {
              "type": "object",
              "properties": {
                "alternative_names": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "common_name": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "locality": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "organization": {
                  "type": "string"
                },
                "organization_unity": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "key_algorithm": {
                  "type": "string"
                }
              },
              "required": [
                "alternative_names",
                "common_name",
                "country",
                "email",
                "locality",
                "name",
                "organization",
                "organization_unity",
                "state",
                "key_algorithm"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "alternative_names": [
                    "*.y.*.T.*.GUKYpnix7Gr9b02dttWkBnXoXAoUsTK1FcaV0vwSojc14fyC9F73PypE9vXkm.0dqjLo3fpKD.*.O.*.I6hsZWaApmJHlKfdLDRT565dXI4YI.zBZCTweGGRag0btPWFwGOKKEzZl5efbZS-xxK6Xb6",
                    "1UJU8zJJx-pmvV9eFap9F6fFqmkc21p12VpPDmoeSSYkc1hKrhxqMwX7BN9CPPd.p5vthrjEWdnVrhpLAx6910CfXExAynRR5gtsNBV.Ec66485rneneUn-zXEcwsVK5riPcZj6qnnshoeUK8P8ZeqOsAuNGn2bnxC6"
                  ],
                  "common_name": "*.example.com",
                  "country": "BR",
                  "email": "matheus.mendonca@azion.com",
                  "locality": "Porto Alegre",
                  "name": "{{csrName}}}}",
                  "organization": "Azion",
                  "organization_unity": "QE",
                  "state": "RS",
                  "key_algorithm": "rsa_2048"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "alternative_names": [
                    "*.y.*.T.*.GUKYpnix7Gr9b02dttWkBnXoXAoUsTK1FcaV0vwSojc14fyC9F73PypE9vXkm.0dqjLo3fpKD.*.O.*.I6hsZWaApmJHlKfdLDRT565dXI4YI.zBZCTweGGRag0btPWFwGOKKEzZl5efbZS-xxK6Xb6",
                    "1UJU8zJJx-pmvV9eFap9F6fFqmkc21p12VpPDmoeSSYkc1hKrhxqMwX7BN9CPPd.p5vthrjEWdnVrhpLAx6910CfXExAynRR5gtsNBV.Ec66485rneneUn-zXEcwsVK5riPcZj6qnnshoeUK8P8ZeqOsAuNGn2bnxC6"
                  ],
                  "common_name": "*.example.com",
                  "country": "BR",
                  "email": "matheus.mendonca@azion.com",
                  "locality": "Porto Alegre",
                  "name": "{{csrName}}}}",
                  "organization": "Azion",
                  "organization_unity": "QE",
                  "state": "RS",
                  "key_algorithm": "rsa_2048"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new certificate signing request (CSR) for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "POST": 4,
        "GET": 4,
        "PUT": 2,
        "PATCH": 2,
        "DELETE": 2
      },
      "priorityCounts": {
        "high": 4,
        "medium": 9,
        "low": 1
      },
      "complexityCounts": {
        "high": 1,
        "medium": 8,
        "low": 5
      },
      "totalEndpoints": 14,
      "coverage": 0,
      "priority": "medium"
    },
    "edge_application": {
      "name": "edge_application",
      "endpoints": [
        {
          "name": "Clone an Edge Application",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/clone",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}/clone",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/clone",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Application by performing a deep copy of an existing Edge Application, including its Cache Settings, Origins, Error Responses, Function Instances, and Rules Engine.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Application",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "GET /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Application in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Application",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "modules": {
                "edge_cache": {
                  "enabled": true
                },
                "functions": {
                  "enabled": false
                },
                "application_accelerator": {
                  "enabled": false
                },
                "image_processor": {
                  "enabled": false
                },
                "tiered_cache": {
                  "enabled": false
                }
              },
              "active": true,
              "debug": false
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "edge_cache": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "application_accelerator": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "image_processor": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "tiered_cache": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "edge_cache",
                    "functions",
                    "application_accelerator",
                    "image_processor",
                    "tiered_cache"
                  ]
                },
                "active": {
                  "type": "boolean"
                },
                "debug": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active",
                "debug"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "edge_cache": {
                      "enabled": true
                    },
                    "functions": {
                      "enabled": false
                    },
                    "application_accelerator": {
                      "enabled": false
                    },
                    "image_processor": {
                      "enabled": false
                    },
                    "tiered_cache": {
                      "enabled": false
                    }
                  },
                  "active": true,
                  "debug": false
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "edge_cache": {
                      "enabled": true
                    },
                    "functions": {
                      "enabled": false
                    },
                    "application_accelerator": {
                      "enabled": false
                    },
                    "image_processor": {
                      "enabled": false
                    },
                    "tiered_cache": {
                      "enabled": false
                    }
                  },
                  "active": true,
                  "debug": false
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Application. This replaces the entire Edge Application with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Application",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Application without affecting other fields.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Application",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Application in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Applications Cache Setting",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Cache Setting in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Applications Cache Setting",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "browser_cache": {
                "behavior": "honor",
                "max_age": 0
              },
              "edge_cache": {
                "behavior": "honor",
                "max_age": 60,
                "caching_for_post_enabled": false,
                "caching_for_options_enabled": false,
                "stale_cache_enabled": true,
                "tiered_cache_enabled": false
              },
              "application_controls": {
                "cache_by_query_string": "ignore",
                "query_string_fields": [],
                "query_string_sort_enabled": false,
                "cache_by_cookies": "ignore",
                "cookie_names": [],
                "adaptive_delivery_action": "ignore",
                "device_group": []
              },
              "slice_controls": {
                "slice_configuration_enabled": true,
                "slice_edge_caching_enabled": true,
                "slice_tiered_caching_enabled": false,
                "slice_configuration_range": 1024
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "browser_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age"
                  ]
                },
                "edge_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    },
                    "caching_for_post_enabled": {
                      "type": "boolean"
                    },
                    "caching_for_options_enabled": {
                      "type": "boolean"
                    },
                    "stale_cache_enabled": {
                      "type": "boolean"
                    },
                    "tiered_cache_enabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age",
                    "caching_for_post_enabled",
                    "caching_for_options_enabled",
                    "stale_cache_enabled",
                    "tiered_cache_enabled"
                  ]
                },
                "application_controls": {
                  "type": "object",
                  "properties": {
                    "cache_by_query_string": {
                      "type": "string"
                    },
                    "query_string_fields": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "query_string_sort_enabled": {
                      "type": "boolean"
                    },
                    "cache_by_cookies": {
                      "type": "string"
                    },
                    "cookie_names": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "adaptive_delivery_action": {
                      "type": "string"
                    },
                    "device_group": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    }
                  },
                  "required": [
                    "cache_by_query_string",
                    "query_string_fields",
                    "query_string_sort_enabled",
                    "cache_by_cookies",
                    "cookie_names",
                    "adaptive_delivery_action",
                    "device_group"
                  ]
                },
                "slice_controls": {
                  "type": "object",
                  "properties": {
                    "slice_configuration_enabled": {
                      "type": "boolean"
                    },
                    "slice_edge_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_tiered_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_configuration_range": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "slice_configuration_enabled",
                    "slice_edge_caching_enabled",
                    "slice_tiered_caching_enabled",
                    "slice_configuration_range"
                  ]
                }
              },
              "required": [
                "name",
                "browser_cache",
                "edge_cache",
                "application_controls",
                "slice_controls"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Cache Setting. This replaces the entire Cache Setting with the new data provided.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Applications Cache Setting",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "browser_cache": {
                "behavior": "honor",
                "max_age": 0
              },
              "edge_cache": {
                "behavior": "honor",
                "max_age": 60,
                "caching_for_post_enabled": false,
                "caching_for_options_enabled": false,
                "stale_cache_enabled": true,
                "tiered_cache_enabled": false
              },
              "application_controls": {
                "cache_by_query_string": "ignore",
                "query_string_fields": [],
                "query_string_sort_enabled": false,
                "cache_by_cookies": "ignore",
                "cookie_names": [],
                "adaptive_delivery_action": "ignore",
                "device_group": []
              },
              "slice_controls": {
                "slice_configuration_enabled": true,
                "slice_edge_caching_enabled": true,
                "slice_tiered_caching_enabled": false,
                "slice_configuration_range": 1024
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "browser_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age"
                  ]
                },
                "edge_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    },
                    "caching_for_post_enabled": {
                      "type": "boolean"
                    },
                    "caching_for_options_enabled": {
                      "type": "boolean"
                    },
                    "stale_cache_enabled": {
                      "type": "boolean"
                    },
                    "tiered_cache_enabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age",
                    "caching_for_post_enabled",
                    "caching_for_options_enabled",
                    "stale_cache_enabled",
                    "tiered_cache_enabled"
                  ]
                },
                "application_controls": {
                  "type": "object",
                  "properties": {
                    "cache_by_query_string": {
                      "type": "string"
                    },
                    "query_string_fields": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "query_string_sort_enabled": {
                      "type": "boolean"
                    },
                    "cache_by_cookies": {
                      "type": "string"
                    },
                    "cookie_names": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "adaptive_delivery_action": {
                      "type": "string"
                    },
                    "device_group": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    }
                  },
                  "required": [
                    "cache_by_query_string",
                    "query_string_fields",
                    "query_string_sort_enabled",
                    "cache_by_cookies",
                    "cookie_names",
                    "adaptive_delivery_action",
                    "device_group"
                  ]
                },
                "slice_controls": {
                  "type": "object",
                  "properties": {
                    "slice_configuration_enabled": {
                      "type": "boolean"
                    },
                    "slice_edge_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_tiered_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_configuration_range": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "slice_configuration_enabled",
                    "slice_edge_caching_enabled",
                    "slice_tiered_caching_enabled",
                    "slice_configuration_range"
                  ]
                }
              },
              "required": [
                "name",
                "browser_cache",
                "edge_cache",
                "application_controls",
                "slice_controls"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Cache Setting without affecting other fields.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Applications Cache Setting",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Cache Setting in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List all Edge Applications Cache Settings",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/cache_settings",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Cache Settings owned by your account.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Applications Cache Setting",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/cache_settings",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "browser_cache": {
                "behavior": "honor",
                "max_age": 0
              },
              "edge_cache": {
                "behavior": "honor",
                "max_age": 60,
                "caching_for_post_enabled": false,
                "caching_for_options_enabled": false,
                "stale_cache_enabled": true,
                "tiered_cache_enabled": false
              },
              "application_controls": {
                "cache_by_query_string": "ignore",
                "query_string_fields": [],
                "query_string_sort_enabled": false,
                "cache_by_cookies": "ignore",
                "cookie_names": [],
                "adaptive_delivery_action": "ignore",
                "device_group": []
              },
              "slice_controls": {
                "slice_configuration_enabled": true,
                "slice_edge_caching_enabled": true,
                "slice_tiered_caching_enabled": false,
                "slice_configuration_range": 1024
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "browser_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age"
                  ]
                },
                "edge_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    },
                    "caching_for_post_enabled": {
                      "type": "boolean"
                    },
                    "caching_for_options_enabled": {
                      "type": "boolean"
                    },
                    "stale_cache_enabled": {
                      "type": "boolean"
                    },
                    "tiered_cache_enabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age",
                    "caching_for_post_enabled",
                    "caching_for_options_enabled",
                    "stale_cache_enabled",
                    "tiered_cache_enabled"
                  ]
                },
                "application_controls": {
                  "type": "object",
                  "properties": {
                    "cache_by_query_string": {
                      "type": "string"
                    },
                    "query_string_fields": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "query_string_sort_enabled": {
                      "type": "boolean"
                    },
                    "cache_by_cookies": {
                      "type": "string"
                    },
                    "cookie_names": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "adaptive_delivery_action": {
                      "type": "string"
                    },
                    "device_group": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    }
                  },
                  "required": [
                    "cache_by_query_string",
                    "query_string_fields",
                    "query_string_sort_enabled",
                    "cache_by_cookies",
                    "cookie_names",
                    "adaptive_delivery_action",
                    "device_group"
                  ]
                },
                "slice_controls": {
                  "type": "object",
                  "properties": {
                    "slice_configuration_enabled": {
                      "type": "boolean"
                    },
                    "slice_edge_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_tiered_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_configuration_range": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "slice_configuration_enabled",
                    "slice_edge_caching_enabled",
                    "slice_tiered_caching_enabled",
                    "slice_configuration_range"
                  ]
                }
              },
              "required": [
                "name",
                "browser_cache",
                "edge_cache",
                "application_controls",
                "slice_controls"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Cache Setting in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Device Group",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/device_groups/{id}",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "deviceGroupId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Device Group in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Applications Device Group",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/device_groups/{id}",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "deviceGroupId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "&w}@E$,S5",
              "user_agent": "d<`"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "user_agent": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "user_agent"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "&w}@E$,S5",
                  "user_agent": "d<`"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "&w}@E$,S5",
                  "user_agent": "d<`"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Device Group. This replaces the entire Device Group with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Applications Device Group",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/device_groups/{id}",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "deviceGroupId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": ",MU!8c",
              "user_agent": "A=n2:%Y"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "user_agent": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "user_agent"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": ",MU!8c",
                  "user_agent": "A=n2:%Y"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": ",MU!8c",
                  "user_agent": "A=n2:%Y"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Device Group without affecting other fields.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Applications Device Group",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/device_groups/{id}",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}/device_groups/{{deviceGroupId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "deviceGroupId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Device Group in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Applications Device Groups",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/device_groups",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/device_groups",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/device_groups",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, user_agent)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Device Groups owned by your account.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Applications Device Group",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/device_groups",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/device_groups",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/device_groups",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "&w}@E$,S5",
              "user_agent": "d<`"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "user_agent": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "user_agent"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "&w}@E$,S5",
                  "user_agent": "d<`"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "&w}@E$,S5",
                  "user_agent": "d<`"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Device Group in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Application Function Instance",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/functions/{id}",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeApplicationFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Application Function Instance in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Application Function Instance",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/functions/{id}",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeApplicationFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "edge_function": "<long>",
              "name": "MEG(?0x';",
              "json_args": {},
              "active": "<boolean>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "edge_function": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "json_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "active": {
                  "type": "string"
                }
              },
              "required": [
                "edge_function",
                "name",
                "json_args",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "edge_function": "<long>",
                  "name": "MEG(?0x';",
                  "json_args": {},
                  "active": "<boolean>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "edge_function": "<long>",
                  "name": "MEG(?0x';",
                  "json_args": {},
                  "active": "<boolean>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Application Function Instance. This replaces the entire Function Instance with the new data provided.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Application Function Instance",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/functions/{id}",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeApplicationFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": ">",
              "json_args": {},
              "edge_function": "<long>",
              "active": "<boolean>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "json_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "edge_function": {
                  "type": "string"
                },
                "active": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "json_args",
                "edge_function",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": ">",
                  "json_args": {},
                  "edge_function": "<long>",
                  "active": "<boolean>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": ">",
                  "json_args": {},
                  "edge_function": "<long>",
                  "active": "<boolean>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Application Function Instance without affecting other fields.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Application Function Instance",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/functions/{id}",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}/functions/{{edgeApplicationFunctionId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeApplicationFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Edge Application Function Instance in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Function Instances",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/functions",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/functions",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/functions",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, json_args, edge_function, active, last_editor, last_modified)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Function Instances for a specific Edge Application owned by your account.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Application Function Instance",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/functions",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/functions",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/functions",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n  \"function\": 47973,           // ✅ \"function\" em vez de \"edge_function\"\n  \"name\": \"instance_name\",\n  \"json_args\": {},\n  \"active\": true\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Function Instance for a specific Edge Application in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Application Request Rules",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/request_rules",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/request_rules",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, phase, active, description, order, behaviors, criteria, last_editor, last_modified)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Rules for a specific Edge Application owned by your account.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Application Rule",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Rule in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Application Rule",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleName}}",
              "active": true,
              "criteria": [
                [
                  {
                    "conditional": "if",
                    "operator": "does_not_exist",
                    "variable": "${arg_<name>}",
                    "argument": ""
                  }
                ]
              ],
              "behaviors": [
                {
                  "type": "enable_gzip"
                }
              ],
              "description": "$xO\"rc^mbN"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "criteria": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "conditional": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "variable": {
                          "type": "string"
                        },
                        "argument": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "conditional",
                        "operator",
                        "variable",
                        "argument"
                      ]
                    }
                  }
                },
                "behaviors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "active",
                "criteria",
                "behaviors",
                "description"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleName}}",
                  "active": true,
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "operator": "does_not_exist",
                        "variable": "${arg_<name>}",
                        "argument": ""
                      }
                    ]
                  ],
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "description": "$xO\"rc^mbN"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleName}}",
                  "active": true,
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "operator": "does_not_exist",
                        "variable": "${arg_<name>}",
                        "argument": ""
                      }
                    ]
                  ],
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "description": "$xO\"rc^mbN"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Rule. This replaces the entire Rule with the new data provided.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Application Rule",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleName}}+Patch",
              "active": false
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleName}}+Patch",
                  "active": false
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleName}}+Patch",
                  "active": false
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Application Rule  without affecting other fields.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Application Rule",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}/request_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Rule in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Application Request Rule",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/request_rules",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/request_rules",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleName}}",
              "active": true,
              "criteria": [
                [
                  {
                    "conditional": "if",
                    "variable": "${arg_<name>}",
                    "operator": "does_not_exist",
                    "argument": ""
                  }
                ]
              ],
              "behaviors": [
                {
                  "type": "enable_gzip"
                }
              ],
              "description": "testCreateResponseRule"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "criteria": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "conditional": {
                          "type": "string"
                        },
                        "variable": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "argument": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "conditional",
                        "variable",
                        "operator",
                        "argument"
                      ]
                    }
                  }
                },
                "behaviors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "active",
                "criteria",
                "behaviors",
                "description"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleName}}",
                  "active": true,
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "description": "testCreateResponseRule"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleName}}",
                  "active": true,
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "description": "testCreateResponseRule"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Rule for a specific Edge Application in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Ordering Edge Application Request Rules",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/rules/order",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/request rules",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/rules/order",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n    \"order\": [\"{{\\1}}\"]\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Reoder all Rules for a specific Edge Application owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Ordering Edge Application Response Rules",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/rules/order",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/rules/order",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n    \"order\": [\"{{\\1}}\"]\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Reoder all Rules for a specific Edge Application owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Application Response Rules",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/rules",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/rules",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, phase, active, description, order, behaviors, criteria, last_editor, last_modified)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Rules for a specific Edge Application owned by your account.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Application Response Rule",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/response_rules",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/response_rules",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleName}}",
              "active": true,
              "behaviors": [
                {
                  "type": "enable_gzip"
                }
              ],
              "criteria": [
                [
                  {
                    "conditional": "if",
                    "variable": "${arg_<name>}",
                    "operator": "does_not_exist",
                    "argument": ""
                  }
                ]
              ],
              "description": "testCreateResponseRule"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "behaviors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "criteria": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "conditional": {
                          "type": "string"
                        },
                        "variable": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "argument": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "conditional",
                        "variable",
                        "operator",
                        "argument"
                      ]
                    }
                  }
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "active",
                "behaviors",
                "criteria",
                "description"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleName}}",
                  "active": true,
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "description": "testCreateResponseRule"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleName}}",
                  "active": true,
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "description": "testCreateResponseRule"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Rule for a specific Edge Application in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Application Response Rule",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Rule in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Application Response Rule",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleName}}+Put",
              "active": true,
              "behaviors": [
                {
                  "type": "enable_gzip"
                }
              ],
              "criteria": [
                [
                  {
                    "conditional": "if",
                    "variable": "${arg_<name>}",
                    "operator": "does_not_exist",
                    "argument": ""
                  }
                ]
              ],
              "description": "testPutResponseRule"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "behaviors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "criteria": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "conditional": {
                          "type": "string"
                        },
                        "variable": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "argument": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "conditional",
                        "variable",
                        "operator",
                        "argument"
                      ]
                    }
                  }
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "active",
                "behaviors",
                "criteria",
                "description"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleName}}+Put",
                  "active": true,
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "description": "testPutResponseRule"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleName}}+Put",
                  "active": true,
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "description": "testPutResponseRule"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Rule. This replaces the entire Rule with the new data provided.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Application Response Rule",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleName}}+Patch",
              "active": true,
              "behaviors": [
                {
                  "type": "enable_gzip"
                }
              ],
              "criteria": [
                [
                  {
                    "conditional": "if",
                    "variable": "${arg_<name>}",
                    "operator": "does_not_exist",
                    "argument": ""
                  }
                ]
              ],
              "description": "testPatchResponseRule"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "behaviors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "criteria": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "conditional": {
                          "type": "string"
                        },
                        "variable": {
                          "type": "string"
                        },
                        "operator": {
                          "type": "string"
                        },
                        "argument": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "conditional",
                        "variable",
                        "operator",
                        "argument"
                      ]
                    }
                  }
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "active",
                "behaviors",
                "criteria",
                "description"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleName}}+Patch",
                  "active": true,
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "description": "testPatchResponseRule"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleName}}+Patch",
                  "active": true,
                  "behaviors": [
                    {
                      "type": "enable_gzip"
                    }
                  ],
                  "criteria": [
                    [
                      {
                        "conditional": "if",
                        "variable": "${arg_<name>}",
                        "operator": "does_not_exist",
                        "argument": ""
                      }
                    ]
                  ],
                  "description": "testPatchResponseRule"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Application Rule  without affecting other fields.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Application Response Rule",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/rules/response rules",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}/response_rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Rule in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Applications",
          "method": "GET",
          "url": "/workspace/applications",
          "category": "edge_application",
          "path": "edge_application/applications",
          "key": "GET /workspace/applications",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, last_editor, last_modified, active, debug, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Applications owned by your account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Application",
          "method": "POST",
          "url": "/workspace/applications",
          "category": "edge_application",
          "path": "edge_application/applications",
          "key": "POST /workspace/applications",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "modules": {
                "edge_cache": {
                  "enabled": true
                },
                "functions": {
                  "enabled": false
                },
                "application_accelerator": {
                  "enabled": false
                },
                "image_processor": {
                  "enabled": false
                },
                "tiered_cache": {
                  "enabled": false
                }
              },
              "active": true,
              "debug": false
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "edge_cache": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "application_accelerator": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "image_processor": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "tiered_cache": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "edge_cache",
                    "functions",
                    "application_accelerator",
                    "image_processor",
                    "tiered_cache"
                  ]
                },
                "active": {
                  "type": "boolean"
                },
                "debug": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active",
                "debug"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "edge_cache": {
                      "enabled": true
                    },
                    "functions": {
                      "enabled": false
                    },
                    "application_accelerator": {
                      "enabled": false
                    },
                    "image_processor": {
                      "enabled": false
                    },
                    "tiered_cache": {
                      "enabled": false
                    }
                  },
                  "active": true,
                  "debug": false
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "edge_cache": {
                      "enabled": true
                    },
                    "functions": {
                      "enabled": false
                    },
                    "application_accelerator": {
                      "enabled": false
                    },
                    "image_processor": {
                      "enabled": false
                    },
                    "tiered_cache": {
                      "enabled": false
                    }
                  },
                  "active": true,
                  "debug": false
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Application in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "POST": 7,
        "GET": 12,
        "PUT": 8,
        "PATCH": 6,
        "DELETE": 6
      },
      "priorityCounts": {
        "high": 6,
        "medium": 27,
        "low": 6
      },
      "complexityCounts": {
        "high": 18,
        "medium": 12,
        "low": 9
      },
      "totalEndpoints": 39,
      "coverage": 0,
      "priority": "low"
    },
    "edge_connector": {
      "name": "edge_connector",
      "endpoints": [
        {
          "name": "Retrieve details of an Edge Connector",
          "method": "GET",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "GET /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Connector in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Connector",
          "method": "PUT",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "PUT /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "live_ingest",
              "name": "putTest",
              "active": true,
              "attributes": {
                "addresses": [],
                "tls": {
                  "policy": "preserve"
                },
                "modules": {
                  "load_balancer_enabled": true,
                  "origin_shield_enabled": true
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "tls": {
                      "type": "object",
                      "properties": {
                        "policy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "policy"
                      ]
                    },
                    "modules": {
                      "type": "object",
                      "properties": {
                        "load_balancer_enabled": {
                          "type": "boolean"
                        },
                        "origin_shield_enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "load_balancer_enabled",
                        "origin_shield_enabled"
                      ]
                    }
                  },
                  "required": [
                    "addresses",
                    "tls",
                    "modules"
                  ]
                }
              },
              "required": [
                "type",
                "name",
                "active",
                "attributes"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "live_ingest",
                  "name": "putTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "live_ingest",
                  "name": "putTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Connector. This replaces the entire Edge Connector with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Connector",
          "method": "PATCH",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "PATCH /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "live_ingest",
              "name": "patchTest",
              "active": true,
              "attributes": {
                "addresses": [],
                "tls": {
                  "policy": "preserve"
                },
                "modules": {
                  "load_balancer_enabled": true,
                  "origin_shield_enabled": true
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "tls": {
                      "type": "object",
                      "properties": {
                        "policy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "policy"
                      ]
                    },
                    "modules": {
                      "type": "object",
                      "properties": {
                        "load_balancer_enabled": {
                          "type": "boolean"
                        },
                        "origin_shield_enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "load_balancer_enabled",
                        "origin_shield_enabled"
                      ]
                    }
                  },
                  "required": [
                    "addresses",
                    "tls",
                    "modules"
                  ]
                }
              },
              "required": [
                "type",
                "name",
                "active",
                "attributes"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "live_ingest",
                  "name": "patchTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "live_ingest",
                  "name": "patchTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Connector without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Connector",
          "method": "DELETE",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "DELETE /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Connector in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Connectors",
          "method": "GET",
          "url": "/edge_connector/connectors",
          "category": "edge_connector",
          "path": "edge_connector/connectors",
          "key": "GET /edge_connector/connectors",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: )",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Connectors owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Connector",
          "method": "POST",
          "url": "/edge_connector/connectors",
          "category": "edge_connector",
          "path": "edge_connector/connectors",
          "key": "POST /edge_connector/connectors",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomOriginName}}",
              "active": true,
              "type": "http",
              "attributes": {
                "addresses": [
                  {
                    "active": true,
                    "address": "203.0.113.1",
                    "http_port": 80,
                    "https_port": 443,
                    "modules": {
                      "load_balancer": {
                        "server_role": "primary",
                        "weight": 1
                      }
                    }
                  }
                ],
                "connection_options": {
                  "dns_resolution": "preserve",
                  "transport_policy": "preserve",
                  "http_version_policy": "http1_1",
                  "host": "fake.example.com",
                  "path_prefix": "",
                  "following_redirect": false,
                  "real_ip_header": "X-Real-IP",
                  "real_port_header": "X-Real-PORT"
                },
                "modules": {
                  "load_balancer": {
                    "enabled": true,
                    "config": {
                      "method": "round_robin",
                      "max_retries": 0,
                      "connection_timeout": 60,
                      "read_write_timeout": 120
                    }
                  },
                  "origin_shield": {
                    "enabled": true,
                    "config": {
                      "origin_ip_acl": {
                        "enabled": false
                      },
                      "hmac": {
                        "enabled": false,
                        "config": {
                          "type": "aws4_hmac_sha256",
                          "attributes": {
                            "region": "string",
                            "service": "s3",
                            "access_key": "string",
                            "secret_key": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "address": {
                            "type": "string"
                          },
                          "http_port": {
                            "type": "number"
                          },
                          "https_port": {
                            "type": "number"
                          },
                          "modules": {
                            "type": "object",
                            "properties": {
                              "load_balancer": {
                                "type": "object",
                                "properties": {
                                  "server_role": {
                                    "type": "string"
                                  },
                                  "weight": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "server_role",
                                  "weight"
                                ]
                              }
                            },
                            "required": [
                              "load_balancer"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "address",
                          "http_port",
                          "https_port",
                          "modules"
                        ]
                      }
                    },
                    "connection_options": {
                      "type": "object",
                      "properties": {
                        "dns_resolution": {
                          "type": "string"
                        },
                        "transport_policy": {
                          "type": "string"
                        },
                        "http_version_policy": {
                          "type": "string"
                        },
                        "host": {
                          "type": "string"
                        },
                        "path_prefix": {
                          "type": "string"
                        },
                        "following_redirect": {
                          "type": "boolean"
                        },
                        "real_ip_header": {
                          "type": "string"
                        },
                        "real_port_header": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "dns_resolution",
                        "transport_policy",
                        "http_version_policy",
                        "host",
                        "path_prefix",
                        "following_redirect",
                        "real_ip_header",
                        "real_port_header"
                      ]
                    },
                    "modules": {
                      "type": "object",
                      "properties": {
                        "load_balancer": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "method": {
                                  "type": "string"
                                },
                                "max_retries": {
                                  "type": "number"
                                },
                                "connection_timeout": {
                                  "type": "number"
                                },
                                "read_write_timeout": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "method",
                                "max_retries",
                                "connection_timeout",
                                "read_write_timeout"
                              ]
                            }
                          },
                          "required": [
                            "enabled",
                            "config"
                          ]
                        },
                        "origin_shield": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "origin_ip_acl": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "enabled"
                                  ]
                                },
                                "hmac": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    },
                                    "config": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string"
                                        },
                                        "attributes": {
                                          "type": "object",
                                          "properties": {
                                            "region": {
                                              "type": "string"
                                            },
                                            "service": {
                                              "type": "string"
                                            },
                                            "access_key": {
                                              "type": "string"
                                            },
                                            "secret_key": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "region",
                                            "service",
                                            "access_key",
                                            "secret_key"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "attributes"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "enabled",
                                    "config"
                                  ]
                                }
                              },
                              "required": [
                                "origin_ip_acl",
                                "hmac"
                              ]
                            }
                          },
                          "required": [
                            "enabled",
                            "config"
                          ]
                        }
                      },
                      "required": [
                        "load_balancer",
                        "origin_shield"
                      ]
                    }
                  },
                  "required": [
                    "addresses",
                    "connection_options",
                    "modules"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "type",
                "attributes"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomOriginName}}",
                  "active": true,
                  "type": "http",
                  "attributes": {
                    "addresses": [
                      {
                        "active": true,
                        "address": "203.0.113.1",
                        "http_port": 80,
                        "https_port": 443,
                        "modules": {
                          "load_balancer": {
                            "server_role": "primary",
                            "weight": 1
                          }
                        }
                      }
                    ],
                    "connection_options": {
                      "dns_resolution": "preserve",
                      "transport_policy": "preserve",
                      "http_version_policy": "http1_1",
                      "host": "fake.example.com",
                      "path_prefix": "",
                      "following_redirect": false,
                      "real_ip_header": "X-Real-IP",
                      "real_port_header": "X-Real-PORT"
                    },
                    "modules": {
                      "load_balancer": {
                        "enabled": true,
                        "config": {
                          "method": "round_robin",
                          "max_retries": 0,
                          "connection_timeout": 60,
                          "read_write_timeout": 120
                        }
                      },
                      "origin_shield": {
                        "enabled": true,
                        "config": {
                          "origin_ip_acl": {
                            "enabled": false
                          },
                          "hmac": {
                            "enabled": false,
                            "config": {
                              "type": "aws4_hmac_sha256",
                              "attributes": {
                                "region": "string",
                                "service": "s3",
                                "access_key": "string",
                                "secret_key": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomOriginName}}",
                  "active": true,
                  "type": "http",
                  "attributes": {
                    "addresses": [
                      {
                        "active": true,
                        "address": "203.0.113.1",
                        "http_port": 80,
                        "https_port": 443,
                        "modules": {
                          "load_balancer": {
                            "server_role": "primary",
                            "weight": 1
                          }
                        }
                      }
                    ],
                    "connection_options": {
                      "dns_resolution": "preserve",
                      "transport_policy": "preserve",
                      "http_version_policy": "http1_1",
                      "host": "fake.example.com",
                      "path_prefix": "",
                      "following_redirect": false,
                      "real_ip_header": "X-Real-IP",
                      "real_port_header": "X-Real-PORT"
                    },
                    "modules": {
                      "load_balancer": {
                        "enabled": true,
                        "config": {
                          "method": "round_robin",
                          "max_retries": 0,
                          "connection_timeout": 60,
                          "read_write_timeout": 120
                        }
                      },
                      "origin_shield": {
                        "enabled": true,
                        "config": {
                          "origin_ip_acl": {
                            "enabled": false
                          },
                          "hmac": {
                            "enabled": false,
                            "config": {
                              "type": "aws4_hmac_sha256",
                              "attributes": {
                                "region": "string",
                                "service": "s3",
                                "access_key": "string",
                                "secret_key": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Connector in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 2,
        "PUT": 1,
        "PATCH": 1,
        "DELETE": 1,
        "POST": 1
      },
      "priorityCounts": {
        "high": 0,
        "medium": 3,
        "low": 3
      },
      "complexityCounts": {
        "high": 0,
        "medium": 4,
        "low": 2
      },
      "totalEndpoints": 6,
      "coverage": 0,
      "priority": "low"
    },
    "edge_firewall": {
      "name": "edge_firewall",
      "endpoints": [
        {
          "name": "Clone an Edge Firewall",
          "method": "POST",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/clone",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}/clone",
          "key": "POST /workspace/firewalls/{{edgeFirewallId}}/clone",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "63' IR"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "63' IR"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "63' IR"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Firewall by performing a deep copy of an existing Edge Firewall, including its Function Instances and Rules Engine.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from an Edge Firewall",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific Edge Firewall in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Firewall",
          "method": "PUT",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "PUT /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "li1D(QLJ;",
              "modules": {
                "functions": {
                  "enabled": true
                }
              },
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "functions"
                  ]
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "li1D(QLJ;",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "li1D(QLJ;",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Firewall. This replaces the entire Edge Firewall with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Firewall",
          "method": "PATCH",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "PATCH /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "JCd",
              "modules": {
                "functions": {
                  "enabled": true
                }
              },
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "functions"
                  ]
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "JCd",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "JCd",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Firewall without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Firewall",
          "method": "DELETE",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "DELETE /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Firewall in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Firewall Function",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Firewall Function Instance in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Firewall Function",
          "method": "PUT",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "PUT /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "function": "{{edgeFunctionId}}",
              "args": {}
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "function": {
                  "type": "string"
                },
                "args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                }
              },
              "required": [
                "name",
                "active",
                "function",
                "args"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Firewall Function Instance. This replaces the entire Function Instance with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Firewall Function",
          "method": "PATCH",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "PATCH /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "function": "{{edgeFunctionId}}",
              "args": {}
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "function": {
                  "type": "string"
                },
                "args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                }
              },
              "required": [
                "name",
                "active",
                "function",
                "args"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Firewall Function Instance without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Firewall Function",
          "method": "DELETE",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "DELETE /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Edge Firewall Function Instance in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Firewall Function",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}/functions",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, last_editor, last_modified, name, json_args, edge_function, active)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Function Instances for a specific Edge Firewall owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Firewall Function",
          "method": "POST",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions",
          "key": "POST /workspace/firewalls/{{edgeFirewallId}}/functions",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n  \"edge_function\": \"{{\\1}}\",\n  \"name\": \"{{randomName}}\",\n  \"json_args\": {},\n  \"active\": true\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Function Instance for a specific Edge Firewall in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Firewall Rule",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules/{id}",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Rule in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Firewall Rule",
          "method": "PUT",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules/{id}",
          "key": "PUT /workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleEdgeFirewallName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleEdgeFirewallName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleEdgeFirewallName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Rule. This replaces the entire Rule with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Firewall Rule",
          "method": "PATCH",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules/{id}",
          "key": "PATCH /workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{ruleEdgeFirewallName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{ruleEdgeFirewallName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{ruleEdgeFirewallName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Firewall Rule without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Firewall Rule",
          "method": "DELETE",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules/{id}",
          "key": "DELETE /workspace/firewalls/{{edgeFirewallId}}/rules/{{ruleId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "ruleId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Rule in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Ordering Edge Firewall Rules",
          "method": "PUT",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/rules/order",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules/order",
          "key": "PUT /workspace/firewalls/{{edgeFirewallId}}/rules/order",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n    \"order\": [\"{{\\1}}\"]\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Reoder all Rules for a specific Edge Firewall owned by your account.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Firewall Rules",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/request_rules",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}/request_rules",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, last_editor, last_modified, active, description, order, behaviors, criteria)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Rules for a specific Edge Firewall owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Firewall Rule",
          "method": "POST",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/request_rules",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/rules",
          "key": "POST /workspace/firewalls/{{edgeFirewallId}}/request_rules",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n  \"name\": \"{{ruleEdgeFirewallName}}\",\n  \"active\": true,\n  \"criteria\": [\n    [\n      {\n        \"conditional\": \"if\",\n        \"variable\": \"${request_uri}\",\n        \"operator\": \"starts_with\",\n        \"argument\": \"/\"\n      }\n    ]\n  ],\n  \"behaviors\": [\n    {\n      \"name\": \"set_waf\",\n      \"type\": \"set_waf\",\n      \"attributes\": {\n        \"waf_id\": ,\n        \"mode\": \"logging\"\n      }\n    }\n  ],\n  \"description\": \"test\"\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Rule for a specific Edge Firewall in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Firewalls",
          "method": "GET",
          "url": "/workspace/firewalls",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls",
          "key": "GET /workspace/firewalls",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "last_modified",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, debug_rules, active, last_editor, last_modified, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "4",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Firewalls owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Firewall",
          "method": "POST",
          "url": "/workspace/firewalls",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls",
          "key": "POST /workspace/firewalls",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "modules": {
                "functions": {
                  "enabled": true
                }
              },
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "functions"
                  ]
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Firewall for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Clone a Web Application Firewall (WAF)",
          "method": "POST",
          "url": "/edge_firewall/wafs/{{wafId}}/clone",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{id}/clone",
          "key": "POST /edge_firewall/wafs/{{wafId}}/clone",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new WAF by performing a deep copy of an existing WAF, including its Exceptions.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a Web Application Firewall (WAF)",
          "method": "GET",
          "url": "/workspace/wafs/{{wafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{id}",
          "key": "GET /workspace/wafs/{{wafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific WAF in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Web Application Firewall (WAF)",
          "method": "PUT",
          "url": "/workspace/wafs/{{wafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{id}",
          "key": "PUT /workspace/wafs/{{wafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{wafName}}",
              "active": true,
              "threats_configuration": {
                "cross_site_scripting": true,
                "cross_site_scripting_sensitivity": "medium",
                "directory_traversal": true,
                "directory_traversal_sensitivity": "medium",
                "evading_tricks": true,
                "evading_tricks_sensitivity": "medium",
                "file_upload": true,
                "file_upload_sensitivity": "medium",
                "identified_attack": true,
                "identified_attack_sensitivity": "medium",
                "remote_file_inclusion": true,
                "remote_file_inclusion_sensitivity": "medium",
                "sql_injection": true,
                "sql_injection_sensitivity": "medium",
                "unwanted_access": true,
                "unwanted_access_sensitivity": "medium"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "threats_configuration": {
                  "type": "object",
                  "properties": {
                    "cross_site_scripting": {
                      "type": "boolean"
                    },
                    "cross_site_scripting_sensitivity": {
                      "type": "string"
                    },
                    "directory_traversal": {
                      "type": "boolean"
                    },
                    "directory_traversal_sensitivity": {
                      "type": "string"
                    },
                    "evading_tricks": {
                      "type": "boolean"
                    },
                    "evading_tricks_sensitivity": {
                      "type": "string"
                    },
                    "file_upload": {
                      "type": "boolean"
                    },
                    "file_upload_sensitivity": {
                      "type": "string"
                    },
                    "identified_attack": {
                      "type": "boolean"
                    },
                    "identified_attack_sensitivity": {
                      "type": "string"
                    },
                    "remote_file_inclusion": {
                      "type": "boolean"
                    },
                    "remote_file_inclusion_sensitivity": {
                      "type": "string"
                    },
                    "sql_injection": {
                      "type": "boolean"
                    },
                    "sql_injection_sensitivity": {
                      "type": "string"
                    },
                    "unwanted_access": {
                      "type": "boolean"
                    },
                    "unwanted_access_sensitivity": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "cross_site_scripting",
                    "cross_site_scripting_sensitivity",
                    "directory_traversal",
                    "directory_traversal_sensitivity",
                    "evading_tricks",
                    "evading_tricks_sensitivity",
                    "file_upload",
                    "file_upload_sensitivity",
                    "identified_attack",
                    "identified_attack_sensitivity",
                    "remote_file_inclusion",
                    "remote_file_inclusion_sensitivity",
                    "sql_injection",
                    "sql_injection_sensitivity",
                    "unwanted_access",
                    "unwanted_access_sensitivity"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "threats_configuration"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{wafName}}",
                  "active": true,
                  "threats_configuration": {
                    "cross_site_scripting": true,
                    "cross_site_scripting_sensitivity": "medium",
                    "directory_traversal": true,
                    "directory_traversal_sensitivity": "medium",
                    "evading_tricks": true,
                    "evading_tricks_sensitivity": "medium",
                    "file_upload": true,
                    "file_upload_sensitivity": "medium",
                    "identified_attack": true,
                    "identified_attack_sensitivity": "medium",
                    "remote_file_inclusion": true,
                    "remote_file_inclusion_sensitivity": "medium",
                    "sql_injection": true,
                    "sql_injection_sensitivity": "medium",
                    "unwanted_access": true,
                    "unwanted_access_sensitivity": "medium"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{wafName}}",
                  "active": true,
                  "threats_configuration": {
                    "cross_site_scripting": true,
                    "cross_site_scripting_sensitivity": "medium",
                    "directory_traversal": true,
                    "directory_traversal_sensitivity": "medium",
                    "evading_tricks": true,
                    "evading_tricks_sensitivity": "medium",
                    "file_upload": true,
                    "file_upload_sensitivity": "medium",
                    "identified_attack": true,
                    "identified_attack_sensitivity": "medium",
                    "remote_file_inclusion": true,
                    "remote_file_inclusion_sensitivity": "medium",
                    "sql_injection": true,
                    "sql_injection_sensitivity": "medium",
                    "unwanted_access": true,
                    "unwanted_access_sensitivity": "medium"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing WAF. This replaces the entire WAF with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Web Application Firewall (WAF)",
          "method": "PATCH",
          "url": "/workspace/wafs/{{wafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{id}",
          "key": "PATCH /workspace/wafs/{{wafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": true,
              "name": "{{wafName}}",
              "threats_configuration": {
                "cross_site_scripting": true,
                "cross_site_scripting_sensitivity": "medium",
                "directory_traversal": true,
                "directory_traversal_sensitivity": "medium",
                "evading_tricks": true,
                "evading_tricks_sensitivity": "medium",
                "file_upload": true,
                "file_upload_sensitivity": "medium",
                "identified_attack": true,
                "identified_attack_sensitivity": "medium",
                "remote_file_inclusion": true,
                "remote_file_inclusion_sensitivity": "medium",
                "sql_injection": true,
                "sql_injection_sensitivity": "medium",
                "unwanted_access": true,
                "unwanted_access_sensitivity": "medium"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                },
                "threats_configuration": {
                  "type": "object",
                  "properties": {
                    "cross_site_scripting": {
                      "type": "boolean"
                    },
                    "cross_site_scripting_sensitivity": {
                      "type": "string"
                    },
                    "directory_traversal": {
                      "type": "boolean"
                    },
                    "directory_traversal_sensitivity": {
                      "type": "string"
                    },
                    "evading_tricks": {
                      "type": "boolean"
                    },
                    "evading_tricks_sensitivity": {
                      "type": "string"
                    },
                    "file_upload": {
                      "type": "boolean"
                    },
                    "file_upload_sensitivity": {
                      "type": "string"
                    },
                    "identified_attack": {
                      "type": "boolean"
                    },
                    "identified_attack_sensitivity": {
                      "type": "string"
                    },
                    "remote_file_inclusion": {
                      "type": "boolean"
                    },
                    "remote_file_inclusion_sensitivity": {
                      "type": "string"
                    },
                    "sql_injection": {
                      "type": "boolean"
                    },
                    "sql_injection_sensitivity": {
                      "type": "string"
                    },
                    "unwanted_access": {
                      "type": "boolean"
                    },
                    "unwanted_access_sensitivity": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "cross_site_scripting",
                    "cross_site_scripting_sensitivity",
                    "directory_traversal",
                    "directory_traversal_sensitivity",
                    "evading_tricks",
                    "evading_tricks_sensitivity",
                    "file_upload",
                    "file_upload_sensitivity",
                    "identified_attack",
                    "identified_attack_sensitivity",
                    "remote_file_inclusion",
                    "remote_file_inclusion_sensitivity",
                    "sql_injection",
                    "sql_injection_sensitivity",
                    "unwanted_access",
                    "unwanted_access_sensitivity"
                  ]
                }
              },
              "required": [
                "active",
                "name",
                "threats_configuration"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": true,
                  "name": "{{wafName}}",
                  "threats_configuration": {
                    "cross_site_scripting": true,
                    "cross_site_scripting_sensitivity": "medium",
                    "directory_traversal": true,
                    "directory_traversal_sensitivity": "medium",
                    "evading_tricks": true,
                    "evading_tricks_sensitivity": "medium",
                    "file_upload": true,
                    "file_upload_sensitivity": "medium",
                    "identified_attack": true,
                    "identified_attack_sensitivity": "medium",
                    "remote_file_inclusion": true,
                    "remote_file_inclusion_sensitivity": "medium",
                    "sql_injection": true,
                    "sql_injection_sensitivity": "medium",
                    "unwanted_access": true,
                    "unwanted_access_sensitivity": "medium"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": true,
                  "name": "{{wafName}}",
                  "threats_configuration": {
                    "cross_site_scripting": true,
                    "cross_site_scripting_sensitivity": "medium",
                    "directory_traversal": true,
                    "directory_traversal_sensitivity": "medium",
                    "evading_tricks": true,
                    "evading_tricks_sensitivity": "medium",
                    "file_upload": true,
                    "file_upload_sensitivity": "medium",
                    "identified_attack": true,
                    "identified_attack_sensitivity": "medium",
                    "remote_file_inclusion": true,
                    "remote_file_inclusion_sensitivity": "medium",
                    "sql_injection": true,
                    "sql_injection_sensitivity": "medium",
                    "unwanted_access": true,
                    "unwanted_access_sensitivity": "medium"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing WAF without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a Web Application Firewall (WAF)",
          "method": "DELETE",
          "url": "/edge_firewall/wafs/{{wafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{id}",
          "key": "DELETE /edge_firewall/wafs/{{wafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific WAF in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Exception from a Web Application Firewall (WAF)",
          "method": "GET",
          "url": "/workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{wafId}/exceptions/{id}",
          "key": "GET /workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            },
            {
              "name": "exceptionWafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Exception from a WAF in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Exception for a Web Application Firewall (WAF)",
          "method": "PUT",
          "url": "/workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{wafId}/exceptions/{id}",
          "key": "PUT /workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            },
            {
              "name": "exceptionWafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "match_zones": [
                {
                  "zone": "file_name",
                  "zone_input": null,
                  "matches_on": "value"
                },
                {
                  "zone": "request_header",
                  "zone_input": null,
                  "matches_on": "name"
                }
              ],
              "name": "7:&xh^GX",
              "rule_id": 0,
              "path": "",
              "use_regex": false,
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "match_zones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "zone": {
                        "type": "string"
                      },
                      "zone_input": {
                        "type": "object"
                      },
                      "matches_on": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "zone",
                      "matches_on"
                    ]
                  }
                },
                "name": {
                  "type": "string"
                },
                "rule_id": {
                  "type": "number"
                },
                "path": {
                  "type": "string"
                },
                "use_regex": {
                  "type": "boolean"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "match_zones",
                "name",
                "rule_id",
                "path",
                "use_regex",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "match_zones": [
                    {
                      "zone": "file_name",
                      "zone_input": null,
                      "matches_on": "value"
                    },
                    {
                      "zone": "request_header",
                      "zone_input": null,
                      "matches_on": "name"
                    }
                  ],
                  "name": "7:&xh^GX",
                  "rule_id": 0,
                  "path": "",
                  "use_regex": false,
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "match_zones": [
                    {
                      "zone": "file_name",
                      "zone_input": null,
                      "matches_on": "value"
                    },
                    {
                      "zone": "request_header",
                      "zone_input": null,
                      "matches_on": "name"
                    }
                  ],
                  "name": "7:&xh^GX",
                  "rule_id": 0,
                  "path": "",
                  "use_regex": false,
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Exception for a WAF. This replaces the entire rule with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Exception for a Web Application Firewall (WAF)",
          "method": "PATCH",
          "url": "/workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{wafId}/exceptions/{id}",
          "key": "PATCH /workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            },
            {
              "name": "exceptionWafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "rule_id": 0,
              "name": ")4",
              "path": "K5OW",
              "match_zones": [
                {
                  "zone": "request_body",
                  "zone_input": null,
                  "matches_on": "name"
                },
                {
                  "zone": "conditional_request_header",
                  "zone_input": "hQ7r",
                  "matches_on": "value"
                }
              ],
              "use_regex": false,
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "rule_id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "match_zones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "zone": {
                        "type": "string"
                      },
                      "zone_input": {
                        "type": "object"
                      },
                      "matches_on": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "zone",
                      "matches_on"
                    ]
                  }
                },
                "use_regex": {
                  "type": "boolean"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "rule_id",
                "name",
                "path",
                "match_zones",
                "use_regex",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "rule_id": 0,
                  "name": ")4",
                  "path": "K5OW",
                  "match_zones": [
                    {
                      "zone": "request_body",
                      "zone_input": null,
                      "matches_on": "name"
                    },
                    {
                      "zone": "conditional_request_header",
                      "zone_input": "hQ7r",
                      "matches_on": "value"
                    }
                  ],
                  "use_regex": false,
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "rule_id": 0,
                  "name": ")4",
                  "path": "K5OW",
                  "match_zones": [
                    {
                      "zone": "request_body",
                      "zone_input": null,
                      "matches_on": "name"
                    },
                    {
                      "zone": "conditional_request_header",
                      "zone_input": "hQ7r",
                      "matches_on": "value"
                    }
                  ],
                  "use_regex": false,
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing exception for a WAF without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Exception from a Web Application Firewall (WAF)",
          "method": "DELETE",
          "url": "/workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{wafId}/exceptions/{id}",
          "key": "DELETE /workspace/wafs/{{wafId}}/exceptions/{{exceptionWafId}}",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            },
            {
              "name": "exceptionWafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Remove a specific Exception from a WAF in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Exceptions for a Web Application Firewall (WAF)",
          "method": "GET",
          "url": "/edge_firewall/wafs/{{wafId}}/exceptions",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{wafId}/exceptions",
          "key": "GET /edge_firewall/wafs/{{wafId}}/exceptions",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: rule_id, name, path, match_zones, use_regex, active, last_editor, last_modified)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Exceptions associated with a specific WAF owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Exception for a Web Application Firewall (WAF)",
          "method": "POST",
          "url": "/workspace/wafs/{{wafId}}/exceptions",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs/{wafId}/exceptions",
          "key": "POST /workspace/wafs/{{wafId}}/exceptions",
          "pathParams": [
            {
              "name": "wafId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{exceptionName || 'exception_' + uniqueId + '_' + timestamp}}",
              "active": "{{exceptionActive || true}}",
              "conditions": [
                {
                  "match": "{{matchType || 'any_url'}}",
                  "operator": "{{operatorType || 'contains'}}"
                }
              ],
              "match_zones": [
                {
                  "zone": "file_name",
                  "zone_input": null,
                  "matches_on": "value"
                },
                {
                  "zone": "request_header",
                  "zone_input": "user-agent",
                  "matches_on": "name"
                }
              ],
              "rule_id": "{{ruleId || 0}}",
              "path": "{{pathPattern || '/api/*'}}",
              "use_regex": "{{useRegex || false}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "string"
                      },
                      "operator": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "operator"
                    ]
                  }
                },
                "match_zones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "zone": {
                        "type": "string"
                      },
                      "zone_input": {
                        "type": "object"
                      },
                      "matches_on": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "zone",
                      "matches_on"
                    ]
                  }
                },
                "rule_id": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "use_regex": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "active",
                "conditions",
                "match_zones",
                "rule_id",
                "path",
                "use_regex"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{exceptionName || 'exception_' + uniqueId + '_' + timestamp}}",
                  "active": "{{exceptionActive || true}}",
                  "conditions": [
                    {
                      "match": "{{matchType || 'any_url'}}",
                      "operator": "{{operatorType || 'contains'}}"
                    }
                  ],
                  "match_zones": [
                    {
                      "zone": "file_name",
                      "zone_input": null,
                      "matches_on": "value"
                    },
                    {
                      "zone": "request_header",
                      "zone_input": "user-agent",
                      "matches_on": "name"
                    }
                  ],
                  "rule_id": "{{ruleId || 0}}",
                  "path": "{{pathPattern || '/api/*'}}",
                  "use_regex": "{{useRegex || false}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{exceptionName || 'exception_' + uniqueId + '_' + timestamp}}",
                  "active": "{{exceptionActive || true}}",
                  "conditions": [
                    {
                      "match": "{{matchType || 'any_url'}}",
                      "operator": "{{operatorType || 'contains'}}"
                    }
                  ],
                  "match_zones": [
                    {
                      "zone": "file_name",
                      "zone_input": null,
                      "matches_on": "value"
                    },
                    {
                      "zone": "request_header",
                      "zone_input": "user-agent",
                      "matches_on": "name"
                    }
                  ],
                  "rule_id": "{{ruleId || 0}}",
                  "path": "{{pathPattern || '/api/*'}}",
                  "use_regex": "{{useRegex || false}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Exception for a specific WAF in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Web Application Firewalls (WAFs)",
          "method": "GET",
          "url": "/workspace/wafs",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs",
          "key": "GET /workspace/wafs",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, active, last_editor, last_modified, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all WAFs owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Web Application Firewall (WAF)",
          "method": "POST",
          "url": "/workspace/wafs",
          "category": "edge_firewall",
          "path": "edge_firewall/wafs",
          "key": "POST /workspace/wafs",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{wafName}}",
              "active": true,
              "threats_configuration": {
                "cross_site_scripting": true,
                "cross_site_scripting_sensitivity": "medium",
                "directory_traversal": true,
                "directory_traversal_sensitivity": "medium",
                "evading_tricks": true,
                "evading_tricks_sensitivity": "medium",
                "file_upload": true,
                "file_upload_sensitivity": "medium",
                "identified_attack": true,
                "identified_attack_sensitivity": "medium",
                "remote_file_inclusion": true,
                "remote_file_inclusion_sensitivity": "medium",
                "sql_injection": true,
                "sql_injection_sensitivity": "medium",
                "unwanted_access": true,
                "unwanted_access_sensitivity": "medium"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "threats_configuration": {
                  "type": "object",
                  "properties": {
                    "cross_site_scripting": {
                      "type": "boolean"
                    },
                    "cross_site_scripting_sensitivity": {
                      "type": "string"
                    },
                    "directory_traversal": {
                      "type": "boolean"
                    },
                    "directory_traversal_sensitivity": {
                      "type": "string"
                    },
                    "evading_tricks": {
                      "type": "boolean"
                    },
                    "evading_tricks_sensitivity": {
                      "type": "string"
                    },
                    "file_upload": {
                      "type": "boolean"
                    },
                    "file_upload_sensitivity": {
                      "type": "string"
                    },
                    "identified_attack": {
                      "type": "boolean"
                    },
                    "identified_attack_sensitivity": {
                      "type": "string"
                    },
                    "remote_file_inclusion": {
                      "type": "boolean"
                    },
                    "remote_file_inclusion_sensitivity": {
                      "type": "string"
                    },
                    "sql_injection": {
                      "type": "boolean"
                    },
                    "sql_injection_sensitivity": {
                      "type": "string"
                    },
                    "unwanted_access": {
                      "type": "boolean"
                    },
                    "unwanted_access_sensitivity": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "cross_site_scripting",
                    "cross_site_scripting_sensitivity",
                    "directory_traversal",
                    "directory_traversal_sensitivity",
                    "evading_tricks",
                    "evading_tricks_sensitivity",
                    "file_upload",
                    "file_upload_sensitivity",
                    "identified_attack",
                    "identified_attack_sensitivity",
                    "remote_file_inclusion",
                    "remote_file_inclusion_sensitivity",
                    "sql_injection",
                    "sql_injection_sensitivity",
                    "unwanted_access",
                    "unwanted_access_sensitivity"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "threats_configuration"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{wafName}}",
                  "active": true,
                  "threats_configuration": {
                    "cross_site_scripting": true,
                    "cross_site_scripting_sensitivity": "medium",
                    "directory_traversal": true,
                    "directory_traversal_sensitivity": "medium",
                    "evading_tricks": true,
                    "evading_tricks_sensitivity": "medium",
                    "file_upload": true,
                    "file_upload_sensitivity": "medium",
                    "identified_attack": true,
                    "identified_attack_sensitivity": "medium",
                    "remote_file_inclusion": true,
                    "remote_file_inclusion_sensitivity": "medium",
                    "sql_injection": true,
                    "sql_injection_sensitivity": "medium",
                    "unwanted_access": true,
                    "unwanted_access_sensitivity": "medium"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{wafName}}",
                  "active": true,
                  "threats_configuration": {
                    "cross_site_scripting": true,
                    "cross_site_scripting_sensitivity": "medium",
                    "directory_traversal": true,
                    "directory_traversal_sensitivity": "medium",
                    "evading_tricks": true,
                    "evading_tricks_sensitivity": "medium",
                    "file_upload": true,
                    "file_upload_sensitivity": "medium",
                    "identified_attack": true,
                    "identified_attack_sensitivity": "medium",
                    "remote_file_inclusion": true,
                    "remote_file_inclusion_sensitivity": "medium",
                    "sql_injection": true,
                    "sql_injection_sensitivity": "medium",
                    "unwanted_access": true,
                    "unwanted_access_sensitivity": "medium"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new WAF for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "POST": 7,
        "GET": 10,
        "PUT": 6,
        "PATCH": 5,
        "DELETE": 5
      },
      "priorityCounts": {
        "high": 0,
        "medium": 15,
        "low": 18
      },
      "complexityCounts": {
        "high": 11,
        "medium": 13,
        "low": 9
      },
      "totalEndpoints": 33,
      "coverage": 0,
      "priority": "low"
    },
    "edge_functions": {
      "name": "edge_functions",
      "endpoints": [
        {
          "name": "Retrieve details of an Edge Function",
          "method": "GET",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "GET /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Function in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Function",
          "method": "PUT",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "PUT /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
              "name": "{{putName}}",
              "language": "javascript",
              "json_args": {},
              "initiator_type": "edge_firewall",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "json_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "initiator_type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "code",
                "name",
                "language",
                "json_args",
                "initiator_type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{putName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{putName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Function. This replaces the entire Edge Function with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Function",
          "method": "PATCH",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "PATCH /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
              "name": "{{patchName}}",
              "language": "javascript",
              "json_args": {},
              "initiator_type": "edge_firewall",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "json_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "initiator_type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "code",
                "name",
                "language",
                "json_args",
                "initiator_type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{patchName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{patchName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Function without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Function",
          "method": "DELETE",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "DELETE /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Edge Function in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Functions",
          "method": "GET",
          "url": "/edge_functions/functions",
          "category": "edge_functions",
          "path": "edge_functions/functions",
          "key": "GET /edge_functions/functions",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "vendor",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "last_modified",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, language, json_args, initiator_type, active, last_editor, last_modified, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "40",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "vendor",
              "description": "A search term.",
              "required": false,
              "type": "string"
            },
            {
              "key": "initiator_type",
              "value": "edge_application",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "key": "vendor",
              "value": "support@azion.com",
              "description": "",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Functions owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Function",
          "method": "POST",
          "url": "/workspace/functions",
          "category": "edge_functions",
          "path": "edge_functions/functions",
          "key": "POST /workspace/functions",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
              "name": "{{first_name}}",
              "language": "javascript",
              "default_args": {},
              "initiator_type": "edge_firewall",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "default_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "initiator_type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "code",
                "name",
                "language",
                "default_args",
                "initiator_type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{first_name}}",
                  "language": "javascript",
                  "default_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{first_name}}",
                  "language": "javascript",
                  "default_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Function in your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 2,
        "PUT": 1,
        "PATCH": 1,
        "DELETE": 1,
        "POST": 1
      },
      "priorityCounts": {
        "high": 0,
        "medium": 3,
        "low": 3
      },
      "complexityCounts": {
        "high": 4,
        "medium": 0,
        "low": 2
      },
      "totalEndpoints": 6,
      "coverage": 0,
      "priority": "low"
    },
    "edge_sql": {
      "name": "edge_sql",
      "endpoints": [
        {
          "name": "Execute a query into a database",
          "method": "POST",
          "url": "/edge_sql/databases/{{databaseId}}/query",
          "category": "edge_sql",
          "path": "edge_sql/databases/{id}/query",
          "key": "POST /edge_sql/databases/{{databaseId}}/query",
          "pathParams": [
            {
              "name": "databaseId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "statements": [
                "INSERT INTO messages (session_id, run_id, input_messages, output_messages, run_metadata, azion_metadata, created_at) VALUES ('0e89f3a9-3ffc-4e07-8663-ac272f9b7c09', '54fcc9c6-42ee-47ad-8905-2c949676d0e2', '{\"role\":\"user\",\"content\":\"hello (current date and time: 2025-05-06T17:09:29.000Z)\"}', 'Hello! How can I assist you today with Azions Edge Computing Platform?', '{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain_core\",\"messages\",\"AIMessageChunk\"],\"kwargs\":{\"content\":\"Hello! How can I assist you today with Azions Edge Computing Platform?\",\"additional_kwargs\":{}},\"response_metadata\":{\"usage\":{\"prompt_tokens\":2123,\"completion_tokens\":18,\"total_tokens\":2141,\"prompt_tokens_details\":{\"cached_tokens\":2048,\"audio_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0,\"audio_tokens\":0,\"accepted_prediction_tokens\":0,\"rejected_prediction_tokens\":0}}},\"tool_call_chunks\":[],\"id\":\"chatcmpl-BUG5JQ8MxvrWkRk2heVUBA9DYOsRn\",\"usage_metadata\":{\"input_tokens\":2123,\"output_tokens\":18,\"total_tokens\":2141,\"input_token_details\":{\"audio\":0,\"cache_read\":2048},\"output_token_details\":{\"audio\":0,\"reasoning\":0}},\"tool_calls\":[],\"invalid_tool_calls\":[]}}', '{\"user_name\":\"\",\"first_name\":\"\",\"last_name\":\"\",\"client_id\":\"\",\"email\":\"\",\"support_plan\":\"\",\"url\":\"\",\"app\":\"azion-copilot-stage\",\"project\":\"azion-copilot-stage\",\"ticket_id\":\"\"}', '2025-05-06T17:09:29.000Z')"
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "statements": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "statements"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "statements": [
                    "INSERT INTO messages (session_id, run_id, input_messages, output_messages, run_metadata, azion_metadata, created_at) VALUES ('0e89f3a9-3ffc-4e07-8663-ac272f9b7c09', '54fcc9c6-42ee-47ad-8905-2c949676d0e2', '{\"role\":\"user\",\"content\":\"hello (current date and time: 2025-05-06T17:09:29.000Z)\"}', 'Hello! How can I assist you today with Azions Edge Computing Platform?', '{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain_core\",\"messages\",\"AIMessageChunk\"],\"kwargs\":{\"content\":\"Hello! How can I assist you today with Azions Edge Computing Platform?\",\"additional_kwargs\":{}},\"response_metadata\":{\"usage\":{\"prompt_tokens\":2123,\"completion_tokens\":18,\"total_tokens\":2141,\"prompt_tokens_details\":{\"cached_tokens\":2048,\"audio_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0,\"audio_tokens\":0,\"accepted_prediction_tokens\":0,\"rejected_prediction_tokens\":0}}},\"tool_call_chunks\":[],\"id\":\"chatcmpl-BUG5JQ8MxvrWkRk2heVUBA9DYOsRn\",\"usage_metadata\":{\"input_tokens\":2123,\"output_tokens\":18,\"total_tokens\":2141,\"input_token_details\":{\"audio\":0,\"cache_read\":2048},\"output_token_details\":{\"audio\":0,\"reasoning\":0}},\"tool_calls\":[],\"invalid_tool_calls\":[]}}', '{\"user_name\":\"\",\"first_name\":\"\",\"last_name\":\"\",\"client_id\":\"\",\"email\":\"\",\"support_plan\":\"\",\"url\":\"\",\"app\":\"azion-copilot-stage\",\"project\":\"azion-copilot-stage\",\"ticket_id\":\"\"}', '2025-05-06T17:09:29.000Z')"
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "statements": [
                    "INSERT INTO messages (session_id, run_id, input_messages, output_messages, run_metadata, azion_metadata, created_at) VALUES ('0e89f3a9-3ffc-4e07-8663-ac272f9b7c09', '54fcc9c6-42ee-47ad-8905-2c949676d0e2', '{\"role\":\"user\",\"content\":\"hello (current date and time: 2025-05-06T17:09:29.000Z)\"}', 'Hello! How can I assist you today with Azions Edge Computing Platform?', '{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain_core\",\"messages\",\"AIMessageChunk\"],\"kwargs\":{\"content\":\"Hello! How can I assist you today with Azions Edge Computing Platform?\",\"additional_kwargs\":{}},\"response_metadata\":{\"usage\":{\"prompt_tokens\":2123,\"completion_tokens\":18,\"total_tokens\":2141,\"prompt_tokens_details\":{\"cached_tokens\":2048,\"audio_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0,\"audio_tokens\":0,\"accepted_prediction_tokens\":0,\"rejected_prediction_tokens\":0}}},\"tool_call_chunks\":[],\"id\":\"chatcmpl-BUG5JQ8MxvrWkRk2heVUBA9DYOsRn\",\"usage_metadata\":{\"input_tokens\":2123,\"output_tokens\":18,\"total_tokens\":2141,\"input_token_details\":{\"audio\":0,\"cache_read\":2048},\"output_token_details\":{\"audio\":0,\"reasoning\":0}},\"tool_calls\":[],\"invalid_tool_calls\":[]}}', '{\"user_name\":\"\",\"first_name\":\"\",\"last_name\":\"\",\"client_id\":\"\",\"email\":\"\",\"support_plan\":\"\",\"url\":\"\",\"app\":\"azion-copilot-stage\",\"project\":\"azion-copilot-stage\",\"ticket_id\":\"\"}', '2025-05-06T17:09:29.000Z')"
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Execute a query into a database for your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a database",
          "method": "GET",
          "url": "/edge_sql/databases/{{databaseId}}",
          "category": "edge_sql",
          "path": "edge_sql/databases/{id}",
          "key": "GET /edge_sql/databases/{{databaseId}}",
          "pathParams": [
            {
              "name": "databaseId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific database in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a database",
          "method": "DELETE",
          "url": "/edge_sql/databases/{{databaseId}}",
          "category": "edge_sql",
          "path": "edge_sql/databases/{id}",
          "key": "DELETE /edge_sql/databases/{{databaseId}}",
          "pathParams": [
            {
              "name": "databaseId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Schedule the destruction of a specific database in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List databases",
          "method": "GET",
          "url": "/edge_sql/databases",
          "category": "edge_sql",
          "path": "edge_sql/databases",
          "key": "GET /edge_sql/databases",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all databases owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a database",
          "method": "POST",
          "url": "/edge_sql/databases",
          "category": "edge_sql",
          "path": "edge_sql/databases",
          "key": "POST /edge_sql/databases",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "status": "deletion_failed",
              "is_active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "status",
                "is_active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "status": "deletion_failed",
                  "is_active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "status": "deletion_failed",
                  "is_active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new database for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "POST": 2,
        "GET": 2,
        "DELETE": 1
      },
      "priorityCounts": {
        "high": 0,
        "medium": 3,
        "low": 2
      },
      "complexityCounts": {
        "high": 0,
        "medium": 2,
        "low": 3
      },
      "totalEndpoints": 5,
      "coverage": 0,
      "priority": "low"
    },
    "edge_storage": {
      "name": "edge_storage",
      "endpoints": [
        {
          "name": "Update bucket info",
          "method": "PATCH",
          "url": "/wrokspace/storage/buckets/{{bucketName}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{name}",
          "key": "PATCH /wrokspace/storage/buckets/{{bucketName}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "edge_access": "read_only"
            },
            "schema": {
              "type": "object",
              "properties": {
                "edge_access": {
                  "type": "string"
                }
              },
              "required": [
                "edge_access"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "edge_access": "read_only"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "edge_access": "read_only"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update bucket information (bucket name cannot be changed)",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete a bucket",
          "method": "DELETE",
          "url": "/worksapce/storage/buckets/{{bucketName}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{name}",
          "key": "DELETE /worksapce/storage/buckets/{{bucketName}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete a specific bucket.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Download object",
          "method": "GET",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "GET /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "content-type",
              "value": "application/octet-stream",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Download the object key from bucket.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create new object key",
          "method": "POST",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "POST /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "bucket-{{$timestamp}}",
              "edge_access": "read_only"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "edge_access": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "edge_access"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "bucket-{{$timestamp}}",
                  "edge_access": "read_only"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "bucket-{{$timestamp}}",
                  "edge_access": "read_only"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new object key in the bucket.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update the object key",
          "method": "PUT",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "PUT /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json; version=3",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{{mockFileContent}}",
            "schema": {
              "type": "string"
            },
            "examples": [
              {
                "type": "valid",
                "data": "{{mockFileContent}}"
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the object key from bucket.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete object key",
          "method": "DELETE",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "DELETE /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete an object key from bucket",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List buckets objects",
          "method": "GET",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects",
          "key": "GET /workspace/storage/buckets/{{bucketName}}/objects",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "continuation_token",
              "value": "<string>",
              "description": "A continuation token for the next page of records.",
              "required": false,
              "type": "string"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "max_object_count",
              "value": "<integer>",
              "description": "Number of results to be returned on the page. Limited to 1000 objects.",
              "required": false,
              "type": "integer"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Content-Type",
              "value": "application/octet-stream",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List buckets objects",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List buckets",
          "method": "GET",
          "url": "/workspace/storage/buckets",
          "category": "edge_storage",
          "path": "edge_storage/buckets",
          "key": "GET /workspace/storage/buckets",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all buckets.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new bucket",
          "method": "POST",
          "url": "/workspace/storage/buckets",
          "category": "edge_storage",
          "path": "edge_storage/buckets",
          "key": "POST /workspace/storage/buckets",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "edge_access": "read_only",
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "edge_access": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "edge_access",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "edge_access": "read_only",
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "edge_access": "read_only",
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new bucket.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a credential",
          "method": "GET",
          "url": "/workspace/storage/credentials/{{credentialId}}",
          "category": "edge_storage",
          "path": "edge_storage/s3-credentials/{accessKey}",
          "key": "GET /workspace/storage/credentials/{{credentialId}}",
          "pathParams": [
            {
              "name": "credentialId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific credential.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete a Credential",
          "method": "DELETE",
          "url": "/workspace/storage/credentials/{{credentialId}}",
          "category": "edge_storage",
          "path": "edge_storage/s3-credentials/{accessKey}",
          "key": "DELETE /workspace/storage/credentials/{{credentialId}}",
          "pathParams": [
            {
              "name": "credentialId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete a specific credential.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List credentials",
          "method": "GET",
          "url": "/workspace/storage/credentials",
          "category": "edge_storage",
          "path": "edge_storage/s3-credentials",
          "key": "GET /workspace/storage/credentials",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all credentials.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new credential",
          "method": "POST",
          "url": "/workspace/storage/credentials",
          "category": "edge_storage",
          "path": "edge_storage/s3-credentials",
          "key": "POST /workspace/storage/credentials",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n    \"name\": \"credential-{{bucketName}}-{{uniqueId}}\",  // Nome único\n    \"bucket\": \"{{bucketName}}\",                        // Referência ao bucket\n    \"capabilities\": [\"listBuckets\", \"readFiles\", \"writeFiles\", \"deleteFiles\"],\n    \"expiration_date\": \"{{credentialExpiration}}\"      // Configurável\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new credential.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "PATCH": 1,
        "DELETE": 3,
        "GET": 5,
        "POST": 3,
        "PUT": 1
      },
      "priorityCounts": {
        "high": 0,
        "medium": 8,
        "low": 5
      },
      "complexityCounts": {
        "high": 2,
        "medium": 5,
        "low": 6
      },
      "totalEndpoints": 13,
      "coverage": 0,
      "priority": "low"
    },
    "iam": {
      "name": "iam",
      "endpoints": [
        {
          "name": "Create a TOTP device",
          "method": "POST",
          "url": "/iam/mfa/totp",
          "category": "iam",
          "path": "iam/mfa/totp",
          "key": "POST /iam/mfa/totp",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new TOTP device for your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create User",
          "method": "POST",
          "url": "/iam/users",
          "category": "iam",
          "path": "iam/accounts",
          "key": "POST /iam/users",
          "pathParams": [],
          "queryParams": [],
          "headers": [],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create new account",
          "method": "POST",
          "url": "/iam/accounts",
          "category": "iam",
          "path": "iam/accounts",
          "key": "POST /iam/accounts",
          "pathParams": [],
          "queryParams": [],
          "headers": [],
          "requestBody": {
            "mode": "raw",
            "content": "{\n  \"account_type\": \"group\", // ou \"group\", \"reseller\"\n  \"name\": \"New Client Account Test 2025-06-04 11:27:00\",\n  \"company_name\": \"Azion Test Company\",\n  \"address\": \"Test Address 2025-06-04 11:27:00\",\n  \"user\": {\n    \"email\": \"new_test_user_20250604112700@example.com\",\n    \"first_name\": \"New Test User\",\n    \"last_name\": \"Lastname Test 20250604112700\"\n  }\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "POST": 3
      },
      "priorityCounts": {
        "high": 3,
        "medium": 0,
        "low": 0
      },
      "complexityCounts": {
        "high": 2,
        "medium": 0,
        "low": 1
      },
      "totalEndpoints": 3,
      "coverage": 0,
      "priority": "high"
    },
    "orchestrator": {
      "name": "orchestrator",
      "endpoints": [
        {
          "name": "List Edge Node Groups by id",
          "method": "GET",
          "url": "/orchestrator/edge_nodes/:nodeId/groups?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/groups",
          "key": "GET /orchestrator/edge_nodes/:nodeId/groups?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": true,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Groups of an Edge Node.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Bind Node Group",
          "method": "POST",
          "url": "/orchestrator/edge_nodes/:nodeId/groups",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/groups",
          "key": "POST /orchestrator/edge_nodes/:nodeId/groups",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "<string>",
              "node_group": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "node_group": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "node_group"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "<string>",
                  "node_group": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "<string>",
                  "node_group": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a bind between Node and Group.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Node Service Bind",
          "method": "GET",
          "url": "/orchestrator/edge_nodes/:nodeId/services/:bindId?fields=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services/{bindId}",
          "key": "GET /orchestrator/edge_nodes/:nodeId/services/:bindId?fields=<string>",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            },
            {
              "name": "bindId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Node Service Bind in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Unbind Node Service",
          "method": "DELETE",
          "url": "/orchestrator/edge_nodes/:nodeId/services/:bindId",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services/{bindId}",
          "key": "DELETE /orchestrator/edge_nodes/:nodeId/services/:bindId",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            },
            {
              "name": "bindId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Remove the bind between Node and Service.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Node Services",
          "method": "GET",
          "url": "/orchestrator/edge_nodes/:nodeId/services?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services",
          "key": "GET /orchestrator/edge_nodes/:nodeId/services?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": true,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Services from an Edge Node.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Bind Node Service",
          "method": "POST",
          "url": "/edge_orchestrator/edge_nodes/:nodeId/services",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services",
          "key": "POST /edge_orchestrator/edge_nodes/:nodeId/services",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "service_id": "<integer>",
              "id": "<integer>",
              "service_name": "$T0mH%j",
              "is_active": "<boolean>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "service_id": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "service_name": {
                  "type": "string"
                },
                "is_active": {
                  "type": "string"
                }
              },
              "required": [
                "service_id",
                "id",
                "service_name",
                "is_active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "service_id": "<integer>",
                  "id": "<integer>",
                  "service_name": "$T0mH%j",
                  "is_active": "<boolean>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "service_id": "<integer>",
                  "id": "<integer>",
                  "service_name": "$T0mH%j",
                  "is_active": "<boolean>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a bind between Node and Service.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Node",
          "method": "GET",
          "url": "/edge_orchestrator/edge_nodes/:nodeId/",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "GET /edge_orchestrator/edge_nodes/:nodeId/",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Node in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Node",
          "method": "PUT",
          "url": "/orchestrator/edge_nodes/:nodeId/",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "PUT /orchestrator/edge_nodes/:nodeId/",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "V&0M@<Ud0",
              "status": "waiting_authorization",
              "modules": {
                "utd4": {},
                "laborumf0": {},
                "fugiat_28": {},
                "dolord": {}
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "utd4": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "laborumf0": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "fugiat_28": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "dolord": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": [
                    "utd4",
                    "laborumf0",
                    "fugiat_28",
                    "dolord"
                  ]
                }
              },
              "required": [
                "name",
                "status",
                "modules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "V&0M@<Ud0",
                  "status": "waiting_authorization",
                  "modules": {
                    "utd4": {},
                    "laborumf0": {},
                    "fugiat_28": {},
                    "dolord": {}
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "V&0M@<Ud0",
                  "status": "waiting_authorization",
                  "modules": {
                    "utd4": {},
                    "laborumf0": {},
                    "fugiat_28": {},
                    "dolord": {}
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Node. This replaces the entire Edge Node with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Node",
          "method": "PATCH",
          "url": "/orchestrator/edge_nodes/:nodeId/",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "PATCH /orchestrator/edge_nodes/:nodeId/",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "pB8`HPy",
              "status": "authorized",
              "modules": {
                "reprehenderitbdc": {},
                "dolor8": {}
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "reprehenderitbdc": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "dolor8": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": [
                    "reprehenderitbdc",
                    "dolor8"
                  ]
                }
              },
              "required": [
                "name",
                "status",
                "modules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "pB8`HPy",
                  "status": "authorized",
                  "modules": {
                    "reprehenderitbdc": {},
                    "dolor8": {}
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "pB8`HPy",
                  "status": "authorized",
                  "modules": {
                    "reprehenderitbdc": {},
                    "dolor8": {}
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Node without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete an Edge Node",
          "method": "DELETE",
          "url": "/orchestrator/edge_nodes/:nodeId",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "DELETE /orchestrator/edge_nodes/:nodeId",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete an Edge Node.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Remove Node Group",
          "method": "DELETE",
          "url": "/edge_orchestrator/edge_nodes/groups/{{groupId}}",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/groups/{groupId}",
          "key": "DELETE /edge_orchestrator/edge_nodes/groups/{{groupId}}",
          "pathParams": [
            {
              "name": "groupId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Remove an Edge Node Group.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Node Groups",
          "method": "GET",
          "url": "/edge_orchestrator/edge_nodes/groups",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/groups",
          "key": "GET /edge_orchestrator/edge_nodes/groups",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Groups of an Edge Node.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create Edge Node Group",
          "method": "POST",
          "url": "/edge_orchestrator/edge_nodes/groups",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/groups",
          "key": "POST /edge_orchestrator/edge_nodes/groups",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{first_name}}",
              "is_active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "is_active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{first_name}}",
                  "is_active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{first_name}}",
                  "is_active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create an Edge Node Group.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Nodes",
          "method": "GET",
          "url": "/edge_orchestrator/edge_nodes",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes",
          "key": "GET /edge_orchestrator/edge_nodes",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "hash_id",
              "value": "<string>",
              "description": "Search by hash_id",
              "required": false,
              "type": "integer"
            },
            {
              "key": "name",
              "value": "<string>",
              "description": "Search by name",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Nodes of your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve content of a Resource",
          "method": "GET",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}/resources/{{resourceId}}/content",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources/{resourceId}/content",
          "key": "GET /edge_orchestrator/edge_services/{{serviceId}}/resources/{{resourceId}}/content",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            },
            {
              "name": "resourceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve content of a resource.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Upload content of a Resource",
          "method": "PUT",
          "url": "/orchestrator/edge_services/:serviceId/resources/:resourceId/content",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources/{resourceId}/content",
          "key": "PUT /orchestrator/edge_services/:serviceId/resources/:resourceId/content",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            },
            {
              "name": "resourceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "content_hash": "9rmJvKyl\\",
              "content_type": "gqS7",
              "name": "dvBB%mx"
            },
            "schema": {
              "type": "object",
              "properties": {
                "content_hash": {
                  "type": "string"
                },
                "content_type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "content_hash",
                "content_type",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "content_hash": "9rmJvKyl\\",
                  "content_type": "gqS7",
                  "name": "dvBB%mx"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "content_hash": "9rmJvKyl\\",
                  "content_type": "gqS7",
                  "name": "dvBB%mx"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Upload content of a Resource.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Resource",
          "method": "GET",
          "url": "/orchestrator/edge_services/:serviceId/resources/:resourceId?fields=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources/{resourceId}",
          "key": "GET /orchestrator/edge_services/:serviceId/resources/:resourceId?fields=<string>",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            },
            {
              "name": "resourceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Resource in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update Resource",
          "method": "PUT",
          "url": "/orchestrator/edge_services/:serviceId/resources/:resourceId",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources/{resourceId}",
          "key": "PUT /orchestrator/edge_services/:serviceId/resources/:resourceId",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            },
            {
              "name": "resourceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "file_group": "xT/f I@N",
              "file_mode": "~nw`6",
              "file_owner": "!Y~ 8W",
              "name": " ",
              "content_type": "(u;\"4YG",
              "trigger": "uninstall",
              "content": ".NK{$_o;"
            },
            "schema": {
              "type": "object",
              "properties": {
                "file_group": {
                  "type": "string"
                },
                "file_mode": {
                  "type": "string"
                },
                "file_owner": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "content_type": {
                  "type": "string"
                },
                "trigger": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "file_group",
                "file_mode",
                "file_owner",
                "name",
                "content_type",
                "trigger",
                "content"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "file_group": "xT/f I@N",
                  "file_mode": "~nw`6",
                  "file_owner": "!Y~ 8W",
                  "name": " ",
                  "content_type": "(u;\"4YG",
                  "trigger": "uninstall",
                  "content": ".NK{$_o;"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "file_group": "xT/f I@N",
                  "file_mode": "~nw`6",
                  "file_owner": "!Y~ 8W",
                  "name": " ",
                  "content_type": "(u;\"4YG",
                  "trigger": "uninstall",
                  "content": ".NK{$_o;"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update Resource in your account.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete Resource",
          "method": "DELETE",
          "url": "/orchestrator/edge_services/:serviceId/resources/:resourceId",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources/{resourceId}",
          "key": "DELETE /orchestrator/edge_services/:serviceId/resources/:resourceId",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            },
            {
              "name": "resourceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete Resource from your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Service Resources",
          "method": "GET",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}/resources",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources",
          "key": "GET /edge_orchestrator/edge_services/{{serviceId}}/resources",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all resources of a Service owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create Service Resource",
          "method": "POST",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}/resources",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}/resources",
          "key": "POST /edge_orchestrator/edge_services/{{serviceId}}/resources",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "content_type": "s",
              "file_group": "CCYbVhPt",
              "file_mode": "'7)~",
              "file_owner": ";c<P+C",
              "name": "VsM}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "content_type": {
                  "type": "string"
                },
                "file_group": {
                  "type": "string"
                },
                "file_mode": {
                  "type": "string"
                },
                "file_owner": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "content_type",
                "file_group",
                "file_mode",
                "file_owner",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "content_type": "s",
                  "file_group": "CCYbVhPt",
                  "file_mode": "'7)~",
                  "file_owner": ";c<P+C",
                  "name": "VsM}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "content_type": "s",
                  "file_group": "CCYbVhPt",
                  "file_mode": "'7)~",
                  "file_owner": ";c<P+C",
                  "name": "VsM}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a Resource on a Service.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Service",
          "method": "GET",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}",
          "key": "GET /edge_orchestrator/edge_services/{{serviceId}}",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Service in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Service",
          "method": "PUT",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}",
          "key": "PUT /edge_orchestrator/edge_services/{{serviceId}}",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomOriginName}}",
              "is_active": false,
              "min_version": "0.0.0",
              "permissions": 3221225472
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "min_version": {
                  "type": "string"
                },
                "permissions": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "is_active",
                "min_version",
                "permissions"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomOriginName}}",
                  "is_active": false,
                  "min_version": "0.0.0",
                  "permissions": 3221225472
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomOriginName}}",
                  "is_active": false,
                  "min_version": "0.0.0",
                  "permissions": 3221225472
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Service replacing all fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Service",
          "method": "PATCH",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}",
          "key": "PATCH /edge_orchestrator/edge_services/{{serviceId}}",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomOriginName}}",
              "is_active": false,
              "min_version": "0.0.0",
              "permissions": 3221225472
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "min_version": {
                  "type": "string"
                },
                "permissions": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "is_active",
                "min_version",
                "permissions"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomOriginName}}",
                  "is_active": false,
                  "min_version": "0.0.0",
                  "permissions": 3221225472
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomOriginName}}",
                  "is_active": false,
                  "min_version": "0.0.0",
                  "permissions": 3221225472
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Service without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Service",
          "method": "DELETE",
          "url": "/edge_orchestrator/edge_services/{{serviceId}}",
          "category": "orchestrator",
          "path": "orchestrator/edge_services/{serviceId}",
          "key": "DELETE /edge_orchestrator/edge_services/{{serviceId}}",
          "pathParams": [
            {
              "name": "serviceId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Service in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Services",
          "method": "GET",
          "url": "/edge_orchestrator/edge_services",
          "category": "orchestrator",
          "path": "orchestrator/edge_services",
          "key": "GET /edge_orchestrator/edge_services",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "name",
              "value": "<string>",
              "description": "Search by name",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Field to order by, use '-' for descending",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "Page number for pagination",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Get the list of Edge Services of your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create Edge Service",
          "method": "POST",
          "url": "/edge_orchestrator/edge_services",
          "category": "orchestrator",
          "path": "orchestrator/edge_services",
          "key": "POST /edge_orchestrator/edge_services",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{first_name}}",
              "is_active": true,
              "min_version": "*t",
              "permissions": 0
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "min_version": {
                  "type": "string"
                },
                "permissions": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "is_active",
                "min_version",
                "permissions"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{first_name}}",
                  "is_active": true,
                  "min_version": "*t",
                  "permissions": 0
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{first_name}}",
                  "is_active": true,
                  "min_version": "*t",
                  "permissions": 0
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create an Edge Service.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "GET": 11,
        "POST": 5,
        "DELETE": 5,
        "PUT": 4,
        "PATCH": 2
      },
      "priorityCounts": {
        "high": 0,
        "medium": 14,
        "low": 13
      },
      "complexityCounts": {
        "high": 6,
        "medium": 13,
        "low": 8
      },
      "totalEndpoints": 27,
      "coverage": 0,
      "priority": "low"
    },
    "identity": {
      "name": "identity",
      "endpoints": [
        {
          "name": "Unlock user",
          "method": "DELETE",
          "url": "/identity/users/{{userId}}/lockout",
          "category": "identity",
          "path": "identity/users/{id}/lockout",
          "key": "DELETE /identity/users/{{userId}}/lockout",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy Lockout info from user.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a user",
          "method": "GET",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "GET /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific user in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a user",
          "method": "PUT",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "PUT /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing user. This replaces the entire user with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a user",
          "method": "PATCH",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "PATCH /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing user without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a user",
          "method": "DELETE",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "DELETE /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific user in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of the account users",
          "method": "GET",
          "url": "/identity/users",
          "category": "identity",
          "path": "identity/users",
          "key": "GET /identity/users",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "locked",
              "value": "%*!",
              "description": "Filters users by locked status.\n - `true`: Returns only locked users.\n - `false`: Returns only unlocked users.\n - (not provided): Returns all users.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, last_login, first_name, last_name, email, country_call_code, mobile, date_joined, timezone, language)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all users owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new user",
          "method": "POST",
          "url": "/identity/users",
          "category": "identity",
          "path": "identity/users",
          "key": "POST /identity/users",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new user for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "methodCounts": {
        "DELETE": 2,
        "GET": 2,
        "PUT": 1,
        "PATCH": 1,
        "POST": 1
      },
      "priorityCounts": {
        "high": 0,
        "medium": 3,
        "low": 4
      },
      "complexityCounts": {
        "high": 4,
        "medium": 0,
        "low": 3
      },
      "totalEndpoints": 7,
      "coverage": 0,
      "priority": "low"
    }
  },
  "coveragePlan": {
    "account": {
      "totalEndpoints": 10,
      "covered": 3,
      "missing": 7,
      "coveragePercentage": 30,
      "priority": "high",
      "estimatedEffort": 28,
      "missingEndpoints": [
        {
          "name": "Retrieve account information details",
          "method": "GET",
          "url": "/account/accounts/{{accountId}}/info",
          "category": "account",
          "path": "account/accounts/{id}/info",
          "key": "GET /account/accounts/{{accountId}}/info",
          "pathParams": [
            {
              "name": "accountId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve detailed information about your account or a specific child account under your logged-in account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update account information details",
          "method": "PUT",
          "url": "/account/accounts/{{accountId}}/info",
          "category": "account",
          "path": "account/accounts/{id}/info",
          "key": "PUT /account/accounts/{{accountId}}/info",
          "pathParams": [
            {
              "name": "accountId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json; version=3",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "info": {
                "industry": "Services",
                "company_size": 100
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "info": {
                  "type": "object",
                  "properties": {
                    "industry": {
                      "type": "string"
                    },
                    "company_size": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "industry",
                    "company_size"
                  ]
                }
              },
              "required": [
                "info"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "info": {
                    "industry": "Services",
                    "company_size": 100
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "info": {
                    "industry": "Services",
                    "company_size": 100
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the information details about your account or a specific child account under your logged-in account. This operation allows replacing the entire account info data with new values. In this operation, you can also clear all detailed information of an account by providing an empty dictionary in the `info` field.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve account details",
          "method": "GET",
          "url": "/account/accounts/{{accountId}}",
          "category": "account",
          "path": "account/accounts/{id}",
          "key": "GET /account/accounts/{{accountId}}",
          "pathParams": [
            {
              "name": "accountId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve detailed information of a specific account under the logged-in user's account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update account details",
          "method": "PUT",
          "url": "/account/accounts/:id",
          "category": "account",
          "path": "account/accounts/{id}",
          "key": "PUT /account/accounts/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "I{!iq"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "I{!iq"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "I{!iq"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the information of a specific account under the logged-in user's account. This operation allows replacing the entire account data with new values.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update account details",
          "method": "PATCH",
          "url": "/account/accounts/:id",
          "category": "account",
          "path": "account/accounts/{id}",
          "key": "PATCH /account/accounts/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "!Q{0Td"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "!Q{0Td"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "!Q{0Td"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update specific fields of an account under the logged-in user's account. Only editable fields, such as `name`, can be updated with this operation.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update logged account details",
          "method": "PUT",
          "url": "/account/account",
          "category": "account",
          "path": "account/account",
          "key": "PUT /account/account",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{\n  \"name\": \"Azion - Engineering (Testes Funcionais - new monster)\",\n  \"title\": \"QE\",\n  \"detail\": \"test\",\n  \"type\": \"Workspace\" // Add the appropriate type value\n}",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the details of the currently logged-in user's account. This operation allows replacing the entire account data with new values.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update logged account details",
          "method": "PATCH",
          "url": "/account/account",
          "category": "account",
          "path": "account/account",
          "key": "PATCH /account/account",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Azion - Engineering (Testes Funcionais - new monster) Patch"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Azion - Engineering (Testes Funcionais - new monster) Patch"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Azion - Engineering (Testes Funcionais - new monster) Patch"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Partially update specific fields of the currently logged-in user's account. Only editable fields, such as `name`, can be updated with this operation.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "account.cy.js"
    },
    "auth": {
      "totalEndpoints": 18,
      "covered": 0,
      "missing": 18,
      "coveragePercentage": 0,
      "priority": "high",
      "estimatedEffort": 66,
      "missingEndpoints": [
        {
          "name": "Retrieve user login method",
          "method": "GET",
          "url": "/auth/login/method",
          "category": "auth",
          "path": "auth/login/method",
          "key": "GET /auth/login/method",
          "pathParams": [],
          "queryParams": [
            {
              "key": "email",
              "value": "<email>",
              "description": "Email address of the user",
              "required": false,
              "type": "email"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": false,
          "description": "Retrieve details of a specific user's login method",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve user JWT tokens",
          "method": "POST",
          "url": "/auth/login",
          "category": "auth",
          "path": "auth/login",
          "key": "POST /auth/login",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "",
              "password": "",
              "account_id": ""
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "account_id": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password",
                "account_id"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "",
                  "password": "",
                  "account_id": ""
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "",
                  "password": "",
                  "account_id": ""
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": false,
          "description": "Retrieve user JWT tokens",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a TOTP device",
          "method": "DELETE",
          "url": "/auth/mfa/totp/:id",
          "category": "auth",
          "path": "auth/mfa/totp/{id}",
          "key": "DELETE /auth/mfa/totp/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific TOTP device from your account or descendant account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of TOTP devices",
          "method": "GET",
          "url": "/auth/mfa/totp",
          "category": "auth",
          "path": "auth/mfa/totp",
          "key": "GET /auth/mfa/totp",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all totp devices for user account and descendant accounts.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a TOTP device",
          "method": "POST",
          "url": "/auth/mfa/totp",
          "category": "auth",
          "path": "auth/mfa/totp",
          "key": "POST /auth/mfa/totp",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new TOTP device for your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Refresh user JWT access token",
          "method": "POST",
          "url": "/auth/token",
          "category": "auth",
          "path": "auth/token",
          "key": "POST /auth/token",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "account_id": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string"
                }
              },
              "required": [
                "account_id"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "account_id": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "account_id": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Refresh JWT access token, via a POST request.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Revoke user JWT refresh token",
          "method": "POST",
          "url": "/auth/revoke",
          "category": "auth",
          "path": "auth/revoke",
          "key": "POST /auth/revoke",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Revoke refresh token via a POST request.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve user JWT tokens by MFA auth",
          "method": "POST",
          "url": "/auth/verify",
          "category": "auth",
          "path": "auth/verify",
          "key": "POST /auth/verify",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "<string>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                }
              },
              "required": [
                "code"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "<string>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "<string>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieves JWT access and refresh tokens, via a POST request with jwt mfa token as auth + code.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Get Lockout Policy",
          "method": "GET",
          "url": "/auth/policies/lockout?fields=<string>",
          "category": "auth",
          "path": "auth/policies/lockout",
          "key": "GET /auth/policies/lockout?fields=<string>",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Get Lockout Policy for the current account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Put Lockout Policy",
          "method": "PUT",
          "url": "/auth/policies/lockout",
          "category": "auth",
          "path": "auth/policies/lockout",
          "key": "PUT /auth/policies/lockout",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "active": "<boolean>",
              "blocking_period": "<integer>",
              "max_attempts": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "string"
                },
                "blocking_period": {
                  "type": "string"
                },
                "max_attempts": {
                  "type": "string"
                }
              },
              "required": [
                "active",
                "blocking_period",
                "max_attempts"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "active": "<boolean>",
                  "blocking_period": "<integer>",
                  "max_attempts": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "active": "<boolean>",
                  "blocking_period": "<integer>",
                  "max_attempts": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Put Lockout Policy for the current account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "auth.cy.js"
    },
    "payments": {
      "totalEndpoints": 7,
      "covered": 0,
      "missing": 7,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 28,
      "missingEndpoints": [
        {
          "name": "Retrieve details from a credit card",
          "method": "GET",
          "url": "/payments/credit_cards/{{creditCardId}}",
          "category": "payments",
          "path": "payments/credit_cards/{id}",
          "key": "GET /payments/credit_cards/{{creditCardId}}",
          "pathParams": [
            {
              "name": "creditCardId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific credit card in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a credit card",
          "method": "PATCH",
          "url": "/payments/credit_cards/:id",
          "category": "payments",
          "path": "payments/credit_cards/{id}",
          "key": "PATCH /payments/credit_cards/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "is_default": "<boolean>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "is_default": {
                  "type": "string"
                }
              },
              "required": [
                "is_default"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "is_default": "<boolean>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "is_default": "<boolean>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the field 'is_default' to enable of an existing credit card.Only the field 'is_default' is editable for an existing card.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a credit card",
          "method": "DELETE",
          "url": "/payments/credit_cards/:id",
          "category": "payments",
          "path": "payments/credit_cards/{id}",
          "key": "DELETE /payments/credit_cards/:id",
          "pathParams": [
            {
              "name": "id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific credit card in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of the credit cards",
          "method": "GET",
          "url": "/payments/credit_cards",
          "category": "payments",
          "path": "payments/credit_cards",
          "key": "GET /payments/credit_cards",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all credit cards owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new credit card",
          "method": "POST",
          "url": "/payments/credit_cards",
          "category": "payments",
          "path": "payments/credit_cards",
          "key": "POST /payments/credit_cards",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "card_address_zip": "02110-001",
              "card_brand": "visa",
              "card_country": "BR",
              "card_expiration_month": 12,
              "card_expiration_year": 2026,
              "card_holder": "JOAO DA SILVA",
              "card_id": "card_1PQB46ErKN9EvH2jBhcny2h3",
              "card_last_4_digits": "4242",
              "stripe_token": "tok_visa",
              "card_address_line1": "Avenida Paulista, 1000",
              "card_address_line2": "Andar 10",
              "is_default": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "card_address_zip": {
                  "type": "string"
                },
                "card_brand": {
                  "type": "string"
                },
                "card_country": {
                  "type": "string"
                },
                "card_expiration_month": {
                  "type": "number"
                },
                "card_expiration_year": {
                  "type": "number"
                },
                "card_holder": {
                  "type": "string"
                },
                "card_id": {
                  "type": "string"
                },
                "card_last_4_digits": {
                  "type": "string"
                },
                "stripe_token": {
                  "type": "string"
                },
                "card_address_line1": {
                  "type": "string"
                },
                "card_address_line2": {
                  "type": "string"
                },
                "is_default": {
                  "type": "boolean"
                }
              },
              "required": [
                "card_address_zip",
                "card_brand",
                "card_country",
                "card_expiration_month",
                "card_expiration_year",
                "card_holder",
                "card_id",
                "card_last_4_digits",
                "stripe_token",
                "card_address_line1",
                "card_address_line2",
                "is_default"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "card_address_zip": "02110-001",
                  "card_brand": "visa",
                  "card_country": "BR",
                  "card_expiration_month": 12,
                  "card_expiration_year": 2026,
                  "card_holder": "JOAO DA SILVA",
                  "card_id": "card_1PQB46ErKN9EvH2jBhcny2h3",
                  "card_last_4_digits": "4242",
                  "stripe_token": "tok_visa",
                  "card_address_line1": "Avenida Paulista, 1000",
                  "card_address_line2": "Andar 10",
                  "is_default": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "card_address_zip": "02110-001",
                  "card_brand": "visa",
                  "card_country": "BR",
                  "card_expiration_month": 12,
                  "card_expiration_year": 2026,
                  "card_holder": "JOAO DA SILVA",
                  "card_id": "card_1PQB46ErKN9EvH2jBhcny2h3",
                  "card_last_4_digits": "4242",
                  "stripe_token": "tok_visa",
                  "card_address_line1": "Avenida Paulista, 1000",
                  "card_address_line2": "Andar 10",
                  "is_default": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new credit card for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Add credits using the default credit card",
          "method": "POST",
          "url": "/payments/credits",
          "category": "payments",
          "path": "payments/credits",
          "key": "POST /payments/credits",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "amount": "64"
            },
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string"
                }
              },
              "required": [
                "amount"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "amount": "64"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "amount": "64"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Add credit into the default credit card in US Dollars.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of the payment history",
          "method": "GET",
          "url": "/payments/history",
          "category": "payments",
          "path": "payments/history",
          "key": "GET /payments/history",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "#",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "payment_due",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "2",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "payment_method_details",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all details of the payment history.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "payments.cy.js"
    },
    "workspace": {
      "totalEndpoints": 23,
      "covered": 0,
      "missing": 23,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 97,
      "missingEndpoints": [
        {
          "name": "Retrieve details of a Custom Page",
          "method": "GET",
          "url": "/workspace/custom_pages/{{customPageId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "GET /workspace/custom_pages/{{customPageId}}",
          "pathParams": [
            {
              "name": "customPageId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "****",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Custom Page in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Custom Page",
          "method": "PUT",
          "url": "/workspace/custom_pages/{{customPageId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "PUT /workspace/custom_pages/{{customPageId}}",
          "pathParams": [
            {
              "name": "customPageId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "default": false,
              "connector_custom_pages": {
                "edge_connector": 173,
                "pages": [
                  {
                    "code": "default",
                    "ttl": 3,
                    "uri": null,
                    "custom_status_code": null
                  },
                  {
                    "code": "426",
                    "ttl": 2,
                    "uri": null,
                    "custom_status_code": null
                  }
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "default": {
                  "type": "boolean"
                },
                "connector_custom_pages": {
                  "type": "object",
                  "properties": {
                    "edge_connector": {
                      "type": "number"
                    },
                    "pages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "ttl": {
                            "type": "number"
                          },
                          "uri": {
                            "type": "object"
                          },
                          "custom_status_code": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "code",
                          "ttl"
                        ]
                      }
                    }
                  },
                  "required": [
                    "edge_connector",
                    "pages"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "default",
                "connector_custom_pages"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Custom Page. This replaces the entire Custom Page with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Custom Page",
          "method": "PATCH",
          "url": "/workspace/custom_pages/{{customPageId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "PATCH /workspace/custom_pages/{{customPageId}}",
          "pathParams": [
            {
              "name": "customPageId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "default": false,
              "connector_custom_pages": {
                "edge_connector": 173,
                "pages": [
                  {
                    "code": "default",
                    "ttl": 3,
                    "uri": null,
                    "custom_status_code": null
                  },
                  {
                    "code": "426",
                    "ttl": 2,
                    "uri": null,
                    "custom_status_code": null
                  }
                ]
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "default": {
                  "type": "boolean"
                },
                "connector_custom_pages": {
                  "type": "object",
                  "properties": {
                    "edge_connector": {
                      "type": "number"
                    },
                    "pages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "ttl": {
                            "type": "number"
                          },
                          "uri": {
                            "type": "object"
                          },
                          "custom_status_code": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "code",
                          "ttl"
                        ]
                      }
                    }
                  },
                  "required": [
                    "edge_connector",
                    "pages"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "default",
                "connector_custom_pages"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "default": false,
                  "connector_custom_pages": {
                    "edge_connector": 173,
                    "pages": [
                      {
                        "code": "default",
                        "ttl": 3,
                        "uri": null,
                        "custom_status_code": null
                      },
                      {
                        "code": "426",
                        "ttl": 2,
                        "uri": null,
                        "custom_status_code": null
                      }
                    ]
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Custom Page without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a Custom Page",
          "method": "DELETE",
          "url": "/workspace/custom_pages/{{deleteId}}",
          "category": "workspace",
          "path": "workspace/custom_pages/{id}",
          "key": "DELETE /workspace/custom_pages/{{deleteId}}",
          "pathParams": [
            {
              "name": "deleteId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Custom Page in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Custom Pages",
          "method": "GET",
          "url": "/workspace/custom_pages",
          "category": "workspace",
          "path": "workspace/custom_pages",
          "key": "GET /workspace/custom_pages",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "custom_status_code",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "last_modified",
              "description": "Which field to use when ordering the results.\n(Valid fields: name, last_editor, last_modified, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "1",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "100",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "Custom Page120525152504592",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Custom Pages owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Custom Page",
          "method": "POST",
          "url": "/workspace/custom_pages",
          "category": "workspace",
          "path": "workspace/custom_pages",
          "key": "POST /workspace/custom_pages",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{uniqueName}}-custom-page",
              "active": true,
              "pages": [
                {
                  "code": "404",
                  "uri": "/error-pages/404.html"
                },
                {
                  "code": "500",
                  "uri": "/error-pages/500.html"
                }
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "pages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "uri": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "code",
                      "uri"
                    ]
                  }
                }
              },
              "required": [
                "name",
                "active",
                "pages"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{uniqueName}}-custom-page",
                  "active": true,
                  "pages": [
                    {
                      "code": "404",
                      "uri": "/error-pages/404.html"
                    },
                    {
                      "code": "500",
                      "uri": "/error-pages/500.html"
                    }
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{uniqueName}}-custom-page",
                  "active": true,
                  "pages": [
                    {
                      "code": "404",
                      "uri": "/error-pages/404.html"
                    },
                    {
                      "code": "500",
                      "uri": "/error-pages/500.html"
                    }
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Custom Page in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Network List",
          "method": "GET",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "GET /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Network List in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Network List",
          "method": "PUT",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "PUT /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Network List. This replaces the entire Network List with the new data provided.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Network List",
          "method": "PATCH",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "PATCH /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Network List without affecting other fields.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a Network List",
          "method": "DELETE",
          "url": "/workspace/network_lists/{{networkId}}",
          "category": "workspace",
          "path": "workspace/network_lists/{id}",
          "key": "DELETE /workspace/network_lists/{{networkId}}",
          "pathParams": [
            {
              "name": "networkId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Network List in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "workspace.cy.js"
    },
    "dns": {
      "totalEndpoints": 15,
      "covered": 0,
      "missing": 15,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 67,
      "missingEndpoints": [
        {
          "name": "Retrieve details of a DNSSEC",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}/dnssec",
          "category": "dns",
          "path": "dns/zones/{zoneId}/dnssec",
          "key": "GET /workspace/dns/zones/{{zoneId}}/dnssec",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific DNSSEC from a DNS Zone in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a DNSSEC",
          "method": "PUT",
          "url": "/workspace/dns/zones/{{zoneId}}/dnssec",
          "category": "dns",
          "path": "dns/zones/{zoneId}/dnssec",
          "key": "PUT /workspace/dns/zones/{{zoneId}}/dnssec",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "enabled": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "required": [
                "enabled"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "enabled": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "enabled": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing a DNSSEC. This replaces the entire DNSSEC with the new data provided.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a DNSSEC",
          "method": "PATCH",
          "url": "/workspace/dns/zones/{{zoneId}}/dnssec",
          "category": "dns",
          "path": "dns/zones/{zoneId}/dnssec",
          "key": "PATCH /workspace/dns/zones/{{zoneId}}/dnssec",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "enabled": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "required": [
                "enabled"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "enabled": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "enabled": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing DNSSEC without affecting other fields.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a DNS Record",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "GET /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific DNS Record from a DNS Zone in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a DNS Record",
          "method": "PUT",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "PUT /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "CNAME",
              "policy": "simple",
              "name": "recorddns",
              "rdata": [
                "recorddns.map.edgeazion.net"
              ],
              "ttl": 36,
              "description": "putTest",
              "weight": "100"
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "policy": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rdata": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ttl": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "policy",
                "name",
                "rdata",
                "ttl",
                "description",
                "weight"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "putTest",
                  "weight": "100"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "putTest",
                  "weight": "100"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing a DNS Record. This replaces the entire DNS Record with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a DNS Record",
          "method": "PATCH",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "PATCH /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "record_type": "CNAME",
              "policy": "simple",
              "entry": "recorddns",
              "answers_list": [
                "recorddns.map.edgeazion.net"
              ],
              "ttl": 36,
              "description": "patchTest",
              "weight": "100"
            },
            "schema": {
              "type": "object",
              "properties": {
                "record_type": {
                  "type": "string"
                },
                "policy": {
                  "type": "string"
                },
                "entry": {
                  "type": "string"
                },
                "answers_list": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ttl": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                }
              },
              "required": [
                "record_type",
                "policy",
                "entry",
                "answers_list",
                "ttl",
                "description",
                "weight"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "record_type": "CNAME",
                  "policy": "simple",
                  "entry": "recorddns",
                  "answers_list": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "patchTest",
                  "weight": "100"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "record_type": "CNAME",
                  "policy": "simple",
                  "entry": "recorddns",
                  "answers_list": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 36,
                  "description": "patchTest",
                  "weight": "100"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing DNS Record without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a DNS Record",
          "method": "DELETE",
          "url": "/workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records/{recordId}",
          "key": "DELETE /workspace/dns/zones/{{zoneId}}/records/{{recordId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            },
            {
              "name": "recordId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific a DNS Record from a DNS Zone in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List DNS Records",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}/records",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records",
          "key": "GET /workspace/dns/zones/{{zoneId}}/records",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all DNS Records from a DNS Zone owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a DNS Record",
          "method": "POST",
          "url": "/workspace/dns/zones/{{zoneId}}/records",
          "category": "dns",
          "path": "dns/zones/{zoneId}/records",
          "key": "POST /workspace/dns/zones/{{zoneId}}/records",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "CNAME",
              "policy": "simple",
              "name": "recorddns",
              "rdata": [
                "recorddns.map.edgeazion.net"
              ],
              "ttl": 3600,
              "description": "",
              "weight": "100"
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "policy": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "rdata": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ttl": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "policy",
                "name",
                "rdata",
                "ttl",
                "description",
                "weight"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 3600,
                  "description": "",
                  "weight": "100"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "CNAME",
                  "policy": "simple",
                  "name": "recorddns",
                  "rdata": [
                    "recorddns.map.edgeazion.net"
                  ],
                  "ttl": 3600,
                  "description": "",
                  "weight": "100"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new DNS Record in a DNS Zone for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a DNS Zone",
          "method": "GET",
          "url": "/workspace/dns/zones/{{zoneId}}",
          "category": "dns",
          "path": "dns/zones/{zoneId}",
          "key": "GET /workspace/dns/zones/{{zoneId}}",
          "pathParams": [
            {
              "name": "zoneId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific DNS Zone in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "dns.cy.js"
    },
    "data_stream": {
      "totalEndpoints": 13,
      "covered": 0,
      "missing": 13,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 55,
      "missingEndpoints": [
        {
          "name": "Retrieve details of a template",
          "method": "GET",
          "url": "/data_stream/templates/{{templateId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "GET /data_stream/templates/{{templateId}}",
          "pathParams": [
            {
              "name": "templateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific Data Set in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a template",
          "method": "PUT",
          "url": "/data_stream/templates/{{dataSetId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "PUT /data_stream/templates/{{dataSetId}}",
          "pathParams": [
            {
              "name": "dataSetId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
              "name": "{{streamName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "data_set": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "data_set",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing custom Data Set.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a template",
          "method": "PATCH",
          "url": "/data_stream/templates/{{dataSetId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "PATCH /data_stream/templates/{{dataSetId}}",
          "pathParams": [
            {
              "name": "dataSetId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
              "name": "{{streamName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "data_set": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "data_set",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing custom Data Set.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a template",
          "method": "DELETE",
          "url": "/data_stream/data_sets/{{dataSetId}}",
          "category": "data_stream",
          "path": "data_stream/templates/{id}",
          "key": "DELETE /data_stream/data_sets/{{dataSetId}}",
          "pathParams": [
            {
              "name": "dataSetId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific custom Data Set in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Template",
          "method": "GET",
          "url": "/data_stream/templates",
          "category": "data_stream",
          "path": "data_stream/templates",
          "key": "GET /data_stream/templates",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Data Sets owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a Template",
          "method": "POST",
          "url": "/data_stream/templates",
          "category": "data_stream",
          "path": "data_stream/templates",
          "key": "POST /data_stream/templates",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
              "name": "{{streamName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "data_set": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "data_set",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "data_set": "{ \"version\": \"$version\", \"time\": \"$time\", \"client\": \"$client\", \"configuration\": \"$configuration\", \"host\": \"$host\", \"remote_addr\": \"$remote_addr\", \"server_protocol\": \"$server_protocol\", \"country\": \"$country\", \"waf_server\": \"$waf_server\", \"waf_uri\": \"$waf_uri\", \"waf_learning\": \"$waf_learning\", \"blocked\": \"$blocked\", \"waf_score\": \"$waf_score\", \"waf_match\": \"$waf_match\", \"waf_attack_family\": \"$waf_attack_family\", \"waf_attack_action\": \"$waf_attack_action\", \"headers\": \"-\", \"truncated_body\": \"$truncated_body\", \"waf_args\": \"$waf_args\", \"requestPath\": \"$requestPath\", \"requestQuery\": \"$requestQuery\" }",
                  "name": "{{streamName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new custom Data Set in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of Data Sources",
          "method": "GET",
          "url": "/data_stream/data_sources",
          "category": "data_stream",
          "path": "data_stream/data_sources",
          "key": "GET /data_stream/data_sources",
          "pathParams": [],
          "queryParams": [
            {
              "key": "active",
              "value": "<boolean>",
              "description": "",
              "required": false,
              "type": "boolean"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "name",
              "value": "<string>",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            },
            {
              "key": "slug",
              "value": "<string>",
              "description": "",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Data Sources.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of a Data Stream",
          "method": "GET",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "GET /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific Data Stream in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a Data Stream",
          "method": "PUT",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "PUT /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Data Stream",
              "template_id": 2,
              "domain_ids": [
                1
              ],
              "endpoint": {
                "endpoint_type": "standard",
                "url": "https://example.com/endpoint",
                "log_line_separator": "\\n",
                "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "template_id": {
                  "type": "number"
                },
                "domain_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "endpoint": {
                  "type": "object",
                  "properties": {
                    "endpoint_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "log_line_separator": {
                      "type": "string"
                    },
                    "payload_format": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "endpoint_type",
                    "url",
                    "log_line_separator",
                    "payload_format"
                  ]
                }
              },
              "required": [
                "name",
                "template_id",
                "domain_ids",
                "endpoint"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Data Stream.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a Data Stream",
          "method": "PATCH",
          "url": "/data_stream/streams/{{dataStreamingId}}",
          "category": "data_stream",
          "path": "data_stream/streams/{id}",
          "key": "PATCH /data_stream/streams/{{dataStreamingId}}",
          "pathParams": [
            {
              "name": "dataStreamingId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "Test Data Stream",
              "template_id": 2,
              "domain_ids": [
                1
              ],
              "endpoint": {
                "endpoint_type": "standard",
                "url": "https://example.com/endpoint",
                "log_line_separator": "\\n",
                "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "template_id": {
                  "type": "number"
                },
                "domain_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "endpoint": {
                  "type": "object",
                  "properties": {
                    "endpoint_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "log_line_separator": {
                      "type": "string"
                    },
                    "payload_format": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "endpoint_type",
                    "url",
                    "log_line_separator",
                    "payload_format"
                  ]
                }
              },
              "required": [
                "name",
                "template_id",
                "domain_ids",
                "endpoint"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "Test Data Stream",
                  "template_id": 2,
                  "domain_ids": [
                    1
                  ],
                  "endpoint": {
                    "endpoint_type": "standard",
                    "url": "https://example.com/endpoint",
                    "log_line_separator": "\\n",
                    "payload_format": "$time_iso8601\\t$status\\t$request_method\\t$request_uri"
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Data Stream.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "data-stream.cy.js"
    },
    "digital_certificates": {
      "totalEndpoints": 14,
      "covered": 0,
      "missing": 14,
      "coveragePercentage": 0,
      "priority": "medium",
      "estimatedEffort": 59,
      "missingEndpoints": [
        {
          "name": "Create a certificate request (CR)",
          "method": "POST",
          "url": "/digital_certificates/certificates/request",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/request",
          "key": "POST /digital_certificates/certificates/request",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "authority": "lets_encrypt",
              "challenge": "dns",
              "common_name": "*.example-random.com",
              "name": "cert-random-timestamp"
            },
            "schema": {
              "type": "object",
              "properties": {
                "authority": {
                  "type": "string"
                },
                "challenge": {
                  "type": "string"
                },
                "common_name": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "authority",
                "challenge",
                "common_name",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "authority": "lets_encrypt",
                  "challenge": "dns",
                  "common_name": "*.example-random.com",
                  "name": "cert-random-timestamp"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "authority": "lets_encrypt",
                  "challenge": "dns",
                  "common_name": "*.example-random.com",
                  "name": "cert-random-timestamp"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new certificate request (CR) for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a certificate",
          "method": "GET",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "GET /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific certificate in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a certificate",
          "method": "PUT",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "PUT /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{certificateName}}",
              "type": "edge_certificate",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing certificate. This replaces the entire certificate with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a certificate",
          "method": "PATCH",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "PATCH /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{certificateName}}",
              "type": "edge_certificate",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{certificateName}}",
                  "type": "edge_certificate",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing certificate without affecting other fields.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a certificate",
          "method": "DELETE",
          "url": "/digital_certificates/certificates/{{certificateId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates/{id}",
          "key": "DELETE /digital_certificates/certificates/{{certificateId}}",
          "pathParams": [
            {
              "name": "certificateId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific certificate in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List certificates",
          "method": "GET",
          "url": "/digital_certificates/certificates",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates",
          "key": "GET /digital_certificates/certificates",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, certificate, issuer, subject_name, validity, status, type, managed, status_detail, csr, key_algorithm, challenge, authority, active, product_version, last_editor, last_modified)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all certificates owned by your account.",
          "priority": "high",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a certificate",
          "method": "POST",
          "url": "/digital_certificates/certificates",
          "category": "digital_certificates",
          "path": "digital_certificates/certificates",
          "key": "POST /digital_certificates/certificates",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomDnsName}}",
              "type": "edge_certificate"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomDnsName}}",
                  "type": "edge_certificate"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomDnsName}}",
                  "type": "edge_certificate"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new certificate for your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a certificate revocation lists (CRL)",
          "method": "GET",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "GET /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific certificate revocation lists (CRL) in your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a certificate revocation lists (CRL)",
          "method": "PUT",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "PUT /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
              "name": "{{certificateName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "crl": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "crl",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing certificate revocation lists (CRL).  This replaces the entire certificate with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a certificate revocation lists (CRL)",
          "method": "PATCH",
          "url": "/digital_certificates/crls/{{crlsId}}",
          "category": "digital_certificates",
          "path": "digital_certificates/crls/{id}",
          "key": "PATCH /digital_certificates/crls/{{crlsId}}",
          "pathParams": [
            {
              "name": "crlsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
              "name": "{{certificateName}}",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "crl": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "crl",
                "name",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "crl": "-----BEGIN X509 CRL-----\nMIIDUDCCATgCAQEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJDQTERMA8GA1UEBwwIU29tZUNpdHkxIzAhBgNVBAoMGmNhX2ludGVybWVk\naWF0ZU15T3JnLCBJbmMuMRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA9j\nYV9pbnRlcm1lZGlhdGUXDTI0MDQyOTIwMTAxNloYDzIwNTEwOTE1MjAxMDE2WjBO\nMCUCFDyfVxwBa5igYwEtSn1/QKyhRNRRFw0yNDA0MjkyMDEwMTZaMCUCFGBUfgD6\nePTnyqKA4LoYN06TmPs1Fw0yNDA0MjkyMDEwMTZaoDAwLjAfBgNVHSMEGDAWgBSK\na66wegOpU5NAU+QohXkdWJEfzDALBgNVHRQEBAICEAAwDQYJKoZIhvcNAQELBQAD\nggIBAKTFkeUUg1AEmjaPxRt8g0QAugkEEVsbrC+9lsGRFQfsr83TXIMf2fiw/AwK\nQM7sULFMFd9i4R5ZBWjpZnf52tundd575MBtxdqkmQVBQdcRei8MW7pMiWaEIQXc\n3Ssguk5bNAKHzf1jWo6pYZI04SAX0W4DwcaTxEMi812MTLADlN2HJBa8moAcvDPC\nh2NIzTJIKB92D9Q9LJxrKyFG7Nm0ZVyWRjoLpjpGVw7+xtH4ZjtzP0KcdX459XUP\nPmFih+okxwB/JWEcPVVf59vkZ7zaPhFDJfbl2GyeRJjDSnc9IhOU2cQkHgxR3Ll8\nVpFpPSTwEuYw0fgnH8r2BZjIz5dJrd4WOihPZ9vwojwELlhyZp7cfuDk+rUJ71v5\nsnNq7EtesB236QfbmW/TQt/al/Wx2rXFS1fbBBWNJ8gCuNtPl4r8k2RcPrSYdqRF\nUapci3akrZlJaujGwXdgJ50q0EsS1827vqEp+dnHrcQbmLlf2hKm6jHj1xiQanK8\n4kHWlWZeJw7/BOn04bJ+kDrSh6wJFzky3HITHYVSnM3Ct5xrqk3Wh6rsBMLthig8\n9ALNwpz1N04Cp6UnO5GmHZKbgJdQc1jndJOMzxt52awkzv3OiV5d9ww6IXLP4NN6\nvf9GHo7L5EiK+NVkzhK5kR5SpWM4ukGt+0FqDrpwfzqbxkG/\n-----END X509 CRL-----",
                  "name": "{{certificateName}}",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing certificate revocation lists (CRL) without affecting other fields.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "digital-certificates.cy.js"
    },
    "edge_application": {
      "totalEndpoints": 39,
      "covered": 2,
      "missing": 37,
      "coveragePercentage": 5,
      "priority": "low",
      "estimatedEffort": 183,
      "missingEndpoints": [
        {
          "name": "Clone an Edge Application",
          "method": "POST",
          "url": "/workspace/applications/{{edgeApplicationId}}/clone",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}/clone",
          "key": "POST /workspace/applications/{{edgeApplicationId}}/clone",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Application by performing a deep copy of an existing Edge Application, including its Cache Settings, Origins, Error Responses, Function Instances, and Rules Engine.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Application",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "GET /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Application in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Application",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "modules": {
                "edge_cache": {
                  "enabled": true
                },
                "functions": {
                  "enabled": false
                },
                "application_accelerator": {
                  "enabled": false
                },
                "image_processor": {
                  "enabled": false
                },
                "tiered_cache": {
                  "enabled": false
                }
              },
              "active": true,
              "debug": false
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "edge_cache": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "application_accelerator": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "image_processor": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    },
                    "tiered_cache": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "edge_cache",
                    "functions",
                    "application_accelerator",
                    "image_processor",
                    "tiered_cache"
                  ]
                },
                "active": {
                  "type": "boolean"
                },
                "debug": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active",
                "debug"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "edge_cache": {
                      "enabled": true
                    },
                    "functions": {
                      "enabled": false
                    },
                    "application_accelerator": {
                      "enabled": false
                    },
                    "image_processor": {
                      "enabled": false
                    },
                    "tiered_cache": {
                      "enabled": false
                    }
                  },
                  "active": true,
                  "debug": false
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "modules": {
                    "edge_cache": {
                      "enabled": true
                    },
                    "functions": {
                      "enabled": false
                    },
                    "application_accelerator": {
                      "enabled": false
                    },
                    "image_processor": {
                      "enabled": false
                    },
                    "tiered_cache": {
                      "enabled": false
                    }
                  },
                  "active": true,
                  "debug": false
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Application. This replaces the entire Edge Application with the new data provided.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Application",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Application without affecting other fields.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Application",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{globalId}",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Application in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Applications Cache Setting",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Cache Setting in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Applications Cache Setting",
          "method": "PUT",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "PUT /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "browser_cache": {
                "behavior": "honor",
                "max_age": 0
              },
              "edge_cache": {
                "behavior": "honor",
                "max_age": 60,
                "caching_for_post_enabled": false,
                "caching_for_options_enabled": false,
                "stale_cache_enabled": true,
                "tiered_cache_enabled": false
              },
              "application_controls": {
                "cache_by_query_string": "ignore",
                "query_string_fields": [],
                "query_string_sort_enabled": false,
                "cache_by_cookies": "ignore",
                "cookie_names": [],
                "adaptive_delivery_action": "ignore",
                "device_group": []
              },
              "slice_controls": {
                "slice_configuration_enabled": true,
                "slice_edge_caching_enabled": true,
                "slice_tiered_caching_enabled": false,
                "slice_configuration_range": 1024
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "browser_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age"
                  ]
                },
                "edge_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    },
                    "caching_for_post_enabled": {
                      "type": "boolean"
                    },
                    "caching_for_options_enabled": {
                      "type": "boolean"
                    },
                    "stale_cache_enabled": {
                      "type": "boolean"
                    },
                    "tiered_cache_enabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age",
                    "caching_for_post_enabled",
                    "caching_for_options_enabled",
                    "stale_cache_enabled",
                    "tiered_cache_enabled"
                  ]
                },
                "application_controls": {
                  "type": "object",
                  "properties": {
                    "cache_by_query_string": {
                      "type": "string"
                    },
                    "query_string_fields": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "query_string_sort_enabled": {
                      "type": "boolean"
                    },
                    "cache_by_cookies": {
                      "type": "string"
                    },
                    "cookie_names": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "adaptive_delivery_action": {
                      "type": "string"
                    },
                    "device_group": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    }
                  },
                  "required": [
                    "cache_by_query_string",
                    "query_string_fields",
                    "query_string_sort_enabled",
                    "cache_by_cookies",
                    "cookie_names",
                    "adaptive_delivery_action",
                    "device_group"
                  ]
                },
                "slice_controls": {
                  "type": "object",
                  "properties": {
                    "slice_configuration_enabled": {
                      "type": "boolean"
                    },
                    "slice_edge_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_tiered_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_configuration_range": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "slice_configuration_enabled",
                    "slice_edge_caching_enabled",
                    "slice_tiered_caching_enabled",
                    "slice_configuration_range"
                  ]
                }
              },
              "required": [
                "name",
                "browser_cache",
                "edge_cache",
                "application_controls",
                "slice_controls"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Cache Setting. This replaces the entire Cache Setting with the new data provided.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Applications Cache Setting",
          "method": "PATCH",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "PATCH /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "browser_cache": {
                "behavior": "honor",
                "max_age": 0
              },
              "edge_cache": {
                "behavior": "honor",
                "max_age": 60,
                "caching_for_post_enabled": false,
                "caching_for_options_enabled": false,
                "stale_cache_enabled": true,
                "tiered_cache_enabled": false
              },
              "application_controls": {
                "cache_by_query_string": "ignore",
                "query_string_fields": [],
                "query_string_sort_enabled": false,
                "cache_by_cookies": "ignore",
                "cookie_names": [],
                "adaptive_delivery_action": "ignore",
                "device_group": []
              },
              "slice_controls": {
                "slice_configuration_enabled": true,
                "slice_edge_caching_enabled": true,
                "slice_tiered_caching_enabled": false,
                "slice_configuration_range": 1024
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "browser_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age"
                  ]
                },
                "edge_cache": {
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "type": "string"
                    },
                    "max_age": {
                      "type": "number"
                    },
                    "caching_for_post_enabled": {
                      "type": "boolean"
                    },
                    "caching_for_options_enabled": {
                      "type": "boolean"
                    },
                    "stale_cache_enabled": {
                      "type": "boolean"
                    },
                    "tiered_cache_enabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "behavior",
                    "max_age",
                    "caching_for_post_enabled",
                    "caching_for_options_enabled",
                    "stale_cache_enabled",
                    "tiered_cache_enabled"
                  ]
                },
                "application_controls": {
                  "type": "object",
                  "properties": {
                    "cache_by_query_string": {
                      "type": "string"
                    },
                    "query_string_fields": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "query_string_sort_enabled": {
                      "type": "boolean"
                    },
                    "cache_by_cookies": {
                      "type": "string"
                    },
                    "cookie_names": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "adaptive_delivery_action": {
                      "type": "string"
                    },
                    "device_group": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    }
                  },
                  "required": [
                    "cache_by_query_string",
                    "query_string_fields",
                    "query_string_sort_enabled",
                    "cache_by_cookies",
                    "cookie_names",
                    "adaptive_delivery_action",
                    "device_group"
                  ]
                },
                "slice_controls": {
                  "type": "object",
                  "properties": {
                    "slice_configuration_enabled": {
                      "type": "boolean"
                    },
                    "slice_edge_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_tiered_caching_enabled": {
                      "type": "boolean"
                    },
                    "slice_configuration_range": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "slice_configuration_enabled",
                    "slice_edge_caching_enabled",
                    "slice_tiered_caching_enabled",
                    "slice_configuration_range"
                  ]
                }
              },
              "required": [
                "name",
                "browser_cache",
                "edge_cache",
                "application_controls",
                "slice_controls"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "browser_cache": {
                    "behavior": "honor",
                    "max_age": 0
                  },
                  "edge_cache": {
                    "behavior": "honor",
                    "max_age": 60,
                    "caching_for_post_enabled": false,
                    "caching_for_options_enabled": false,
                    "stale_cache_enabled": true,
                    "tiered_cache_enabled": false
                  },
                  "application_controls": {
                    "cache_by_query_string": "ignore",
                    "query_string_fields": [],
                    "query_string_sort_enabled": false,
                    "cache_by_cookies": "ignore",
                    "cookie_names": [],
                    "adaptive_delivery_action": "ignore",
                    "device_group": []
                  },
                  "slice_controls": {
                    "slice_configuration_enabled": true,
                    "slice_edge_caching_enabled": true,
                    "slice_tiered_caching_enabled": false,
                    "slice_configuration_range": 1024
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Cache Setting without affecting other fields.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Applications Cache Setting",
          "method": "DELETE",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings/{id}",
          "key": "DELETE /workspace/applications/{{edgeApplicationId}}/cache_settings/{{edgeCacheSettingsId}}",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeCacheSettingsId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Cache Setting in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List all Edge Applications Cache Settings",
          "method": "GET",
          "url": "/workspace/applications/{{edgeApplicationId}}/cache_settings",
          "category": "edge_application",
          "path": "edge_application/applications/{edgeApplicationId}/cache_settings",
          "key": "GET /workspace/applications/{{edgeApplicationId}}/cache_settings",
          "pathParams": [
            {
              "name": "edgeApplicationId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Cache Settings owned by your account.",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "edge-application.cy.js"
    },
    "edge_connector": {
      "totalEndpoints": 6,
      "covered": 0,
      "missing": 6,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 25,
      "missingEndpoints": [
        {
          "name": "Retrieve details of an Edge Connector",
          "method": "GET",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "GET /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Connector in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Connector",
          "method": "PUT",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "PUT /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "live_ingest",
              "name": "putTest",
              "active": true,
              "attributes": {
                "addresses": [],
                "tls": {
                  "policy": "preserve"
                },
                "modules": {
                  "load_balancer_enabled": true,
                  "origin_shield_enabled": true
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "tls": {
                      "type": "object",
                      "properties": {
                        "policy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "policy"
                      ]
                    },
                    "modules": {
                      "type": "object",
                      "properties": {
                        "load_balancer_enabled": {
                          "type": "boolean"
                        },
                        "origin_shield_enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "load_balancer_enabled",
                        "origin_shield_enabled"
                      ]
                    }
                  },
                  "required": [
                    "addresses",
                    "tls",
                    "modules"
                  ]
                }
              },
              "required": [
                "type",
                "name",
                "active",
                "attributes"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "live_ingest",
                  "name": "putTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "live_ingest",
                  "name": "putTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Connector. This replaces the entire Edge Connector with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Connector",
          "method": "PATCH",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "PATCH /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "type": "live_ingest",
              "name": "patchTest",
              "active": true,
              "attributes": {
                "addresses": [],
                "tls": {
                  "policy": "preserve"
                },
                "modules": {
                  "load_balancer_enabled": true,
                  "origin_shield_enabled": true
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "tls": {
                      "type": "object",
                      "properties": {
                        "policy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "policy"
                      ]
                    },
                    "modules": {
                      "type": "object",
                      "properties": {
                        "load_balancer_enabled": {
                          "type": "boolean"
                        },
                        "origin_shield_enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "load_balancer_enabled",
                        "origin_shield_enabled"
                      ]
                    }
                  },
                  "required": [
                    "addresses",
                    "tls",
                    "modules"
                  ]
                }
              },
              "required": [
                "type",
                "name",
                "active",
                "attributes"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "type": "live_ingest",
                  "name": "patchTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "type": "live_ingest",
                  "name": "patchTest",
                  "active": true,
                  "attributes": {
                    "addresses": [],
                    "tls": {
                      "policy": "preserve"
                    },
                    "modules": {
                      "load_balancer_enabled": true,
                      "origin_shield_enabled": true
                    }
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Connector without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Connector",
          "method": "DELETE",
          "url": "/edge_connector/connectors/{{connector_id}}",
          "category": "edge_connector",
          "path": "edge_connector/connectors/{id}",
          "key": "DELETE /edge_connector/connectors/{{connector_id}}",
          "pathParams": [
            {
              "name": "connector_id",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Connector in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Connectors",
          "method": "GET",
          "url": "/edge_connector/connectors",
          "category": "edge_connector",
          "path": "edge_connector/connectors",
          "key": "GET /edge_connector/connectors",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: )",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Connectors owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create an Edge Connector",
          "method": "POST",
          "url": "/edge_connector/connectors",
          "category": "edge_connector",
          "path": "edge_connector/connectors",
          "key": "POST /edge_connector/connectors",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomOriginName}}",
              "active": true,
              "type": "http",
              "attributes": {
                "addresses": [
                  {
                    "active": true,
                    "address": "203.0.113.1",
                    "http_port": 80,
                    "https_port": 443,
                    "modules": {
                      "load_balancer": {
                        "server_role": "primary",
                        "weight": 1
                      }
                    }
                  }
                ],
                "connection_options": {
                  "dns_resolution": "preserve",
                  "transport_policy": "preserve",
                  "http_version_policy": "http1_1",
                  "host": "fake.example.com",
                  "path_prefix": "",
                  "following_redirect": false,
                  "real_ip_header": "X-Real-IP",
                  "real_port_header": "X-Real-PORT"
                },
                "modules": {
                  "load_balancer": {
                    "enabled": true,
                    "config": {
                      "method": "round_robin",
                      "max_retries": 0,
                      "connection_timeout": 60,
                      "read_write_timeout": 120
                    }
                  },
                  "origin_shield": {
                    "enabled": true,
                    "config": {
                      "origin_ip_acl": {
                        "enabled": false
                      },
                      "hmac": {
                        "enabled": false,
                        "config": {
                          "type": "aws4_hmac_sha256",
                          "attributes": {
                            "region": "string",
                            "service": "s3",
                            "access_key": "string",
                            "secret_key": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "address": {
                            "type": "string"
                          },
                          "http_port": {
                            "type": "number"
                          },
                          "https_port": {
                            "type": "number"
                          },
                          "modules": {
                            "type": "object",
                            "properties": {
                              "load_balancer": {
                                "type": "object",
                                "properties": {
                                  "server_role": {
                                    "type": "string"
                                  },
                                  "weight": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "server_role",
                                  "weight"
                                ]
                              }
                            },
                            "required": [
                              "load_balancer"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "address",
                          "http_port",
                          "https_port",
                          "modules"
                        ]
                      }
                    },
                    "connection_options": {
                      "type": "object",
                      "properties": {
                        "dns_resolution": {
                          "type": "string"
                        },
                        "transport_policy": {
                          "type": "string"
                        },
                        "http_version_policy": {
                          "type": "string"
                        },
                        "host": {
                          "type": "string"
                        },
                        "path_prefix": {
                          "type": "string"
                        },
                        "following_redirect": {
                          "type": "boolean"
                        },
                        "real_ip_header": {
                          "type": "string"
                        },
                        "real_port_header": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "dns_resolution",
                        "transport_policy",
                        "http_version_policy",
                        "host",
                        "path_prefix",
                        "following_redirect",
                        "real_ip_header",
                        "real_port_header"
                      ]
                    },
                    "modules": {
                      "type": "object",
                      "properties": {
                        "load_balancer": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "method": {
                                  "type": "string"
                                },
                                "max_retries": {
                                  "type": "number"
                                },
                                "connection_timeout": {
                                  "type": "number"
                                },
                                "read_write_timeout": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "method",
                                "max_retries",
                                "connection_timeout",
                                "read_write_timeout"
                              ]
                            }
                          },
                          "required": [
                            "enabled",
                            "config"
                          ]
                        },
                        "origin_shield": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "origin_ip_acl": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "enabled"
                                  ]
                                },
                                "hmac": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean"
                                    },
                                    "config": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string"
                                        },
                                        "attributes": {
                                          "type": "object",
                                          "properties": {
                                            "region": {
                                              "type": "string"
                                            },
                                            "service": {
                                              "type": "string"
                                            },
                                            "access_key": {
                                              "type": "string"
                                            },
                                            "secret_key": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "region",
                                            "service",
                                            "access_key",
                                            "secret_key"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "attributes"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "enabled",
                                    "config"
                                  ]
                                }
                              },
                              "required": [
                                "origin_ip_acl",
                                "hmac"
                              ]
                            }
                          },
                          "required": [
                            "enabled",
                            "config"
                          ]
                        }
                      },
                      "required": [
                        "load_balancer",
                        "origin_shield"
                      ]
                    }
                  },
                  "required": [
                    "addresses",
                    "connection_options",
                    "modules"
                  ]
                }
              },
              "required": [
                "name",
                "active",
                "type",
                "attributes"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomOriginName}}",
                  "active": true,
                  "type": "http",
                  "attributes": {
                    "addresses": [
                      {
                        "active": true,
                        "address": "203.0.113.1",
                        "http_port": 80,
                        "https_port": 443,
                        "modules": {
                          "load_balancer": {
                            "server_role": "primary",
                            "weight": 1
                          }
                        }
                      }
                    ],
                    "connection_options": {
                      "dns_resolution": "preserve",
                      "transport_policy": "preserve",
                      "http_version_policy": "http1_1",
                      "host": "fake.example.com",
                      "path_prefix": "",
                      "following_redirect": false,
                      "real_ip_header": "X-Real-IP",
                      "real_port_header": "X-Real-PORT"
                    },
                    "modules": {
                      "load_balancer": {
                        "enabled": true,
                        "config": {
                          "method": "round_robin",
                          "max_retries": 0,
                          "connection_timeout": 60,
                          "read_write_timeout": 120
                        }
                      },
                      "origin_shield": {
                        "enabled": true,
                        "config": {
                          "origin_ip_acl": {
                            "enabled": false
                          },
                          "hmac": {
                            "enabled": false,
                            "config": {
                              "type": "aws4_hmac_sha256",
                              "attributes": {
                                "region": "string",
                                "service": "s3",
                                "access_key": "string",
                                "secret_key": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomOriginName}}",
                  "active": true,
                  "type": "http",
                  "attributes": {
                    "addresses": [
                      {
                        "active": true,
                        "address": "203.0.113.1",
                        "http_port": 80,
                        "https_port": 443,
                        "modules": {
                          "load_balancer": {
                            "server_role": "primary",
                            "weight": 1
                          }
                        }
                      }
                    ],
                    "connection_options": {
                      "dns_resolution": "preserve",
                      "transport_policy": "preserve",
                      "http_version_policy": "http1_1",
                      "host": "fake.example.com",
                      "path_prefix": "",
                      "following_redirect": false,
                      "real_ip_header": "X-Real-IP",
                      "real_port_header": "X-Real-PORT"
                    },
                    "modules": {
                      "load_balancer": {
                        "enabled": true,
                        "config": {
                          "method": "round_robin",
                          "max_retries": 0,
                          "connection_timeout": 60,
                          "read_write_timeout": 120
                        }
                      },
                      "origin_shield": {
                        "enabled": true,
                        "config": {
                          "origin_ip_acl": {
                            "enabled": false
                          },
                          "hmac": {
                            "enabled": false,
                            "config": {
                              "type": "aws4_hmac_sha256",
                              "attributes": {
                                "region": "string",
                                "service": "s3",
                                "access_key": "string",
                                "secret_key": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Connector in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "edge-connector.cy.js"
    },
    "edge_firewall": {
      "totalEndpoints": 33,
      "covered": 1,
      "missing": 32,
      "coveragePercentage": 3,
      "priority": "low",
      "estimatedEffort": 151,
      "missingEndpoints": [
        {
          "name": "Clone an Edge Firewall",
          "method": "POST",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/clone",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}/clone",
          "key": "POST /workspace/firewalls/{{edgeFirewallId}}/clone",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "63' IR"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "63' IR"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "63' IR"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new Edge Firewall by performing a deep copy of an existing Edge Firewall, including its Function Instances and Rules Engine.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from an Edge Firewall",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific Edge Firewall in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Firewall",
          "method": "PUT",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "PUT /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "li1D(QLJ;",
              "modules": {
                "functions": {
                  "enabled": true
                }
              },
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "functions"
                  ]
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "li1D(QLJ;",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "li1D(QLJ;",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Firewall. This replaces the entire Edge Firewall with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Firewall",
          "method": "PATCH",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "PATCH /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "JCd",
              "modules": {
                "functions": {
                  "enabled": true
                }
              },
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ]
                    }
                  },
                  "required": [
                    "functions"
                  ]
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "modules",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "JCd",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "JCd",
                  "modules": {
                    "functions": {
                      "enabled": true
                    }
                  },
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Firewall without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Firewall",
          "method": "DELETE",
          "url": "/workspace/firewalls/{{edgeFirewallId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{id}",
          "key": "DELETE /workspace/firewalls/{{edgeFirewallId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific Edge Firewall in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Firewall Function",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Firewall Function Instance in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Firewall Function",
          "method": "PUT",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "PUT /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "function": "{{edgeFunctionId}}",
              "args": {}
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "function": {
                  "type": "string"
                },
                "args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                }
              },
              "required": [
                "name",
                "active",
                "function",
                "args"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Firewall Function Instance. This replaces the entire Function Instance with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Firewall Function",
          "method": "PATCH",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "PATCH /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "active": true,
              "function": "{{edgeFunctionId}}",
              "args": {}
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                },
                "function": {
                  "type": "string"
                },
                "args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                }
              },
              "required": [
                "name",
                "active",
                "function",
                "args"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "active": true,
                  "function": "{{edgeFunctionId}}",
                  "args": {}
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Firewall Function Instance without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Firewall Function",
          "method": "DELETE",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions/{id}",
          "key": "DELETE /workspace/firewalls/{{edgeFirewallId}}/functions/{{edgeFirewallFunctionId}}",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            },
            {
              "name": "edgeFirewallFunctionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Edge Firewall Function Instance in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Firewall Function",
          "method": "GET",
          "url": "/workspace/firewalls/{{edgeFirewallId}}/functions",
          "category": "edge_firewall",
          "path": "edge_firewall/firewalls/{edgeFirewallId}/functions",
          "key": "GET /workspace/firewalls/{{edgeFirewallId}}/functions",
          "pathParams": [
            {
              "name": "edgeFirewallId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, last_editor, last_modified, name, json_args, edge_function, active)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Function Instances for a specific Edge Firewall owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "edge-firewall.cy.js"
    },
    "edge_functions": {
      "totalEndpoints": 6,
      "covered": 1,
      "missing": 5,
      "coveragePercentage": 17,
      "priority": "low",
      "estimatedEffort": 24,
      "missingEndpoints": [
        {
          "name": "Retrieve details of an Edge Function",
          "method": "GET",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "GET /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Function in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Function",
          "method": "PUT",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "PUT /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
              "name": "{{putName}}",
              "language": "javascript",
              "json_args": {},
              "initiator_type": "edge_firewall",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "json_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "initiator_type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "code",
                "name",
                "language",
                "json_args",
                "initiator_type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{putName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{putName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Function. This replaces the entire Edge Function with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Function",
          "method": "PATCH",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "PATCH /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
              "name": "{{patchName}}",
              "language": "javascript",
              "json_args": {},
              "initiator_type": "edge_firewall",
              "active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "json_args": {
                  "type": "object",
                  "properties": {},
                  "required": []
                },
                "initiator_type": {
                  "type": "string"
                },
                "active": {
                  "type": "boolean"
                }
              },
              "required": [
                "code",
                "name",
                "language",
                "json_args",
                "initiator_type",
                "active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{patchName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "code": "async function handleRequest(request) {\n    return new Response('Hello World', {\n        status: 200,\n        headers: {\n            'content-type': 'text/plain',\n        }\n    });\n}",
                  "name": "{{patchName}}",
                  "language": "javascript",
                  "json_args": {},
                  "initiator_type": "edge_firewall",
                  "active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Function without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy an Edge Function",
          "method": "DELETE",
          "url": "/edge_functions/functions/{{functionId}}",
          "category": "edge_functions",
          "path": "edge_functions/functions/{id}",
          "key": "DELETE /edge_functions/functions/{{functionId}}",
          "pathParams": [
            {
              "name": "functionId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy a specific Edge Function in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Edge Functions",
          "method": "GET",
          "url": "/edge_functions/functions",
          "category": "edge_functions",
          "path": "edge_functions/functions",
          "key": "GET /edge_functions/functions",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "vendor",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "last_modified",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, language, json_args, initiator_type, active, last_editor, last_modified, product_version)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "40",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "vendor",
              "description": "A search term.",
              "required": false,
              "type": "string"
            },
            {
              "key": "initiator_type",
              "value": "edge_application",
              "description": "",
              "required": false,
              "type": "string"
            },
            {
              "key": "vendor",
              "value": "support@azion.com",
              "description": "",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Edge Functions owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "edge-functions.cy.js"
    },
    "edge_sql": {
      "totalEndpoints": 5,
      "covered": 0,
      "missing": 5,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 19,
      "missingEndpoints": [
        {
          "name": "Execute a query into a database",
          "method": "POST",
          "url": "/edge_sql/databases/{{databaseId}}/query",
          "category": "edge_sql",
          "path": "edge_sql/databases/{id}/query",
          "key": "POST /edge_sql/databases/{{databaseId}}/query",
          "pathParams": [
            {
              "name": "databaseId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "statements": [
                "INSERT INTO messages (session_id, run_id, input_messages, output_messages, run_metadata, azion_metadata, created_at) VALUES ('0e89f3a9-3ffc-4e07-8663-ac272f9b7c09', '54fcc9c6-42ee-47ad-8905-2c949676d0e2', '{\"role\":\"user\",\"content\":\"hello (current date and time: 2025-05-06T17:09:29.000Z)\"}', 'Hello! How can I assist you today with Azions Edge Computing Platform?', '{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain_core\",\"messages\",\"AIMessageChunk\"],\"kwargs\":{\"content\":\"Hello! How can I assist you today with Azions Edge Computing Platform?\",\"additional_kwargs\":{}},\"response_metadata\":{\"usage\":{\"prompt_tokens\":2123,\"completion_tokens\":18,\"total_tokens\":2141,\"prompt_tokens_details\":{\"cached_tokens\":2048,\"audio_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0,\"audio_tokens\":0,\"accepted_prediction_tokens\":0,\"rejected_prediction_tokens\":0}}},\"tool_call_chunks\":[],\"id\":\"chatcmpl-BUG5JQ8MxvrWkRk2heVUBA9DYOsRn\",\"usage_metadata\":{\"input_tokens\":2123,\"output_tokens\":18,\"total_tokens\":2141,\"input_token_details\":{\"audio\":0,\"cache_read\":2048},\"output_token_details\":{\"audio\":0,\"reasoning\":0}},\"tool_calls\":[],\"invalid_tool_calls\":[]}}', '{\"user_name\":\"\",\"first_name\":\"\",\"last_name\":\"\",\"client_id\":\"\",\"email\":\"\",\"support_plan\":\"\",\"url\":\"\",\"app\":\"azion-copilot-stage\",\"project\":\"azion-copilot-stage\",\"ticket_id\":\"\"}', '2025-05-06T17:09:29.000Z')"
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "statements": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "statements"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "statements": [
                    "INSERT INTO messages (session_id, run_id, input_messages, output_messages, run_metadata, azion_metadata, created_at) VALUES ('0e89f3a9-3ffc-4e07-8663-ac272f9b7c09', '54fcc9c6-42ee-47ad-8905-2c949676d0e2', '{\"role\":\"user\",\"content\":\"hello (current date and time: 2025-05-06T17:09:29.000Z)\"}', 'Hello! How can I assist you today with Azions Edge Computing Platform?', '{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain_core\",\"messages\",\"AIMessageChunk\"],\"kwargs\":{\"content\":\"Hello! How can I assist you today with Azions Edge Computing Platform?\",\"additional_kwargs\":{}},\"response_metadata\":{\"usage\":{\"prompt_tokens\":2123,\"completion_tokens\":18,\"total_tokens\":2141,\"prompt_tokens_details\":{\"cached_tokens\":2048,\"audio_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0,\"audio_tokens\":0,\"accepted_prediction_tokens\":0,\"rejected_prediction_tokens\":0}}},\"tool_call_chunks\":[],\"id\":\"chatcmpl-BUG5JQ8MxvrWkRk2heVUBA9DYOsRn\",\"usage_metadata\":{\"input_tokens\":2123,\"output_tokens\":18,\"total_tokens\":2141,\"input_token_details\":{\"audio\":0,\"cache_read\":2048},\"output_token_details\":{\"audio\":0,\"reasoning\":0}},\"tool_calls\":[],\"invalid_tool_calls\":[]}}', '{\"user_name\":\"\",\"first_name\":\"\",\"last_name\":\"\",\"client_id\":\"\",\"email\":\"\",\"support_plan\":\"\",\"url\":\"\",\"app\":\"azion-copilot-stage\",\"project\":\"azion-copilot-stage\",\"ticket_id\":\"\"}', '2025-05-06T17:09:29.000Z')"
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "statements": [
                    "INSERT INTO messages (session_id, run_id, input_messages, output_messages, run_metadata, azion_metadata, created_at) VALUES ('0e89f3a9-3ffc-4e07-8663-ac272f9b7c09', '54fcc9c6-42ee-47ad-8905-2c949676d0e2', '{\"role\":\"user\",\"content\":\"hello (current date and time: 2025-05-06T17:09:29.000Z)\"}', 'Hello! How can I assist you today with Azions Edge Computing Platform?', '{\"lc\":1,\"type\":\"constructor\",\"id\":[\"langchain_core\",\"messages\",\"AIMessageChunk\"],\"kwargs\":{\"content\":\"Hello! How can I assist you today with Azions Edge Computing Platform?\",\"additional_kwargs\":{}},\"response_metadata\":{\"usage\":{\"prompt_tokens\":2123,\"completion_tokens\":18,\"total_tokens\":2141,\"prompt_tokens_details\":{\"cached_tokens\":2048,\"audio_tokens\":0},\"completion_tokens_details\":{\"reasoning_tokens\":0,\"audio_tokens\":0,\"accepted_prediction_tokens\":0,\"rejected_prediction_tokens\":0}}},\"tool_call_chunks\":[],\"id\":\"chatcmpl-BUG5JQ8MxvrWkRk2heVUBA9DYOsRn\",\"usage_metadata\":{\"input_tokens\":2123,\"output_tokens\":18,\"total_tokens\":2141,\"input_token_details\":{\"audio\":0,\"cache_read\":2048},\"output_token_details\":{\"audio\":0,\"reasoning\":0}},\"tool_calls\":[],\"invalid_tool_calls\":[]}}', '{\"user_name\":\"\",\"first_name\":\"\",\"last_name\":\"\",\"client_id\":\"\",\"email\":\"\",\"support_plan\":\"\",\"url\":\"\",\"app\":\"azion-copilot-stage\",\"project\":\"azion-copilot-stage\",\"ticket_id\":\"\"}', '2025-05-06T17:09:29.000Z')"
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Execute a query into a database for your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a database",
          "method": "GET",
          "url": "/edge_sql/databases/{{databaseId}}",
          "category": "edge_sql",
          "path": "edge_sql/databases/{id}",
          "key": "GET /edge_sql/databases/{{databaseId}}",
          "pathParams": [
            {
              "name": "databaseId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific database in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a database",
          "method": "DELETE",
          "url": "/edge_sql/databases/{{databaseId}}",
          "category": "edge_sql",
          "path": "edge_sql/databases/{id}",
          "key": "DELETE /edge_sql/databases/{{databaseId}}",
          "pathParams": [
            {
              "name": "databaseId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Schedule the destruction of a specific database in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List databases",
          "method": "GET",
          "url": "/edge_sql/databases",
          "category": "edge_sql",
          "path": "edge_sql/databases",
          "key": "GET /edge_sql/databases",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all databases owned by your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a database",
          "method": "POST",
          "url": "/edge_sql/databases",
          "category": "edge_sql",
          "path": "edge_sql/databases",
          "key": "POST /edge_sql/databases",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "{{randomName}}",
              "status": "deletion_failed",
              "is_active": true
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "status",
                "is_active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "{{randomName}}",
                  "status": "deletion_failed",
                  "is_active": true
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "{{randomName}}",
                  "status": "deletion_failed",
                  "is_active": true
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new database for your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "edge-sql.cy.js"
    },
    "edge_storage": {
      "totalEndpoints": 13,
      "covered": 0,
      "missing": 13,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 55,
      "missingEndpoints": [
        {
          "name": "Update bucket info",
          "method": "PATCH",
          "url": "/wrokspace/storage/buckets/{{bucketName}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{name}",
          "key": "PATCH /wrokspace/storage/buckets/{{bucketName}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "edge_access": "read_only"
            },
            "schema": {
              "type": "object",
              "properties": {
                "edge_access": {
                  "type": "string"
                }
              },
              "required": [
                "edge_access"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "edge_access": "read_only"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "edge_access": "read_only"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update bucket information (bucket name cannot be changed)",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete a bucket",
          "method": "DELETE",
          "url": "/worksapce/storage/buckets/{{bucketName}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{name}",
          "key": "DELETE /worksapce/storage/buckets/{{bucketName}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete a specific bucket.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Download object",
          "method": "GET",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "GET /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "content-type",
              "value": "application/octet-stream",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Download the object key from bucket.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create new object key",
          "method": "POST",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "POST /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "bucket-{{$timestamp}}",
              "edge_access": "read_only"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "edge_access": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "edge_access"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "bucket-{{$timestamp}}",
                  "edge_access": "read_only"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "bucket-{{$timestamp}}",
                  "edge_access": "read_only"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new object key in the bucket.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update the object key",
          "method": "PUT",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "PUT /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json; version=3",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "{{mockFileContent}}",
            "schema": {
              "type": "string"
            },
            "examples": [
              {
                "type": "valid",
                "data": "{{mockFileContent}}"
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update the object key from bucket.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete object key",
          "method": "DELETE",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects/{objectKey}",
          "key": "DELETE /workspace/storage/buckets/{{bucketName}}/objects/{{objectKey}}",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            },
            {
              "name": "objectKey",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete an object key from bucket",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List buckets objects",
          "method": "GET",
          "url": "/workspace/storage/buckets/{{bucketName}}/objects",
          "category": "edge_storage",
          "path": "edge_storage/buckets/{bucketName}/objects",
          "key": "GET /workspace/storage/buckets/{{bucketName}}/objects",
          "pathParams": [
            {
              "name": "bucketName",
              "type": "string",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "continuation_token",
              "value": "<string>",
              "description": "A continuation token for the next page of records.",
              "required": false,
              "type": "string"
            },
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "max_object_count",
              "value": "<integer>",
              "description": "Number of results to be returned on the page. Limited to 1000 objects.",
              "required": false,
              "type": "integer"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Content-Type",
              "value": "application/octet-stream",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List buckets objects",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List buckets",
          "method": "GET",
          "url": "/workspace/storage/buckets",
          "category": "edge_storage",
          "path": "edge_storage/buckets",
          "key": "GET /workspace/storage/buckets",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all buckets.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new bucket",
          "method": "POST",
          "url": "/workspace/storage/buckets",
          "category": "edge_storage",
          "path": "edge_storage/buckets",
          "key": "POST /workspace/storage/buckets",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "edge_access": "read_only",
              "name": "{{randomName}}"
            },
            "schema": {
              "type": "object",
              "properties": {
                "edge_access": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "edge_access",
                "name"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "edge_access": "read_only",
                  "name": "{{randomName}}"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "edge_access": "read_only",
                  "name": "{{randomName}}"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new bucket.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a credential",
          "method": "GET",
          "url": "/workspace/storage/credentials/{{credentialId}}",
          "category": "edge_storage",
          "path": "edge_storage/s3-credentials/{accessKey}",
          "key": "GET /workspace/storage/credentials/{{credentialId}}",
          "pathParams": [
            {
              "name": "credentialId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific credential.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "edge-storage.cy.js"
    },
    "iam": {
      "totalEndpoints": 3,
      "covered": 1,
      "missing": 2,
      "coveragePercentage": 33,
      "priority": "high",
      "estimatedEffort": 9,
      "missingEndpoints": [
        {
          "name": "Create a TOTP device",
          "method": "POST",
          "url": "/iam/mfa/totp",
          "category": "iam",
          "path": "iam/mfa/totp",
          "key": "POST /iam/mfa/totp",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": "",
            "schema": null,
            "examples": []
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new TOTP device for your account.",
          "priority": "high",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create User",
          "method": "POST",
          "url": "/iam/users",
          "category": "iam",
          "path": "iam/accounts",
          "key": "POST /iam/users",
          "pathParams": [],
          "queryParams": [],
          "headers": [],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "",
          "priority": "high",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "iam.cy.js"
    },
    "orchestrator": {
      "totalEndpoints": 27,
      "covered": 0,
      "missing": 27,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 120,
      "missingEndpoints": [
        {
          "name": "List Edge Node Groups by id",
          "method": "GET",
          "url": "/orchestrator/edge_nodes/:nodeId/groups?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/groups",
          "key": "GET /orchestrator/edge_nodes/:nodeId/groups?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": true,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Groups of an Edge Node.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Bind Node Group",
          "method": "POST",
          "url": "/orchestrator/edge_nodes/:nodeId/groups",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/groups",
          "key": "POST /orchestrator/edge_nodes/:nodeId/groups",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "<string>",
              "node_group": "<integer>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "node_group": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "node_group"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "<string>",
                  "node_group": "<integer>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "<string>",
                  "node_group": "<integer>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a bind between Node and Group.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Node Service Bind",
          "method": "GET",
          "url": "/orchestrator/edge_nodes/:nodeId/services/:bindId?fields=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services/{bindId}",
          "key": "GET /orchestrator/edge_nodes/:nodeId/services/:bindId?fields=<string>",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            },
            {
              "name": "bindId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Node Service Bind in your account.",
          "priority": "medium",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Unbind Node Service",
          "method": "DELETE",
          "url": "/orchestrator/edge_nodes/:nodeId/services/:bindId",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services/{bindId}",
          "key": "DELETE /orchestrator/edge_nodes/:nodeId/services/:bindId",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            },
            {
              "name": "bindId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Remove the bind between Node and Service.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List Node Services",
          "method": "GET",
          "url": "/orchestrator/edge_nodes/:nodeId/services?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services",
          "key": "GET /orchestrator/edge_nodes/:nodeId/services?fields=<string>&ordering=<string>&page=<integer>&page_size=<integer>&search=<string>",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": true,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": true,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": true,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": true,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all Services from an Edge Node.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Bind Node Service",
          "method": "POST",
          "url": "/edge_orchestrator/edge_nodes/:nodeId/services",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}/services",
          "key": "POST /edge_orchestrator/edge_nodes/:nodeId/services",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "service_id": "<integer>",
              "id": "<integer>",
              "service_name": "$T0mH%j",
              "is_active": "<boolean>"
            },
            "schema": {
              "type": "object",
              "properties": {
                "service_id": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "service_name": {
                  "type": "string"
                },
                "is_active": {
                  "type": "string"
                }
              },
              "required": [
                "service_id",
                "id",
                "service_name",
                "is_active"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "service_id": "<integer>",
                  "id": "<integer>",
                  "service_name": "$T0mH%j",
                  "is_active": "<boolean>"
                }
              },
              {
                "type": "minimal",
                "data": {
                  "service_id": "<integer>",
                  "id": "<integer>",
                  "service_name": "$T0mH%j",
                  "is_active": "<boolean>"
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a bind between Node and Service.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details of an Edge Node",
          "method": "GET",
          "url": "/edge_orchestrator/edge_nodes/:nodeId/",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "GET /edge_orchestrator/edge_nodes/:nodeId/",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details of a specific Edge Node in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update an Edge Node",
          "method": "PUT",
          "url": "/orchestrator/edge_nodes/:nodeId/",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "PUT /orchestrator/edge_nodes/:nodeId/",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "V&0M@<Ud0",
              "status": "waiting_authorization",
              "modules": {
                "utd4": {},
                "laborumf0": {},
                "fugiat_28": {},
                "dolord": {}
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "utd4": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "laborumf0": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "fugiat_28": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "dolord": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": [
                    "utd4",
                    "laborumf0",
                    "fugiat_28",
                    "dolord"
                  ]
                }
              },
              "required": [
                "name",
                "status",
                "modules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "V&0M@<Ud0",
                  "status": "waiting_authorization",
                  "modules": {
                    "utd4": {},
                    "laborumf0": {},
                    "fugiat_28": {},
                    "dolord": {}
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "V&0M@<Ud0",
                  "status": "waiting_authorization",
                  "modules": {
                    "utd4": {},
                    "laborumf0": {},
                    "fugiat_28": {},
                    "dolord": {}
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing Edge Node. This replaces the entire Edge Node with the new data provided.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update an Edge Node",
          "method": "PATCH",
          "url": "/orchestrator/edge_nodes/:nodeId/",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "PATCH /orchestrator/edge_nodes/:nodeId/",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "name": "pB8`HPy",
              "status": "authorized",
              "modules": {
                "reprehenderitbdc": {},
                "dolor8": {}
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "modules": {
                  "type": "object",
                  "properties": {
                    "reprehenderitbdc": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "dolor8": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": [
                    "reprehenderitbdc",
                    "dolor8"
                  ]
                }
              },
              "required": [
                "name",
                "status",
                "modules"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "name": "pB8`HPy",
                  "status": "authorized",
                  "modules": {
                    "reprehenderitbdc": {},
                    "dolor8": {}
                  }
                }
              },
              {
                "type": "minimal",
                "data": {
                  "name": "pB8`HPy",
                  "status": "authorized",
                  "modules": {
                    "reprehenderitbdc": {},
                    "dolor8": {}
                  }
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing Edge Node without affecting other fields.",
          "priority": "low",
          "complexity": "medium",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Delete an Edge Node",
          "method": "DELETE",
          "url": "/orchestrator/edge_nodes/:nodeId",
          "category": "orchestrator",
          "path": "orchestrator/edge_nodes/{nodeId}",
          "key": "DELETE /orchestrator/edge_nodes/:nodeId",
          "pathParams": [
            {
              "name": "nodeId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Delete an Edge Node.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "orchestrator.cy.js"
    },
    "identity": {
      "totalEndpoints": 7,
      "covered": 0,
      "missing": 7,
      "coveragePercentage": 0,
      "priority": "low",
      "estimatedEffort": 32,
      "missingEndpoints": [
        {
          "name": "Unlock user",
          "method": "DELETE",
          "url": "/identity/users/{{userId}}/lockout",
          "category": "identity",
          "path": "identity/users/{id}/lockout",
          "key": "DELETE /identity/users/{{userId}}/lockout",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destroy Lockout info from user.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Retrieve details from a user",
          "method": "GET",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "GET /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Retrieve details from a specific user in your account.",
          "priority": "medium",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Update a user",
          "method": "PUT",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "PUT /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update an existing user. This replaces the entire user with the new data provided.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Partially update a user",
          "method": "PATCH",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "PATCH /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Update one or more fields of an existing user without affecting other fields.",
          "priority": "low",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Destroy a user",
          "method": "DELETE",
          "url": "/identity/users/{{userId}}",
          "category": "identity",
          "path": "identity/users/{id}",
          "key": "DELETE /identity/users/{{userId}}",
          "pathParams": [
            {
              "name": "userId",
              "type": "integer",
              "required": true
            }
          ],
          "queryParams": [],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Destruction of a specific user in your account.",
          "priority": "low",
          "complexity": "low",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_path_params",
              "description": "Test with invalid path parameters"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "List of the account users",
          "method": "GET",
          "url": "/identity/users",
          "category": "identity",
          "path": "identity/users",
          "key": "GET /identity/users",
          "pathParams": [],
          "queryParams": [
            {
              "key": "fields",
              "value": "<string>",
              "description": "Comma-separated list of field names to include in the response.",
              "required": false,
              "type": "string"
            },
            {
              "key": "locked",
              "value": "%*!",
              "description": "Filters users by locked status.\n - `true`: Returns only locked users.\n - `false`: Returns only unlocked users.\n - (not provided): Returns all users.",
              "required": false,
              "type": "string"
            },
            {
              "key": "ordering",
              "value": "<string>",
              "description": "Which field to use when ordering the results.\n(Valid fields: id, last_login, first_name, last_name, email, country_call_code, mobile, date_joined, timezone, language)",
              "required": false,
              "type": "string"
            },
            {
              "key": "page",
              "value": "<integer>",
              "description": "A page number within the paginated result set.",
              "required": false,
              "type": "string"
            },
            {
              "key": "page_size",
              "value": "<integer>",
              "description": "A numeric value that indicates the number of items per page.",
              "required": false,
              "type": "integer"
            },
            {
              "key": "search",
              "value": "<string>",
              "description": "A search term.",
              "required": false,
              "type": "string"
            }
          ],
          "headers": [
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": null,
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "List all users owned by your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "query_param_validation",
              "description": "Test query parameter validation"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        },
        {
          "name": "Create a new user",
          "method": "POST",
          "url": "/identity/users",
          "category": "identity",
          "path": "identity/users",
          "key": "POST /identity/users",
          "pathParams": [],
          "queryParams": [],
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "",
              "required": true
            },
            {
              "key": "Accept",
              "value": "application/json",
              "description": "",
              "required": true
            }
          ],
          "requestBody": {
            "mode": "raw",
            "content": {
              "email": "{{email}}",
              "first_name": "{{first_name}}",
              "last_name": "{{last_name}}",
              "phone": "{{phone}}",
              "country_call_code": "{{country_call_code}}",
              "mobile": "{{mobile}}",
              "timezone": "{{timezone}}",
              "two_factor_enabled": false,
              "is_account_owner": false,
              "teams_ids": [
                3521
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "country_call_code": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "two_factor_enabled": {
                  "type": "boolean"
                },
                "is_account_owner": {
                  "type": "boolean"
                },
                "teams_ids": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "required": [
                "email",
                "first_name",
                "last_name",
                "phone",
                "country_call_code",
                "mobile",
                "timezone",
                "two_factor_enabled",
                "is_account_owner",
                "teams_ids"
              ]
            },
            "examples": [
              {
                "type": "valid",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              },
              {
                "type": "minimal",
                "data": {
                  "email": "{{email}}",
                  "first_name": "{{first_name}}",
                  "last_name": "{{last_name}}",
                  "phone": "{{phone}}",
                  "country_call_code": "{{country_call_code}}",
                  "mobile": "{{mobile}}",
                  "timezone": "{{timezone}}",
                  "two_factor_enabled": false,
                  "is_account_owner": false,
                  "teams_ids": [
                    3521
                  ]
                }
              }
            ]
          },
          "tests": [
            {
              "type": "test",
              "script": "// Enhanced Test Script - Auto-generated from PROD patterns\n\n// Basic status code validation\npm.test('Status code is successful', function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\n});\n\n// Response time validation\npm.test('Response time is acceptable', function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\n// Validate response structure for GET requests\npm.test('Response has valid structure', function () {\n    const response = pm.response.json();\n    pm.expect(response).to.be.an('object');\n    \n    if (response.results) {\n        pm.expect(response.results).to.be.an('array');\n    }\n    if (response.data) {\n        pm.expect(response.data).to.be.an('object');\n    }\n});\n\n// Enhanced error handling\nif (pm.response.code >= 400) {\n    console.log('❌ Request failed with status:', pm.response.code);\n    console.log('Response:', pm.response.text());\n    \n    // Try to extract error details\n    try {\n        const errorResponse = pm.response.json();\n        if (errorResponse.errors) {\n            console.log('Error details:', errorResponse.errors);\n        }\n    } catch (e) {\n        console.log('Could not parse error response');\n    }\n}",
              "assertions": [
                "pm.expect(pm.response.code).to.be",
                "pm.expect(pm.response.responseTime).to.be",
                "pm.expect(response).to.be",
                "pm.expect(response.results).to.be",
                "pm.expect(response.data).to.be"
              ]
            }
          ],
          "hasAuth": true,
          "description": "Create a new user for your account.",
          "priority": "medium",
          "complexity": "high",
          "testVariations": [
            {
              "type": "happy_path",
              "description": "Valid request with all required parameters"
            },
            {
              "type": "invalid_body",
              "description": "Test with invalid request body"
            },
            {
              "type": "missing_required_fields",
              "description": "Test with missing required fields"
            },
            {
              "type": "unauthorized",
              "description": "Test unauthorized access"
            },
            {
              "type": "not_found",
              "description": "Test resource not found"
            }
          ]
        }
      ],
      "recommendedTestFile": "identity.cy.js"
    }
  },
  "implementationOrder": [
    {
      "category": "iam",
      "priority": "high",
      "endpoints": 3,
      "effort": 15
    },
    {
      "category": "account",
      "priority": "high",
      "endpoints": 10,
      "effort": 40
    },
    {
      "category": "auth",
      "priority": "high",
      "endpoints": 18,
      "effort": 66
    },
    {
      "category": "digital_certificates",
      "priority": "medium",
      "endpoints": 14,
      "effort": 59
    },
    {
      "category": "edge_sql",
      "priority": "low",
      "endpoints": 5,
      "effort": 19
    },
    {
      "category": "edge_connector",
      "priority": "low",
      "endpoints": 6,
      "effort": 25
    },
    {
      "category": "payments",
      "priority": "low",
      "endpoints": 7,
      "effort": 28
    },
    {
      "category": "edge_functions",
      "priority": "low",
      "endpoints": 6,
      "effort": 29
    },
    {
      "category": "identity",
      "priority": "low",
      "endpoints": 7,
      "effort": 32
    },
    {
      "category": "data_stream",
      "priority": "low",
      "endpoints": 13,
      "effort": 55
    },
    {
      "category": "edge_storage",
      "priority": "low",
      "endpoints": 13,
      "effort": 55
    },
    {
      "category": "dns",
      "priority": "low",
      "endpoints": 15,
      "effort": 67
    },
    {
      "category": "workspace",
      "priority": "low",
      "endpoints": 23,
      "effort": 97
    },
    {
      "category": "orchestrator",
      "priority": "low",
      "endpoints": 27,
      "effort": 120
    },
    {
      "category": "edge_firewall",
      "priority": "low",
      "endpoints": 33,
      "effort": 155
    },
    {
      "category": "edge_application",
      "priority": "low",
      "endpoints": 39,
      "effort": 191
    }
  ]
}