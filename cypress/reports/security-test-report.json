{
  "stats": {
    "suites": 6,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-24T13:25:25.096Z",
    "end": "2025-09-24T13:25:26.637Z",
    "duration": 1541,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "db94a0b3-4da9-40b3-a909-ac29c4d329f1",
      "title": "",
      "fullFile": "cypress/e2e/api/domain-purge-security-validation.cy.js",
      "file": "cypress/e2e/api/domain-purge-security-validation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e46bc730-dd50-48d0-8ba7-5a3279d12084",
          "title": "Domain Purge Security Validation - Stage Environment",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "01540df7-443b-418b-a616-f7fe6ba9a7e4",
              "title": "Phase 1: Setup Test Workloads in Account A",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should create workload 1 with domain: test-security-domain-1.example.com",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 1: Setup Test Workloads in Account A Should create workload 1 with domain: test-security-domain-1.example.com",
                  "timedOut": null,
                  "duration": 228,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const workloadData = {\n  name: `security-test-workload-${index + 1}`,\n  domain_name: domain,\n  active: true,\n  delivery_protocol: 'http,https',\n  origin_type: 'single_origin',\n  address: 'httpbin.org',\n  origin_protocol_policy: 'preserve',\n  host_header: domain,\n  browser_cache_settings: 'honor',\n  cdn_cache_settings: 'honor'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/edge_applications`,\n  headers: {\n    'Authorization': `Token ${accountAToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: workloadData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'setup',\n    action: 'create_workload',\n    domain: domain,\n    accountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/edge_applications`,\n      body: workloadData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status >= 200 && response.status < 300) {\n    var _response$body, _response$body2;\n    createdWorkloads.push({\n      id: ((_response$body = response.body) === null || _response$body === void 0 || (_response$body = _response$body.results) === null || _response$body === void 0 ? void 0 : _response$body.id) || ((_response$body2 = response.body) === null || _response$body2 === void 0 || (_response$body2 = _response$body2.data) === null || _response$body2 === void 0 ? void 0 : _response$body2.id),\n      domain: domain,\n      accountId: accountAId\n    });\n    cy.log(`✅ Created workload for domain: ${domain}`);\n  } else {\n    cy.log(`⚠️ Failed to create workload for domain: ${domain} - Status: ${response.status}`);\n  }\n});",
                  "err": {},
                  "uuid": "3d9a0f92-11e5-4e08-bc4f-ee5b7294afb8",
                  "parentUUID": "01540df7-443b-418b-a616-f7fe6ba9a7e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should create workload 2 with domain: test-security-domain-2.azion.net",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 1: Setup Test Workloads in Account A Should create workload 2 with domain: test-security-domain-2.azion.net",
                  "timedOut": null,
                  "duration": 119,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const workloadData = {\n  name: `security-test-workload-${index + 1}`,\n  domain_name: domain,\n  active: true,\n  delivery_protocol: 'http,https',\n  origin_type: 'single_origin',\n  address: 'httpbin.org',\n  origin_protocol_policy: 'preserve',\n  host_header: domain,\n  browser_cache_settings: 'honor',\n  cdn_cache_settings: 'honor'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/edge_applications`,\n  headers: {\n    'Authorization': `Token ${accountAToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: workloadData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'setup',\n    action: 'create_workload',\n    domain: domain,\n    accountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/edge_applications`,\n      body: workloadData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status >= 200 && response.status < 300) {\n    var _response$body, _response$body2;\n    createdWorkloads.push({\n      id: ((_response$body = response.body) === null || _response$body === void 0 || (_response$body = _response$body.results) === null || _response$body === void 0 ? void 0 : _response$body.id) || ((_response$body2 = response.body) === null || _response$body2 === void 0 || (_response$body2 = _response$body2.data) === null || _response$body2 === void 0 ? void 0 : _response$body2.id),\n      domain: domain,\n      accountId: accountAId\n    });\n    cy.log(`✅ Created workload for domain: ${domain}`);\n  } else {\n    cy.log(`⚠️ Failed to create workload for domain: ${domain} - Status: ${response.status}`);\n  }\n});",
                  "err": {},
                  "uuid": "9f487c63-17a1-4856-9a78-9aa88bca6a8c",
                  "parentUUID": "01540df7-443b-418b-a616-f7fe6ba9a7e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should create workload 3 with domain: vulnerable-domain.test.com",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 1: Setup Test Workloads in Account A Should create workload 3 with domain: vulnerable-domain.test.com",
                  "timedOut": null,
                  "duration": 117,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const workloadData = {\n  name: `security-test-workload-${index + 1}`,\n  domain_name: domain,\n  active: true,\n  delivery_protocol: 'http,https',\n  origin_type: 'single_origin',\n  address: 'httpbin.org',\n  origin_protocol_policy: 'preserve',\n  host_header: domain,\n  browser_cache_settings: 'honor',\n  cdn_cache_settings: 'honor'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/edge_applications`,\n  headers: {\n    'Authorization': `Token ${accountAToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: workloadData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'setup',\n    action: 'create_workload',\n    domain: domain,\n    accountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/edge_applications`,\n      body: workloadData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status >= 200 && response.status < 300) {\n    var _response$body, _response$body2;\n    createdWorkloads.push({\n      id: ((_response$body = response.body) === null || _response$body === void 0 || (_response$body = _response$body.results) === null || _response$body === void 0 ? void 0 : _response$body.id) || ((_response$body2 = response.body) === null || _response$body2 === void 0 || (_response$body2 = _response$body2.data) === null || _response$body2 === void 0 ? void 0 : _response$body2.id),\n      domain: domain,\n      accountId: accountAId\n    });\n    cy.log(`✅ Created workload for domain: ${domain}`);\n  } else {\n    cy.log(`⚠️ Failed to create workload for domain: ${domain} - Status: ${response.status}`);\n  }\n});",
                  "err": {},
                  "uuid": "2d40afe9-48c5-43f0-8a1b-1c3eb557f2e6",
                  "parentUUID": "01540df7-443b-418b-a616-f7fe6ba9a7e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should create workload 4 with domain: cross-account-test.domain.org",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 1: Setup Test Workloads in Account A Should create workload 4 with domain: cross-account-test.domain.org",
                  "timedOut": null,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const workloadData = {\n  name: `security-test-workload-${index + 1}`,\n  domain_name: domain,\n  active: true,\n  delivery_protocol: 'http,https',\n  origin_type: 'single_origin',\n  address: 'httpbin.org',\n  origin_protocol_policy: 'preserve',\n  host_header: domain,\n  browser_cache_settings: 'honor',\n  cdn_cache_settings: 'honor'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/edge_applications`,\n  headers: {\n    'Authorization': `Token ${accountAToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: workloadData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'setup',\n    action: 'create_workload',\n    domain: domain,\n    accountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/edge_applications`,\n      body: workloadData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status >= 200 && response.status < 300) {\n    var _response$body, _response$body2;\n    createdWorkloads.push({\n      id: ((_response$body = response.body) === null || _response$body === void 0 || (_response$body = _response$body.results) === null || _response$body === void 0 ? void 0 : _response$body.id) || ((_response$body2 = response.body) === null || _response$body2 === void 0 || (_response$body2 = _response$body2.data) === null || _response$body2 === void 0 ? void 0 : _response$body2.id),\n      domain: domain,\n      accountId: accountAId\n    });\n    cy.log(`✅ Created workload for domain: ${domain}`);\n  } else {\n    cy.log(`⚠️ Failed to create workload for domain: ${domain} - Status: ${response.status}`);\n  }\n});",
                  "err": {},
                  "uuid": "1ce06631-d1eb-4ce7-aec1-1fdc450de7be",
                  "parentUUID": "01540df7-443b-418b-a616-f7fe6ba9a7e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d9a0f92-11e5-4e08-bc4f-ee5b7294afb8",
                "9f487c63-17a1-4856-9a78-9aa88bca6a8c",
                "2d40afe9-48c5-43f0-8a1b-1c3eb557f2e6",
                "1ce06631-d1eb-4ce7-aec1-1fdc450de7be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 547,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5eca3c60-3478-431d-9264-fee00ea91216",
              "title": "Phase 2: Cross-Account Purge Vulnerability Tests",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should BLOCK purge attempt from Account B on domain: test-security-domain-1.example.com",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 2: Cross-Account Purge Vulnerability Tests Should BLOCK purge attempt from Account B on domain: test-security-domain-1.example.com",
                  "timedOut": null,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = {\n  urls: [`https://${domain}/test-path`],\n  method: 'delete'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/purge/url`,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'cross_account_test',\n    action: 'purge_attempt',\n    domain: domain,\n    attackerAccountId: accountBId,\n    targetAccountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/purge/url`,\n      body: purgeData,\n      headers: {\n        'Authorization': `Token ${accountBToken}`\n      }\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  // Security validation: Should be blocked (401, 403, or 404)\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: Purge correctly blocked for domain ${domain} - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    // CRITICAL VULNERABILITY FOUND\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: 'Cross-Account Domain Purge',\n      domain: domain,\n      description: `Account B successfully purged content for domain ${domain} owned by Account A`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Unauthorized users can purge content from domains they do not own',\n      recommendation: 'Implement domain ownership validation before allowing purge operations'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: Cross-account purge succeeded for domain ${domain}`);\n    cy.log(`Response Status: ${response.status}`);\n    cy.log(`Response Body: ${JSON.stringify(response.body)}`);\n  } else {\n    testReport.summary.securityFailed++;\n    cy.log(`❓ UNEXPECTED: Purge attempt returned status ${response.status} for domain ${domain}`);\n  }\n});",
                  "err": {},
                  "uuid": "7e9d21bb-dae3-4e86-bedc-258c5e1d1d5d",
                  "parentUUID": "5eca3c60-3478-431d-9264-fee00ea91216",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should BLOCK purge attempt from Account B on domain: test-security-domain-2.azion.net",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 2: Cross-Account Purge Vulnerability Tests Should BLOCK purge attempt from Account B on domain: test-security-domain-2.azion.net",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = {\n  urls: [`https://${domain}/test-path`],\n  method: 'delete'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/purge/url`,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'cross_account_test',\n    action: 'purge_attempt',\n    domain: domain,\n    attackerAccountId: accountBId,\n    targetAccountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/purge/url`,\n      body: purgeData,\n      headers: {\n        'Authorization': `Token ${accountBToken}`\n      }\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  // Security validation: Should be blocked (401, 403, or 404)\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: Purge correctly blocked for domain ${domain} - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    // CRITICAL VULNERABILITY FOUND\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: 'Cross-Account Domain Purge',\n      domain: domain,\n      description: `Account B successfully purged content for domain ${domain} owned by Account A`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Unauthorized users can purge content from domains they do not own',\n      recommendation: 'Implement domain ownership validation before allowing purge operations'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: Cross-account purge succeeded for domain ${domain}`);\n    cy.log(`Response Status: ${response.status}`);\n    cy.log(`Response Body: ${JSON.stringify(response.body)}`);\n  } else {\n    testReport.summary.securityFailed++;\n    cy.log(`❓ UNEXPECTED: Purge attempt returned status ${response.status} for domain ${domain}`);\n  }\n});",
                  "err": {},
                  "uuid": "d290a308-a5dc-4a13-be04-d59af9e581f6",
                  "parentUUID": "5eca3c60-3478-431d-9264-fee00ea91216",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should BLOCK purge attempt from Account B on domain: vulnerable-domain.test.com",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 2: Cross-Account Purge Vulnerability Tests Should BLOCK purge attempt from Account B on domain: vulnerable-domain.test.com",
                  "timedOut": null,
                  "duration": 45,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = {\n  urls: [`https://${domain}/test-path`],\n  method: 'delete'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/purge/url`,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'cross_account_test',\n    action: 'purge_attempt',\n    domain: domain,\n    attackerAccountId: accountBId,\n    targetAccountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/purge/url`,\n      body: purgeData,\n      headers: {\n        'Authorization': `Token ${accountBToken}`\n      }\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  // Security validation: Should be blocked (401, 403, or 404)\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: Purge correctly blocked for domain ${domain} - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    // CRITICAL VULNERABILITY FOUND\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: 'Cross-Account Domain Purge',\n      domain: domain,\n      description: `Account B successfully purged content for domain ${domain} owned by Account A`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Unauthorized users can purge content from domains they do not own',\n      recommendation: 'Implement domain ownership validation before allowing purge operations'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: Cross-account purge succeeded for domain ${domain}`);\n    cy.log(`Response Status: ${response.status}`);\n    cy.log(`Response Body: ${JSON.stringify(response.body)}`);\n  } else {\n    testReport.summary.securityFailed++;\n    cy.log(`❓ UNEXPECTED: Purge attempt returned status ${response.status} for domain ${domain}`);\n  }\n});",
                  "err": {},
                  "uuid": "a897d4ee-f4e1-467e-b2a9-028e500ca125",
                  "parentUUID": "5eca3c60-3478-431d-9264-fee00ea91216",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should BLOCK purge attempt from Account B on domain: cross-account-test.domain.org",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 2: Cross-Account Purge Vulnerability Tests Should BLOCK purge attempt from Account B on domain: cross-account-test.domain.org",
                  "timedOut": null,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = {\n  urls: [`https://${domain}/test-path`],\n  method: 'delete'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/purge/url`,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'cross_account_test',\n    action: 'purge_attempt',\n    domain: domain,\n    attackerAccountId: accountBId,\n    targetAccountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/purge/url`,\n      body: purgeData,\n      headers: {\n        'Authorization': `Token ${accountBToken}`\n      }\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  // Security validation: Should be blocked (401, 403, or 404)\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: Purge correctly blocked for domain ${domain} - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    // CRITICAL VULNERABILITY FOUND\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: 'Cross-Account Domain Purge',\n      domain: domain,\n      description: `Account B successfully purged content for domain ${domain} owned by Account A`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Unauthorized users can purge content from domains they do not own',\n      recommendation: 'Implement domain ownership validation before allowing purge operations'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: Cross-account purge succeeded for domain ${domain}`);\n    cy.log(`Response Status: ${response.status}`);\n    cy.log(`Response Body: ${JSON.stringify(response.body)}`);\n  } else {\n    testReport.summary.securityFailed++;\n    cy.log(`❓ UNEXPECTED: Purge attempt returned status ${response.status} for domain ${domain}`);\n  }\n});",
                  "err": {},
                  "uuid": "b89378d0-f3d8-4dc0-a939-99fd34cd79ce",
                  "parentUUID": "5eca3c60-3478-431d-9264-fee00ea91216",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e9d21bb-dae3-4e86-bedc-258c5e1d1d5d",
                "d290a308-a5dc-4a13-be04-d59af9e581f6",
                "a897d4ee-f4e1-467e-b2a9-028e500ca125",
                "b89378d0-f3d8-4dc0-a939-99fd34cd79ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 212,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d27f620b-b1ef-44a2-a5c5-e8a85d84ef49",
              "title": "Phase 3: Wildcard and Advanced Attack Vectors",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should block advanced attack: Wildcard Domain Purge",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 3: Wildcard and Advanced Attack Vectors Should block advanced attack: Wildcard Domain Purge",
                  "timedOut": null,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = attack.urls ? {\n  urls: attack.urls,\n  method: 'delete'\n} : {\n  cache_key: attack.cache_key,\n  method: 'delete'\n};\nconst endpoint = attack.cache_key ? `${baseUrl}/purge/cachekey` : `${baseUrl}/purge/url`;\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'advanced_attacks',\n    action: attack.name.toLowerCase().replace(/\\s+/g, '_'),\n    description: attack.description,\n    attackerAccountId: accountBId,\n    request: {\n      method: 'POST',\n      url: endpoint,\n      body: purgeData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: ${attack.name} correctly blocked - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: attack.name,\n      description: `${attack.description} - Attack succeeded`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Advanced purge attack vectors are not properly blocked',\n      recommendation: 'Implement comprehensive input validation and domain ownership checks'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: ${attack.name} succeeded`);\n  }\n});",
                  "err": {},
                  "uuid": "6994f843-9842-4383-bb78-3bc40d80fba9",
                  "parentUUID": "d27f620b-b1ef-44a2-a5c5-e8a85d84ef49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should block advanced attack: Path Traversal Purge",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 3: Wildcard and Advanced Attack Vectors Should block advanced attack: Path Traversal Purge",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = attack.urls ? {\n  urls: attack.urls,\n  method: 'delete'\n} : {\n  cache_key: attack.cache_key,\n  method: 'delete'\n};\nconst endpoint = attack.cache_key ? `${baseUrl}/purge/cachekey` : `${baseUrl}/purge/url`;\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'advanced_attacks',\n    action: attack.name.toLowerCase().replace(/\\s+/g, '_'),\n    description: attack.description,\n    attackerAccountId: accountBId,\n    request: {\n      method: 'POST',\n      url: endpoint,\n      body: purgeData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: ${attack.name} correctly blocked - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: attack.name,\n      description: `${attack.description} - Attack succeeded`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Advanced purge attack vectors are not properly blocked',\n      recommendation: 'Implement comprehensive input validation and domain ownership checks'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: ${attack.name} succeeded`);\n  }\n});",
                  "err": {},
                  "uuid": "a37b2ba9-8a6f-49c7-a446-f7f45ddfb735",
                  "parentUUID": "d27f620b-b1ef-44a2-a5c5-e8a85d84ef49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should block advanced attack: Multiple Domain Purge",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 3: Wildcard and Advanced Attack Vectors Should block advanced attack: Multiple Domain Purge",
                  "timedOut": null,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = attack.urls ? {\n  urls: attack.urls,\n  method: 'delete'\n} : {\n  cache_key: attack.cache_key,\n  method: 'delete'\n};\nconst endpoint = attack.cache_key ? `${baseUrl}/purge/cachekey` : `${baseUrl}/purge/url`;\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'advanced_attacks',\n    action: attack.name.toLowerCase().replace(/\\s+/g, '_'),\n    description: attack.description,\n    attackerAccountId: accountBId,\n    request: {\n      method: 'POST',\n      url: endpoint,\n      body: purgeData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: ${attack.name} correctly blocked - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: attack.name,\n      description: `${attack.description} - Attack succeeded`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Advanced purge attack vectors are not properly blocked',\n      recommendation: 'Implement comprehensive input validation and domain ownership checks'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: ${attack.name} succeeded`);\n  }\n});",
                  "err": {},
                  "uuid": "9b9dce02-95b0-46d2-9674-f6e9a5822024",
                  "parentUUID": "d27f620b-b1ef-44a2-a5c5-e8a85d84ef49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should block advanced attack: Cache Key Manipulation",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 3: Wildcard and Advanced Attack Vectors Should block advanced attack: Cache Key Manipulation",
                  "timedOut": null,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const purgeData = attack.urls ? {\n  urls: attack.urls,\n  method: 'delete'\n} : {\n  cache_key: attack.cache_key,\n  method: 'delete'\n};\nconst endpoint = attack.cache_key ? `${baseUrl}/purge/cachekey` : `${baseUrl}/purge/url`;\ncy.request({\n  method: 'POST',\n  url: endpoint,\n  headers: {\n    'Authorization': `Token ${accountBToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'advanced_attacks',\n    action: attack.name.toLowerCase().replace(/\\s+/g, '_'),\n    description: attack.description,\n    attackerAccountId: accountBId,\n    request: {\n      method: 'POST',\n      url: endpoint,\n      body: purgeData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status === 401 || response.status === 403 || response.status === 404) {\n    testReport.summary.securityPassed++;\n    cy.log(`✅ SECURITY PASS: ${attack.name} correctly blocked - Status: ${response.status}`);\n  } else if (response.status >= 200 && response.status < 300) {\n    const vulnerability = {\n      severity: 'CRITICAL',\n      type: attack.name,\n      description: `${attack.description} - Attack succeeded`,\n      evidence: {\n        request: scenario.request,\n        response: scenario.response\n      },\n      impact: 'Advanced purge attack vectors are not properly blocked',\n      recommendation: 'Implement comprehensive input validation and domain ownership checks'\n    };\n    testReport.vulnerabilities.push(vulnerability);\n    testReport.summary.vulnerabilitiesFound++;\n    testReport.summary.securityFailed++;\n    cy.log(`🚨 CRITICAL VULNERABILITY: ${attack.name} succeeded`);\n  }\n});",
                  "err": {},
                  "uuid": "505b1ed0-4bb3-4a13-b4d0-aa624d3653aa",
                  "parentUUID": "d27f620b-b1ef-44a2-a5c5-e8a85d84ef49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6994f843-9842-4383-bb78-3bc40d80fba9",
                "a37b2ba9-8a6f-49c7-a446-f7f45ddfb735",
                "9b9dce02-95b0-46d2-9674-f6e9a5822024",
                "505b1ed0-4bb3-4a13-b4d0-aa624d3653aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6659d219-725b-40d9-9335-ac4d6d59f25d",
              "title": "Phase 4: Legitimate Purge Operations (Account A)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should allow legitimate purge from domain owner (Account A)",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 4: Legitimate Purge Operations (Account A) Should allow legitimate purge from domain owner (Account A)",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const domain = testDomains[0];\nconst purgeData = {\n  urls: [`https://${domain}/legitimate-test`],\n  method: 'delete'\n};\ncy.request({\n  method: 'POST',\n  url: `${baseUrl}/purge/url`,\n  headers: {\n    'Authorization': `Token ${accountAToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: purgeData,\n  failOnStatusCode: false\n}).then(response => {\n  const scenario = {\n    phase: 'legitimate_operations',\n    action: 'owner_purge',\n    domain: domain,\n    accountId: accountAId,\n    request: {\n      method: 'POST',\n      url: `${baseUrl}/purge/url`,\n      body: purgeData\n    },\n    response: {\n      status: response.status,\n      body: response.body\n    },\n    timestamp: new Date().toISOString()\n  };\n  testReport.scenarios.push(scenario);\n  if (response.status >= 200 && response.status < 300) {\n    cy.log(`✅ LEGITIMATE: Domain owner can purge own domain ${domain}`);\n  } else {\n    cy.log(`⚠️ ISSUE: Domain owner cannot purge own domain ${domain} - Status: ${response.status}`);\n  }\n});",
                  "err": {},
                  "uuid": "b103ed89-cefd-4f7f-a2fb-78aac02186ba",
                  "parentUUID": "6659d219-725b-40d9-9335-ac4d6d59f25d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b103ed89-cefd-4f7f-a2fb-78aac02186ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ccf284f-15da-4a8e-ae0a-a233c3b1d5ea",
              "title": "Phase 5: Cleanup and Final Report",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should cleanup created workloads",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 5: Cleanup and Final Report Should cleanup created workloads",
                  "timedOut": null,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "createdWorkloads.forEach(workload => {\n  if (workload.id) {\n    cy.request({\n      method: 'DELETE',\n      url: `${baseUrl}/edge_applications/${workload.id}`,\n      headers: {\n        'Authorization': `Token ${accountAToken}`\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      cy.log(`Cleanup: Deleted workload ${workload.id} for domain ${workload.domain}`);\n    });\n  }\n});",
                  "err": {},
                  "uuid": "cfa402a2-6def-4beb-be29-cbd223ff4b0a",
                  "parentUUID": "8ccf284f-15da-4a8e-ae0a-a233c3b1d5ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should generate final security report",
                  "fullTitle": "Domain Purge Security Validation - Stage Environment Phase 5: Cleanup and Final Report Should generate final security report",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.log('📋 FINAL SECURITY REPORT:');\ncy.log(`🔍 Total Test Scenarios: ${testReport.scenarios.length}`);\ncy.log(`🚨 Critical Vulnerabilities: ${testReport.vulnerabilities.length}`);\ncy.log(`✅ Security Tests Passed: ${testReport.summary.securityPassed}`);\ncy.log(`❌ Security Tests Failed: ${testReport.summary.securityFailed}`);\nif (testReport.vulnerabilities.length > 0) {\n  cy.log('🚨 VULNERABILITIES FOUND:');\n  testReport.vulnerabilities.forEach((vuln, index) => {\n    cy.log(`${index + 1}. ${vuln.type}: ${vuln.description}`);\n  });\n}\n// Assert that no critical vulnerabilities were found\nif (testReport.vulnerabilities.length > 0) {\n  cy.log('⚠️ SECURITY TEST RESULT: VULNERABILITIES DETECTED');\n  // Don't fail the test to allow report generation\n} else {\n  cy.log('✅ SECURITY TEST RESULT: NO VULNERABILITIES DETECTED');\n}",
                  "err": {},
                  "uuid": "05d56fda-2a17-402d-8fa1-662fa429f1a1",
                  "parentUUID": "8ccf284f-15da-4a8e-ae0a-a233c3b1d5ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfa402a2-6def-4beb-be29-cbd223ff4b0a",
                "05d56fda-2a17-402d-8fa1-662fa429f1a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "security-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "reportFilename": "security-test-report"
      },
      "version": "6.3.0"
    }
  }
}