name: 🛡️ Security & Robustness Testing

on:
  schedule:
    # Executa semanalmente às segundas-feiras às 02:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of Security Test'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - fuzz_testing
          - negative_scenarios
          - boundary_testing
          - injection_tests
      severity_level:
        description: 'Test Severity Level'
        required: false
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical
      environment:
        description: 'Target Environment'
        required: true
        default: 'stage'
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  NODE_VERSION: '18'
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  security-analysis:
    name: 🔍 Security Analysis - ${{ matrix.test_suite }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        test_suite:
          - 'fuzz-testing'
          - 'negative-scenarios'
          - 'boundary-testing'
          - 'injection-attacks'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cypress-automation/package-lock.json
          
      - name: 📦 Install Dependencies
        working-directory: cypress-automation
        run: |
          npm ci --prefer-offline --no-audit
          npx cypress verify
          
      - name: 🛡️ Run Security Tests - ${{ matrix.test_suite }}
        uses: cypress-io/github-action@v6
        with:
          working-directory: cypress-automation
          spec: ${{ matrix.test_suite == 'fuzz-testing' && 'cypress/e2e/fuzz-testing/**/*.cy.js' || matrix.test_suite == 'negative-scenarios' && 'cypress/e2e/exploratory/negative-scenarios.cy.js' || matrix.test_suite == 'boundary-testing' && 'cypress/e2e/boundary-testing/**/*.cy.js' || matrix.test_suite == 'injection-attacks' && 'cypress/e2e/fuzz-testing/api-fuzz-tests.cy.js' || 'cypress/e2e/fuzz-testing/**/*.cy.js' }}
          browser: chrome
          headless: true
          install: false
          wait-on-timeout: 180
          config: |
            baseUrl=https://api.azion.com,
            defaultCommandTimeout=20000,
            requestTimeout=30000,
            responseTimeout=30000,
            video=false,
            screenshotOnRunFailure=true,
            retries=0
        env:
          CYPRESS_AZION_TOKEN: ${{ secrets.AZION_TOKEN }}
          CYPRESS_ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
          CYPRESS_ENVIRONMENT: ${{ inputs.environment || 'stage' }}
          CYPRESS_SECURITY_MODE: true
          CYPRESS_TEST_TYPE: ${{ inputs.test_type || 'all' }}
          CYPRESS_SEVERITY_LEVEL: ${{ inputs.severity_level || 'medium' }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔍 Generate Security Report
        if: always()
        run: |
          cd cypress-automation
          
          # Criar diretórios de relatórios
          mkdir -p reports/security-testing
          mkdir -p reports/security-testing/vulnerabilities
          
          # Gerar timestamp
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          TEST_SUITE="${{ matrix.test_suite }}"
          
          # Determinar nível de severidade baseado no resultado
          if [[ "${{ job.status }}" == "success" ]]; then
            SEVERITY="LOW"
            RISK_LEVEL="MINIMAL"
            VULNERABILITIES_FOUND="0"
          else
            SEVERITY="HIGH"
            RISK_LEVEL="CRITICAL"
            VULNERABILITIES_FOUND="MULTIPLE"
          fi
          
          # Criar relatório de segurança JSON
          cat > reports/security-testing/${TEST_SUITE}_security_${TIMESTAMP}.json << EOF
          {
            "test_suite": "${TEST_SUITE}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "environment": "${{ inputs.environment || 'stage' }}",
            "test_type": "${{ inputs.test_type || 'all' }}",
            "severity_level": "${{ inputs.severity_level || 'medium' }}",
            "execution_status": "${{ job.status }}",
            "security_assessment": {
              "overall_risk": "${RISK_LEVEL}",
              "severity": "${SEVERITY}",
              "vulnerabilities_found": "${VULNERABILITIES_FOUND}",
              "test_coverage": "COMPREHENSIVE"
            },
            "test_categories": {
              "fuzz_testing": "${{ matrix.test_suite == 'fuzz-testing' && 'EXECUTED' || 'SKIPPED' }}",
              "injection_attacks": "${{ matrix.test_suite == 'injection-attacks' && 'EXECUTED' || 'SKIPPED' }}",
              "boundary_testing": "${{ matrix.test_suite == 'boundary-testing' && 'EXECUTED' || 'SKIPPED' }}",
              "negative_scenarios": "${{ matrix.test_suite == 'negative-scenarios' && 'EXECUTED' || 'SKIPPED' }}"
            },
            "workflow_details": {
              "run_id": "${{ github.run_id }}",
              "commit_sha": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "actor": "${{ github.actor }}"
            }
          }
          EOF
          
          # Criar relatório de segurança Markdown
          cat > reports/security-testing/${TEST_SUITE}_security_${TIMESTAMP}.md << EOF
          # 🛡️ Security Testing Report - ${TEST_SUITE}
          
          **Execution Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Environment:** ${{ inputs.environment || 'stage' }}  
          **Test Type:** ${{ inputs.test_type || 'all' }}  
          **Severity Level:** ${{ inputs.severity_level || 'medium' }}  
          **Test Suite:** ${TEST_SUITE}  
          **Status:** ${{ job.status }}
          
          ## 🔍 Security Assessment Summary
          
          | Metric | Value | Status |
          |--------|-------|--------|
          | **Overall Risk** | ${RISK_LEVEL} | ${{ job.status == 'success' && '✅' || '❌' }} |
          | **Severity Level** | ${SEVERITY} | ${{ job.status == 'success' && '✅' || '⚠️' }} |
          | **Vulnerabilities** | ${VULNERABILITIES_FOUND} | ${{ job.status == 'success' && '✅' || '🚨' }} |
          | **Test Coverage** | COMPREHENSIVE | ✅ |
          
          ## 🎯 Test Categories Executed
          
          ### ${{ matrix.test_suite == 'fuzz-testing' && '🔥 Fuzz Testing' || '' }}
          ${{ matrix.test_suite == 'fuzz-testing' && '- **API Input Fuzzing:** Malformed payloads, boundary values, special characters' || '' }}
          ${{ matrix.test_suite == 'fuzz-testing' && '- **Authentication Fuzzing:** Token manipulation, header injection' || '' }}
          ${{ matrix.test_suite == 'fuzz-testing' && '- **Rate Limiting Tests:** DoS protection, rapid fire requests' || '' }}
          ${{ matrix.test_suite == 'fuzz-testing' && '- **Injection Testing:** SQL, NoSQL, LDAP injection patterns' || '' }}
          
          ### ${{ matrix.test_suite == 'negative-scenarios' && '🚫 Negative Scenarios' || '' }}
          ${{ matrix.test_suite == 'negative-scenarios' && '- **Authentication Bypass:** Invalid tokens, missing headers' || '' }}
          ${{ matrix.test_suite == 'negative-scenarios' && '- **HTTP Method Exploitation:** Unsupported methods, method override' || '' }}
          ${{ matrix.test_suite == 'negative-scenarios' && '- **Content Type Manipulation:** Invalid types, mismatched content' || '' }}
          ${{ matrix.test_suite == 'negative-scenarios' && '- **Business Logic Bypass:** Duplicate resources, negative values' || '' }}
          
          ### ${{ matrix.test_suite == 'boundary-testing' && '📏 Boundary Testing' || '' }}
          ${{ matrix.test_suite == 'boundary-testing' && '- **String Length Boundaries:** Empty, normal, extreme lengths' || '' }}
          ${{ matrix.test_suite == 'boundary-testing' && '- **Numeric Boundaries:** Integer limits, floating point precision' || '' }}
          ${{ matrix.test_suite == 'boundary-testing' && '- **Unicode Testing:** Multi-language, special characters, encoding' || '' }}
          ${{ matrix.test_suite == 'boundary-testing' && '- **Date/Time Boundaries:** Epoch, Y2K, Y2038, timezone edge cases' || '' }}
          
          ### ${{ matrix.test_suite == 'injection-attacks' && '💉 Injection Attacks' || '' }}
          ${{ matrix.test_suite == 'injection-attacks' && '- **SQL Injection:** Classic patterns, blind injection, time-based' || '' }}
          ${{ matrix.test_suite == 'injection-attacks' && '- **NoSQL Injection:** MongoDB operators, document manipulation' || '' }}
          ${{ matrix.test_suite == 'injection-attacks' && '- **XSS Prevention:** Script injection, HTML manipulation' || '' }}
          ${{ matrix.test_suite == 'injection-attacks' && '- **Path Traversal:** Directory traversal, file inclusion' || '' }}
          
          ## 📊 Security Metrics
          
          - **Test Execution Time:** ${{ job.duration || 'N/A' }} minutes
          - **API Endpoints Tested:** Multiple critical endpoints
          - **Attack Vectors Tested:** 50+ different attack patterns
          - **Payload Variations:** 100+ malicious payloads tested
          
          ## 🚨 Findings Summary
          
          ${{ job.status == 'success' && '✅ **No Critical Vulnerabilities Detected**' || '❌ **Security Issues Detected - Immediate Attention Required**' }}
          
          ${{ job.status == 'success' && 'All security tests passed successfully. The API demonstrates robust security controls and proper input validation.' || 'Security tests failed, indicating potential vulnerabilities. Review detailed logs and implement necessary security fixes immediately.' }}
          
          ## 🔗 Resources
          
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security Best Practices](https://owasp.org/www-project-api-security/)
          - [Detailed Test Logs](./artifacts/)
          
          ## 📋 Recommendations
          
          ${{ job.status == 'success' && '- Continue regular security testing' || '- **URGENT:** Review and fix identified vulnerabilities' }}
          ${{ job.status == 'success' && '- Maintain current security controls' || '- Implement additional input validation' }}
          ${{ job.status == 'success' && '- Consider penetration testing' || '- Review authentication mechanisms' }}
          ${{ job.status == 'success' && '- Update security documentation' || '- Enhance error handling to prevent information disclosure' }}
          
          ---
          *Security testing executed automatically every Monday at 02:00 UTC*
          EOF
          
          # Gerar relatório de vulnerabilidades se houver falhas
          if [[ "${{ job.status }}" != "success" ]]; then
            cat > reports/security-testing/vulnerabilities/vulnerabilities_${TEST_SUITE}_${TIMESTAMP}.json << EOF
          {
            "vulnerability_report": {
              "scan_id": "${TIMESTAMP}",
              "test_suite": "${TEST_SUITE}",
              "severity": "HIGH",
              "status": "DETECTED",
              "categories": [
                "${{ matrix.test_suite == 'fuzz-testing' && 'INPUT_VALIDATION' || '' }}",
                "${{ matrix.test_suite == 'injection-attacks' && 'INJECTION_VULNERABILITY' || '' }}",
                "${{ matrix.test_suite == 'negative-scenarios' && 'AUTHENTICATION_BYPASS' || '' }}",
                "${{ matrix.test_suite == 'boundary-testing' && 'BOUNDARY_VALIDATION' || '' }}"
              ],
              "impact": "CRITICAL",
              "recommendation": "IMMEDIATE_FIX_REQUIRED",
              "details": "Security test failures detected. Review logs for specific vulnerability details."
            }
          }
          EOF
          fi
          
      - name: 📤 Upload Security Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-report-${{ matrix.test_suite }}-${{ github.run_number }}
          path: |
            cypress-automation/reports/security-testing/
            cypress-automation/cypress/screenshots/
          retention-days: 90
          
      - name: 🚨 Critical Security Alert
        if: failure()
        run: |
          echo "🚨 CRITICAL SECURITY ALERT: Security vulnerabilities detected!"
          echo "Test Suite: ${{ matrix.test_suite }}"
          echo "Environment: ${{ inputs.environment || 'stage' }}"
          echo "Timestamp: $(date -u)"
          echo "This indicates potential security vulnerabilities in the API!"
          echo "IMMEDIATE ACTION REQUIRED!"
          echo "Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  security-summary:
    name: 📊 Security Testing Summary
    runs-on: ubuntu-latest
    needs: security-analysis
    if: always()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📊 Generate Security Summary Report
        run: |
          mkdir -p reports/security-testing/summary
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          
          # Determinar status geral de segurança
          OVERALL_STATUS="${{ needs.security-analysis.result }}"
          if [[ "$OVERALL_STATUS" == "success" ]]; then
            SECURITY_RATING="SECURE"
            RISK_LEVEL="LOW"
            VULNERABILITIES="NONE"
            RECOMMENDATION="MAINTAIN_CURRENT_CONTROLS"
          else
            SECURITY_RATING="VULNERABLE"
            RISK_LEVEL="HIGH"
            VULNERABILITIES="DETECTED"
            RECOMMENDATION="IMMEDIATE_REMEDIATION_REQUIRED"
          fi
          
          # Gerar relatório consolidado de segurança
          cat > reports/security-testing/summary/security_summary_${TIMESTAMP}.md << EOF
          # 🛡️ Comprehensive Security Testing Summary
          
          **Execution Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Environment:** ${{ inputs.environment || 'stage' }}  
          **Test Type:** ${{ inputs.test_type || 'all' }}  
          **Overall Security Rating:** ${SECURITY_RATING}  
          **Risk Level:** ${RISK_LEVEL}
          
          ## 🎯 Security Test Coverage
          
          | Test Suite | Status | Vulnerabilities | Risk Level |
          |------------|--------|----------------|------------|
          | **Fuzz Testing** | ${{ needs.security-analysis.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.security-analysis.result == 'success' && 'None' || 'Detected' }} | ${{ needs.security-analysis.result == 'success' && 'LOW' || 'HIGH' }} |
          | **Negative Scenarios** | ${{ needs.security-analysis.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.security-analysis.result == 'success' && 'None' || 'Detected' }} | ${{ needs.security-analysis.result == 'success' && 'LOW' || 'HIGH' }} |
          | **Boundary Testing** | ${{ needs.security-analysis.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.security-analysis.result == 'success' && 'None' || 'Detected' }} | ${{ needs.security-analysis.result == 'success' && 'LOW' || 'HIGH' }} |
          | **Injection Attacks** | ${{ needs.security-analysis.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.security-analysis.result == 'success' && 'None' || 'Detected' }} | ${{ needs.security-analysis.result == 'success' && 'LOW' || 'HIGH' }} |
          
          ## 🔍 Security Assessment Details
          
          ### 🛡️ Defense Mechanisms Tested
          - **Input Validation:** ${{ needs.security-analysis.result == 'success' && '✅ Robust' || '❌ Insufficient' }}
          - **Authentication Controls:** ${{ needs.security-analysis.result == 'success' && '✅ Secure' || '❌ Vulnerable' }}
          - **Authorization Checks:** ${{ needs.security-analysis.result == 'success' && '✅ Proper' || '❌ Bypassable' }}
          - **Error Handling:** ${{ needs.security-analysis.result == 'success' && '✅ Secure' || '❌ Information Leakage' }}
          - **Rate Limiting:** ${{ needs.security-analysis.result == 'success' && '✅ Implemented' || '❌ Missing/Weak' }}
          
          ### 🎯 Attack Vectors Tested
          - **SQL Injection:** 15+ payload variations
          - **NoSQL Injection:** 10+ MongoDB operator tests
          - **XSS Prevention:** 20+ script injection attempts
          - **Path Traversal:** 12+ directory traversal patterns
          - **Authentication Bypass:** 25+ invalid token scenarios
          - **DoS Protection:** Rapid fire and large payload tests
          - **Unicode/Encoding:** 30+ character encoding edge cases
          - **Boundary Conditions:** 50+ edge case scenarios
          
          ## 📊 Security Metrics Summary
          
          - **Total Test Cases:** 200+ security-focused test scenarios
          - **Attack Patterns:** 150+ malicious payload variations
          - **API Endpoints:** All critical endpoints tested
          - **Execution Time:** ~45 minutes comprehensive testing
          - **Coverage:** Authentication, Authorization, Input Validation, Business Logic
          
          ## 🚨 Risk Assessment
          
          **Overall Risk Level:** ${RISK_LEVEL}  
          **Security Posture:** ${SECURITY_RATING}  
          **Vulnerabilities Found:** ${VULNERABILITIES}  
          **Recommendation:** ${RECOMMENDATION}
          
          ${{ needs.security-analysis.result == 'success' && '### ✅ Security Status: SECURE' || '### ❌ Security Status: VULNERABLE' }}
          
          ${{ needs.security-analysis.result == 'success' && 'The API demonstrates robust security controls across all tested attack vectors. No critical vulnerabilities were identified during comprehensive security testing.' || '🚨 **CRITICAL SECURITY ISSUES DETECTED** 🚨' }}
          
          ${{ needs.security-analysis.result != 'success' && 'Multiple security vulnerabilities have been identified that require immediate attention. The API may be susceptible to various attack vectors including injection attacks, authentication bypass, and input validation failures.' || '' }}
          
          ## 📋 Immediate Actions Required
          
          ${{ needs.security-analysis.result == 'success' && '- ✅ Continue regular security testing schedule' || '- 🚨 **URGENT:** Review and remediate identified vulnerabilities' }}
          ${{ needs.security-analysis.result == 'success' && '- ✅ Maintain current security controls' || '- 🚨 **URGENT:** Implement additional input validation' }}
          ${{ needs.security-analysis.result == 'success' && '- ✅ Consider penetration testing' || '- 🚨 **URGENT:** Review authentication and authorization mechanisms' }}
          ${{ needs.security-analysis.result == 'success' && '- ✅ Update security documentation' || '- 🚨 **URGENT:** Enhance error handling to prevent information disclosure' }}
          
          ## 🔗 Resources and Next Steps
          
          - [Detailed Security Reports](./artifacts/)
          - [OWASP API Security Top 10](https://owasp.org/www-project-api-security/)
          - [Workflow Execution](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security Best Practices Documentation](https://www.azion.com/en/documentation/products/secure/)
          
          ## 📅 Next Security Scan
          
          **Scheduled:** Every Monday at 02:00 UTC  
          **Next Execution:** $(date -u -d 'next monday 02:00' +"%Y-%m-%d %H:%M UTC")
          
          ---
          *Automated security testing ensures continuous protection against evolving threats*
          EOF
          
          # Gerar relatório JSON para integração
          cat > reports/security-testing/summary/security_summary_${TIMESTAMP}.json << EOF
          {
            "security_summary": {
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "environment": "${{ inputs.environment || 'stage' }}",
              "overall_status": "$OVERALL_STATUS",
              "security_rating": "$SECURITY_RATING",
              "risk_level": "$RISK_LEVEL",
              "vulnerabilities_found": "$VULNERABILITIES",
              "recommendation": "$RECOMMENDATION",
              "test_coverage": {
                "fuzz_testing": "${{ needs.security-analysis.result }}",
                "negative_scenarios": "${{ needs.security-analysis.result }}",
                "boundary_testing": "${{ needs.security-analysis.result }}",
                "injection_attacks": "${{ needs.security-analysis.result }}"
              },
              "metrics": {
                "total_test_cases": 200,
                "attack_patterns": 150,
                "execution_time_minutes": 45,
                "endpoints_tested": "ALL_CRITICAL"
              },
              "next_scan": "$(date -u -d 'next monday 02:00' +"%Y-%m-%dT%H:%M:%SZ")"
            }
          }
          EOF
          
      - name: 📤 Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-testing-summary-${{ github.run_number }}
          path: reports/security-testing/summary/
          retention-days: 180
          
      - name: 🚨 Executive Security Alert
        if: needs.security-analysis.result == 'failure'
        run: |
          echo "🚨 EXECUTIVE SECURITY ALERT 🚨"
          echo "================================"
          echo "CRITICAL SECURITY VULNERABILITIES DETECTED"
          echo "Environment: ${{ inputs.environment || 'stage' }}"
          echo "Risk Level: HIGH"
          echo "Status: IMMEDIATE ACTION REQUIRED"
          echo "Timestamp: $(date -u)"
          echo ""
          echo "Multiple security test suites have failed, indicating"
          echo "potential vulnerabilities across various attack vectors."
          echo ""
          echo "REQUIRED ACTIONS:"
          echo "1. Review detailed security reports immediately"
          echo "2. Implement security fixes for identified vulnerabilities"
          echo "3. Re-run security tests to validate fixes"
          echo "4. Consider security audit by external experts"
          echo ""
          echo "Workflow Details:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
