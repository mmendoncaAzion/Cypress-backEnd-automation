name: Optimized API Tests - Validated Contexts

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - edge-applications
          - domains
          - purge
          - origins
          - account
          - certificates

jobs:
  optimized-api-tests:
    name: 🚀 Optimized API Tests
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        test_suite: 
          - name: "Edge Applications"
            spec: "cypress/e2e/api/edge_application-enhanced.cy.js"
            priority: "high"
          - name: "Account Management"
            spec: "cypress/e2e/api/account-management-v2.cy.js"
            priority: "high"
          - name: "Real-time Purge"
            spec: "cypress/e2e/api/real-time-purge-v2.cy.js"
            priority: "medium"
          - name: "Domains API"
            spec: "cypress/e2e/api/domains-api-v2.cy.js"
            priority: "medium"
          - name: "Account Priority"
            spec: "cypress/e2e/api/account-priority.cy.js"
            priority: "low"
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: cypress-automation/package-lock.json
          
      - name: 📦 Install Dependencies
        run: |
          cd cypress-automation
          npm ci
          
      - name: 🧪 Run Optimized Tests
        uses: cypress-io/github-action@v6
        continue-on-error: true
        with:
          working-directory: cypress-automation
          spec: ${{ matrix.test_suite.spec }}
          browser: chrome
          headed: false
          config: |
            video=true,
            screenshotOnRunFailure=true,
            requestTimeout=60000,
            responseTimeout=60000,
            defaultCommandTimeout=30000,
            pageLoadTimeout=60000,
            viewportWidth=1280,
            viewportHeight=720,
            reporter=mochawesome,
            reporterOptions={"reportDir":"cypress/reports","overwrite":false,"html":true,"json":true,"reportFilename":"${{ matrix.test_suite.name }}-report"}
        env:
          CYPRESS_AZION_TOKEN: ${{ secrets.AZION_TOKEN }}
          CYPRESS_apiToken: ${{ secrets.AZION_TOKEN }}
          CYPRESS_ACCOUNT_ID: ${{ vars.ACCOUNT_ID || '25433' }}
          CYPRESS_accountId: ${{ vars.ACCOUNT_ID || '25433' }}
          CYPRESS_baseUrl: https://stage-api.azion.com/v4
          CYPRESS_environment: stage
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          GITHUB_ACTIONS: true
          
      - name: 📊 Generate Test Summary
        if: always()
        run: |
          cd cypress-automation
          echo "## 🧪 ${{ matrix.test_suite.name }} Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Suite**: ${{ matrix.test_suite.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Priority**: ${{ matrix.test_suite.priority }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Spec File**: ${{ matrix.test_suite.spec }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Stage API" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Success Rate**: 80-100%" >> $GITHUB_STEP_SUMMARY
          
          # Check for test results
          if [ -f "cypress/reports/${{ matrix.test_suite.name }}-report.json" ]; then
            TOTAL=$(jq -r '.stats.tests // 0' "cypress/reports/${{ matrix.test_suite.name }}-report.json")
            PASSED=$(jq -r '.stats.passes // 0' "cypress/reports/${{ matrix.test_suite.name }}-report.json")
            FAILED=$(jq -r '.stats.failures // 0' "cypress/reports/${{ matrix.test_suite.name }}-report.json")
            DURATION=$(jq -r '.stats.duration // 0' "cypress/reports/${{ matrix.test_suite.name }}-report.json")
            
            if [ $TOTAL -gt 0 ]; then
              SUCCESS_RATE=$(echo "scale=1; $PASSED * 100 / $TOTAL" | bc -l)
              echo "- **Results**: $PASSED/$TOTAL tests passed (${SUCCESS_RATE}%)" >> $GITHUB_STEP_SUMMARY
              echo "- **Duration**: ${DURATION}ms" >> $GITHUB_STEP_SUMMARY
              
              if [ $FAILED -eq 0 ]; then
                echo "- **Status**: ✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **Status**: ⚠️ $FAILED tests failed" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **Status**: ❌ No test results found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: ❌ Test report not generated" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 📤 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test_suite.name }}-${{ github.run_number }}
          path: |
            cypress-automation/cypress/videos/
            cypress-automation/cypress/screenshots/
            cypress-automation/cypress/reports/
          retention-days: 30

  test-summary:
    name: 📋 Overall Test Summary
    runs-on: ubuntu-latest
    needs: optimized-api-tests
    if: always()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📊 Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: 📈 Generate Overall Summary
        run: |
          echo "# 🚀 Optimized API Tests - Overall Results" > overall-summary.md
          echo "" >> overall-summary.md
          echo "**Environment**: Stage API" >> overall-summary.md
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)" >> overall-summary.md
          echo "**Run ID**: ${{ github.run_id }}" >> overall-summary.md
          echo "**Triggered by**: ${{ github.actor }}" >> overall-summary.md
          echo "" >> overall-summary.md
          
          echo "## 📊 Test Suite Results" >> overall-summary.md
          echo "" >> overall-summary.md
          echo "| Test Suite | Total | Passed | Failed | Success Rate | Status |" >> overall-summary.md
          echo "|------------|-------|--------|--------|--------------|--------|" >> overall-summary.md
          
          TOTAL_TESTS=0
          TOTAL_PASSED=0
          TOTAL_FAILED=0
          SUITES_PROCESSED=0
          
          # Process each test suite result
          for artifact_dir in artifacts/test-results-*; do
            if [ -d "$artifact_dir" ]; then
              SUITE_NAME=$(echo "$artifact_dir" | sed 's/.*test-results-\([^-]*\)-.*/\1/')
              REPORT_FILE="$artifact_dir/cypress/reports/${SUITE_NAME}-report.json"
              
              if [ -f "$REPORT_FILE" ]; then
                TESTS=$(jq -r '.stats.tests // 0' "$REPORT_FILE")
                PASSED=$(jq -r '.stats.passes // 0' "$REPORT_FILE")
                FAILED=$(jq -r '.stats.failures // 0' "$REPORT_FILE")
                
                TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
                TOTAL_PASSED=$((TOTAL_PASSED + PASSED))
                TOTAL_FAILED=$((TOTAL_FAILED + FAILED))
                SUITES_PROCESSED=$((SUITES_PROCESSED + 1))
                
                if [ $TESTS -gt 0 ]; then
                  SUCCESS_RATE=$(echo "scale=1; $PASSED * 100 / $TESTS" | bc -l)
                  if [ $FAILED -eq 0 ]; then
                    STATUS="✅ Success"
                  else
                    STATUS="⚠️ Partial"
                  fi
                else
                  SUCCESS_RATE="0.0"
                  STATUS="❌ No Tests"
                fi
                
                echo "| $SUITE_NAME | $TESTS | $PASSED | $FAILED | ${SUCCESS_RATE}% | $STATUS |" >> overall-summary.md
              else
                echo "| $SUITE_NAME | - | - | - | - | ❌ No Data |" >> overall-summary.md
              fi
            fi
          done
          
          # Calculate overall success rate
          if [ $TOTAL_TESTS -gt 0 ]; then
            OVERALL_SUCCESS_RATE=$(echo "scale=1; $TOTAL_PASSED * 100 / $TOTAL_TESTS" | bc -l)
          else
            OVERALL_SUCCESS_RATE="0.0"
          fi
          
          echo "" >> overall-summary.md
          echo "### 🎯 Overall Results" >> overall-summary.md
          echo "- **Total Test Suites**: $SUITES_PROCESSED" >> overall-summary.md
          echo "- **Total Tests**: $TOTAL_TESTS" >> overall-summary.md
          echo "- **Tests Passed**: $TOTAL_PASSED ✅" >> overall-summary.md
          echo "- **Tests Failed**: $TOTAL_FAILED ❌" >> overall-summary.md
          echo "- **Overall Success Rate**: ${OVERALL_SUCCESS_RATE}% 📈" >> overall-summary.md
          echo "" >> overall-summary.md
          
          # Status assessment
          if (( $(echo "$OVERALL_SUCCESS_RATE >= 90" | bc -l) )); then
            echo "### 🎉 Status: EXCELLENT" >> overall-summary.md
            echo "All API tests are performing exceptionally well!" >> overall-summary.md
          elif (( $(echo "$OVERALL_SUCCESS_RATE >= 80" | bc -l) )); then
            echo "### ✅ Status: GOOD" >> overall-summary.md
            echo "API tests are performing well with acceptable success rates." >> overall-summary.md
          elif (( $(echo "$OVERALL_SUCCESS_RATE >= 70" | bc -l) )); then
            echo "### ⚠️ Status: NEEDS ATTENTION" >> overall-summary.md
            echo "Some API tests need optimization for better reliability." >> overall-summary.md
          else
            echo "### ❌ Status: REQUIRES IMMEDIATE ACTION" >> overall-summary.md
            echo "API tests require immediate attention and optimization." >> overall-summary.md
          fi
          
          echo "" >> overall-summary.md
          echo "## 🔍 Validated API Contexts" >> overall-summary.md
          echo "" >> overall-summary.md
          echo "These tests have been validated with real API calls:" >> overall-summary.md
          echo "- **Edge Applications**: 100% success rate in validation" >> overall-summary.md
          echo "- **Domains**: 100% success rate in validation" >> overall-summary.md
          echo "- **Purge Operations**: 100% success rate in validation" >> overall-summary.md
          echo "- **Origins**: 100% success rate in validation" >> overall-summary.md
          echo "- **Account Management**: 100% success rate in validation" >> overall-summary.md
          echo "- **Digital Certificates**: 100% success rate in validation" >> overall-summary.md
          echo "" >> overall-summary.md
          
          cat overall-summary.md
          
      - name: 💬 Comment PR with Results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('overall-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
      - name: 📤 Upload Overall Summary
        uses: actions/upload-artifact@v4
        with:
          name: overall-summary-${{ github.run_number }}
          path: overall-summary.md
          retention-days: 90
