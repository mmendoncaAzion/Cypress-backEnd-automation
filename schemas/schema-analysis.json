{
  "metadata": {
    "timestamp": "2025-09-23T14:40:01.451Z",
    "openApiVersion": "3.0.0",
    "title": "API Reference V4 | Azion",
    "version": "4.0.0"
  },
  "schemas": {
    "USERSDefaultErrorResponse": {
      "name": "USERSDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHDefaultErrorResponse": {
      "name": "AUTHDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHEffectEnum": {
      "name": "AUTHEffectEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHJSONAPIErrorObject": {
      "name": "AUTHJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/AUTHJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHJSONAPIErrorResponse": {
      "name": "AUTHJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/AUTHJSONAPIErrorObject",
            "referenceName": "AUTHJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHJSONAPIErrorSource": {
      "name": "AUTHJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHLockoutPolicy": {
      "name": "AUTHLockoutPolicy",
      "type": "object",
      "properties": {
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "max_attempts": {
          "name": "max_attempts",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        },
        "blocking_period": {
          "name": "blocking_period",
          "type": "integer",
          "constraints": {},
          "description": "Blocking period in minutes"
        }
      },
      "required": [
        "active",
        "blocking_period",
        "max_attempts"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHLockoutPolicyRequest": {
      "name": "AUTHLockoutPolicyRequest",
      "type": "object",
      "properties": {
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "max_attempts": {
          "name": "max_attempts",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        },
        "blocking_period": {
          "name": "blocking_period",
          "type": "integer",
          "constraints": {},
          "description": "Blocking period in minutes"
        }
      },
      "required": [
        "active",
        "blocking_period",
        "max_attempts"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHLoginRequest": {
      "name": "AUTHLoginRequest",
      "type": "object",
      "properties": {
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {
            "minLength": 1
          },
          "writeOnly": true
        },
        "password": {
          "name": "password",
          "type": "string",
          "constraints": {
            "minLength": 1
          },
          "writeOnly": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        }
      },
      "required": [
        "email",
        "password"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHLoginResponse": {
      "name": "AUTHLoginResponse",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "response_type",
          "mapping": {
            "TokenPair": "#/components/schemas/AUTHTokenPair",
            "MFAToken": "#/components/schemas/AUTHMFAToken"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/AUTHTokenPair"
          },
          {
            "reference": "#/components/schemas/AUTHMFAToken"
          }
        ]
      },
      "examples": []
    },
    "AUTHMFAToken": {
      "name": "AUTHMFAToken",
      "type": "object",
      "properties": {
        "access_token": {
          "name": "access_token",
          "type": "string",
          "constraints": {},
          "description": "The access_token is a short-lived token (e.g., 10 minutes) used for API authentication in the Authorization: Bearer <access_token> header.",
          "readOnly": true
        },
        "two_factor_required": {
          "name": "two_factor_required",
          "type": "boolean",
          "constraints": {},
          "description": "Specifies the type of two-factor authentication configured. Currently supports 'TOTP' (Time-based One-Time Password).",
          "readOnly": true
        },
        "two_factor_type": {
          "name": "two_factor_type",
          "type": "string",
          "constraints": {},
          "description": "Indicates whether the user has an active TOTP device configured. If false, the user must register a device before using MFA authentication.",
          "readOnly": true
        },
        "has_active_device": {
          "name": "has_active_device",
          "type": "boolean",
          "constraints": {},
          "description": "Indicates whether the user already has an active TOTP device configured.If false, the user needs to set up a new device before using MFA authentication.",
          "readOnly": true
        }
      },
      "required": [
        "access_token",
        "has_active_device",
        "two_factor_required",
        "two_factor_type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPaginatedPolicyList": {
      "name": "AUTHPaginatedPolicyList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/AUTHPolicy",
            "referenceName": "AUTHPolicy"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPaginatedTOTPDeviceListList": {
      "name": "AUTHPaginatedTOTPDeviceListList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/AUTHTOTPDeviceList",
            "referenceName": "AUTHTOTPDeviceList"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPatchedPolicyRequest": {
      "name": "AUTHPatchedPolicyRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "rules": {
          "name": "rules",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rules_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/AUTHPolicyRuleRequest",
            "referenceName": "AUTHPolicyRuleRequest"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPolicy": {
      "name": "AUTHPolicy",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "rules": {
          "name": "rules",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rules_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/AUTHPolicyRule",
            "referenceName": "AUTHPolicyRule"
          }
        }
      },
      "required": [
        "active",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "rules"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPolicyRequest": {
      "name": "AUTHPolicyRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "rules": {
          "name": "rules",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rules_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/AUTHPolicyRuleRequest",
            "referenceName": "AUTHPolicyRuleRequest"
          }
        }
      },
      "required": [
        "active",
        "name",
        "rules"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPolicyRule": {
      "name": "AUTHPolicyRule",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "effect": {
          "name": "effect",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHEffectEnum",
          "referenceName": "AUTHEffectEnum"
        },
        "resource": {
          "name": "resource",
          "type": "string",
          "constraints": {}
        },
        "actions": {
          "name": "actions",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "actions_item",
            "type": "string",
            "constraints": {}
          }
        },
        "condition": {
          "name": "condition",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHPolicyRuleCondition",
          "referenceName": "AUTHPolicyRuleCondition"
        }
      },
      "required": [
        "actions",
        "effect",
        "name",
        "resource"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPolicyRuleCondition": {
      "name": "AUTHPolicyRuleCondition",
      "type": "object",
      "properties": {
        "ip_address": {
          "name": "ip_address",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "ip_address_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [
        "ip_address"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPolicyRuleConditionRequest": {
      "name": "AUTHPolicyRuleConditionRequest",
      "type": "object",
      "properties": {
        "ip_address": {
          "name": "ip_address",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "ip_address_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "ip_address"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHPolicyRuleRequest": {
      "name": "AUTHPolicyRuleRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "effect": {
          "name": "effect",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHEffectEnum",
          "referenceName": "AUTHEffectEnum"
        },
        "resource": {
          "name": "resource",
          "type": "string",
          "constraints": {
            "minLength": 1
          }
        },
        "actions": {
          "name": "actions",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "actions_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "condition": {
          "name": "condition",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHPolicyRuleConditionRequest",
          "referenceName": "AUTHPolicyRuleConditionRequest"
        }
      },
      "required": [
        "actions",
        "effect",
        "name",
        "resource"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncDeletePolicy": {
      "name": "AUTHResponseAsyncDeletePolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncDeleteTOTPDeviceCreate": {
      "name": "AUTHResponseAsyncDeleteTOTPDeviceCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncLockoutPolicy": {
      "name": "AUTHResponseAsyncLockoutPolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHLockoutPolicy",
          "referenceName": "AUTHLockoutPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncLogin": {
      "name": "AUTHResponseAsyncLogin",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHLoginResponse",
          "referenceName": "AUTHLoginResponse"
        },
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncPolicy": {
      "name": "AUTHResponseAsyncPolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHPolicy",
          "referenceName": "AUTHPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncSessionTimeoutPolicy": {
      "name": "AUTHResponseAsyncSessionTimeoutPolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHSessionTimeoutPolicy",
          "referenceName": "AUTHSessionTimeoutPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncTOTPDeviceCreate": {
      "name": "AUTHResponseAsyncTOTPDeviceCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHTOTPDeviceCreate",
          "referenceName": "AUTHTOTPDeviceCreate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncToken": {
      "name": "AUTHResponseAsyncToken",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHToken",
          "referenceName": "AUTHToken"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseAsyncTokenPair": {
      "name": "AUTHResponseAsyncTokenPair",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHTokenPair",
          "referenceName": "AUTHTokenPair"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseBadRequestPolicy": {
      "name": "AUTHResponseBadRequestPolicy",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "rules": {
          "name": "rules",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rules_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseDeletePolicy": {
      "name": "AUTHResponseDeletePolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseDeleteTOTPDeviceCreate": {
      "name": "AUTHResponseDeleteTOTPDeviceCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseLockoutPolicy": {
      "name": "AUTHResponseLockoutPolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHLockoutPolicy",
          "referenceName": "AUTHLockoutPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseLogin": {
      "name": "AUTHResponseLogin",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHLoginResponse",
          "referenceName": "AUTHLoginResponse"
        },
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponsePolicy": {
      "name": "AUTHResponsePolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHPolicy",
          "referenceName": "AUTHPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseRetrieveLockoutPolicy": {
      "name": "AUTHResponseRetrieveLockoutPolicy",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHLockoutPolicy",
          "referenceName": "AUTHLockoutPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseRetrievePolicy": {
      "name": "AUTHResponseRetrievePolicy",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHPolicy",
          "referenceName": "AUTHPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseRetrieveSessionTimeoutPolicy": {
      "name": "AUTHResponseRetrieveSessionTimeoutPolicy",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHSessionTimeoutPolicy",
          "referenceName": "AUTHSessionTimeoutPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseSessionTimeoutPolicy": {
      "name": "AUTHResponseSessionTimeoutPolicy",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHSessionTimeoutPolicy",
          "referenceName": "AUTHSessionTimeoutPolicy"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseTOTPDeviceCreate": {
      "name": "AUTHResponseTOTPDeviceCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHTOTPDeviceCreate",
          "referenceName": "AUTHTOTPDeviceCreate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseToken": {
      "name": "AUTHResponseToken",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHToken",
          "referenceName": "AUTHToken"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHResponseTokenPair": {
      "name": "AUTHResponseTokenPair",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/AUTHTokenPair",
          "referenceName": "AUTHTokenPair"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHSessionTimeoutPolicy": {
      "name": "AUTHSessionTimeoutPolicy",
      "type": "object",
      "properties": {
        "max_idle_time": {
          "name": "max_idle_time",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 1440
          }
        },
        "max_session_time": {
          "name": "max_session_time",
          "type": "integer",
          "constraints": {
            "minimum": 5,
            "maximum": 21600
          }
        }
      },
      "required": [
        "max_idle_time",
        "max_session_time"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHSessionTimeoutPolicyRequest": {
      "name": "AUTHSessionTimeoutPolicyRequest",
      "type": "object",
      "properties": {
        "max_idle_time": {
          "name": "max_idle_time",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 1440
          }
        },
        "max_session_time": {
          "name": "max_session_time",
          "type": "integer",
          "constraints": {
            "minimum": 5,
            "maximum": 21600
          }
        }
      },
      "required": [
        "max_idle_time",
        "max_session_time"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHStateExecutedResponse": {
      "name": "AUTHStateExecutedResponse",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {},
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHStatePendingResponse": {
      "name": "AUTHStatePendingResponse",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {},
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHTOTPDeviceCreate": {
      "name": "AUTHTOTPDeviceCreate",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHTOTPDeviceList": {
      "name": "AUTHTOTPDeviceList",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 64
          },
          "description": "The human-readable name of this device."
        },
        "confirmed": {
          "name": "confirmed",
          "type": "boolean",
          "constraints": {},
          "description": "Is this device ready for use?"
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "constraints": {},
          "description": "The user that this device belongs to.",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "name",
        "user_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHTOTPVerificationRequest": {
      "name": "AUTHTOTPVerificationRequest",
      "type": "object",
      "properties": {
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 1
          },
          "writeOnly": true
        }
      },
      "required": [
        "code"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHToken": {
      "name": "AUTHToken",
      "type": "object",
      "properties": {
        "access_token": {
          "name": "access_token",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "access_token"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHTokenPair": {
      "name": "AUTHTokenPair",
      "type": "object",
      "properties": {
        "access_token": {
          "name": "access_token",
          "type": "string",
          "constraints": {},
          "description": "The access_token is a short-lived token (e.g., 10 minutes) used for API authentication in the Authorization: Bearer <access_token> header.",
          "readOnly": true
        },
        "refresh_token": {
          "name": "refresh_token",
          "type": "string",
          "constraints": {},
          "description": "A long-lived JWT token used to refresh the access_token without requiring the user to authenticate again.",
          "readOnly": true
        }
      },
      "required": [
        "access_token",
        "refresh_token"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHTokenRequest": {
      "name": "AUTHTokenRequest",
      "type": "object",
      "properties": {
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "AUTHuser_login_method_response": {
      "name": "AUTHuser_login_method_response",
      "type": "object",
      "properties": {
        "method": {
          "name": "method",
          "type": "string",
          "constraints": {}
        },
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        }
      },
      "required": [
        "method",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAWS4HMAC": {
      "name": "EDGEAWS4HMAC",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEAWS4HMACTypeEnum",
          "referenceName": "EDGEAWS4HMACTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEAWS4HMACAttributes",
          "referenceName": "EDGEAWS4HMACAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAWS4HMACAttributes": {
      "name": "EDGEAWS4HMACAttributes",
      "type": "object",
      "properties": {
        "region": {
          "name": "region",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "service": {
          "name": "service",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "s3"
        },
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "secret_key": {
          "name": "secret_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "access_key",
        "region",
        "secret_key"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAWS4HMACAttributesRequest": {
      "name": "EDGEAWS4HMACAttributesRequest",
      "type": "object",
      "properties": {
        "region": {
          "name": "region",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "service": {
          "name": "service",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "s3"
        },
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "secret_key": {
          "name": "secret_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "access_key",
        "region",
        "secret_key"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAWS4HMACRequest": {
      "name": "EDGEAWS4HMACRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEAWS4HMACTypeEnum",
          "referenceName": "EDGEAWS4HMACTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEAWS4HMACAttributesRequest",
          "referenceName": "EDGEAWS4HMACAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAWS4HMACTypeEnum": {
      "name": "EDGEAWS4HMACTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAddress": {
      "name": "EDGEAddress",
      "type": "object",
      "properties": {
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true,
          "description": "Indicates if the address is active for use"
        },
        "address": {
          "name": "address",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "description": "IPv4/IPv6 address or CNAME to resolve"
        },
        "http_port": {
          "name": "http_port",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 65535
          },
          "default": 80,
          "description": "Port number for HTTP connections"
        },
        "https_port": {
          "name": "https_port",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 65535
          },
          "default": 443,
          "description": "Port number for HTTPS connections"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEAddressModules"
            }
          ]
        }
      },
      "required": [
        "address"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAddressLoadBalancerModule": {
      "name": "EDGEAddressLoadBalancerModule",
      "type": "object",
      "properties": {
        "server_role": {
          "name": "server_role",
          "type": "unknown",
          "constraints": {},
          "default": "primary",
          "description": "Role of the address in load balancing\n\n* `primary` - Primary\n* `backup` - Backup",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEServerRoleEnum"
            }
          ]
        },
        "weight": {
          "name": "weight",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 100
          },
          "default": 1,
          "description": "Weight used in load balancing strategy"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAddressLoadBalancerModuleRequest": {
      "name": "EDGEAddressLoadBalancerModuleRequest",
      "type": "object",
      "properties": {
        "server_role": {
          "name": "server_role",
          "type": "unknown",
          "constraints": {},
          "default": "primary",
          "description": "Role of the address in load balancing\n\n* `primary` - Primary\n* `backup` - Backup",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEServerRoleEnum"
            }
          ]
        },
        "weight": {
          "name": "weight",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 100
          },
          "default": 1,
          "description": "Weight used in load balancing strategy"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAddressModules": {
      "name": "EDGEAddressModules",
      "type": "object",
      "properties": {
        "load_balancer": {
          "name": "load_balancer",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEAddressLoadBalancerModule",
          "referenceName": "EDGEAddressLoadBalancerModule"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAddressModulesRequest": {
      "name": "EDGEAddressModulesRequest",
      "type": "object",
      "properties": {
        "load_balancer": {
          "name": "load_balancer",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEAddressLoadBalancerModuleRequest",
          "referenceName": "EDGEAddressLoadBalancerModuleRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEAddressRequest": {
      "name": "EDGEAddressRequest",
      "type": "object",
      "properties": {
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true,
          "description": "Indicates if the address is active for use"
        },
        "address": {
          "name": "address",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "description": "IPv4/IPv6 address or CNAME to resolve"
        },
        "http_port": {
          "name": "http_port",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 65535
          },
          "default": 80,
          "description": "Port number for HTTP connections"
        },
        "https_port": {
          "name": "https_port",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 65535
          },
          "default": 443,
          "description": "Port number for HTTPS connections"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEAddressModulesRequest"
            }
          ]
        }
      },
      "required": [
        "address"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplication": {
      "name": "EDGEApplication",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationModules",
          "referenceName": "EDGEApplicationModules"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "debug": {
          "name": "debug",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationAcceleratorModule": {
      "name": "EDGEApplicationAcceleratorModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEApplicationAcceleratorModuleRequest": {
      "name": "EDGEApplicationAcceleratorModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEApplicationDeviceGroups": {
      "name": "EDGEApplicationDeviceGroups",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "user_agent": {
          "name": "user_agent",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 512,
            "pattern": ".*"
          },
          "description": "Enter a valid regular expression pattern to identify user agents."
        }
      },
      "required": [
        "id",
        "name",
        "user_agent"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationDeviceGroupsRequest": {
      "name": "EDGEApplicationDeviceGroupsRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "user_agent": {
          "name": "user_agent",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 512,
            "pattern": ".*"
          },
          "description": "Enter a valid regular expression pattern to identify user agents."
        }
      },
      "required": [
        "name",
        "user_agent"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationFunctionInstance": {
      "name": "EDGEApplicationFunctionInstance",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "args": {
          "name": "args",
          "type": "object",
          "constraints": {},
          "description": "Args to be accessed by the Edge Function.\n- args must be a JSON object or an array.\n- If there are no args being informed, the function default_args will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "function": {
          "name": "function",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "function",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationFunctionInstanceRequest": {
      "name": "EDGEApplicationFunctionInstanceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "args": {
          "name": "args",
          "type": "object",
          "constraints": {},
          "description": "Args to be accessed by the Edge Function.\n- args must be a JSON object or an array.\n- If there are no args being informed, the function default_args will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "function": {
          "name": "function",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "function",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationModules": {
      "name": "EDGEApplicationModules",
      "type": "object",
      "properties": {
        "edge_cache": {
          "name": "edge_cache",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheModule"
            }
          ]
        },
        "functions": {
          "name": "functions",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEdgeFunctionModule"
            }
          ]
        },
        "application_accelerator": {
          "name": "application_accelerator",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEApplicationAcceleratorModule"
            }
          ]
        },
        "image_processor": {
          "name": "image_processor",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEImageProcessorModule"
            }
          ]
        },
        "tiered_cache": {
          "name": "tiered_cache",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETieredCacheModule"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationModulesRequest": {
      "name": "EDGEApplicationModulesRequest",
      "type": "object",
      "properties": {
        "edge_cache": {
          "name": "edge_cache",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheModuleRequest"
            }
          ]
        },
        "functions": {
          "name": "functions",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEdgeFunctionModuleRequest"
            }
          ]
        },
        "application_accelerator": {
          "name": "application_accelerator",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEApplicationAcceleratorModuleRequest"
            }
          ]
        },
        "image_processor": {
          "name": "image_processor",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEImageProcessorModuleRequest"
            }
          ]
        },
        "tiered_cache": {
          "name": "tiered_cache",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETieredCacheModuleRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRequest": {
      "name": "EDGEApplicationRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationModulesRequest",
          "referenceName": "EDGEApplicationModulesRequest"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "debug": {
          "name": "debug",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRequestPhaseRuleEngine": {
      "name": "EDGEApplicationRequestPhaseRuleEngine",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeApplicationCriterionField",
              "referenceName": "EDGEEdgeApplicationCriterionField"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviors",
            "referenceName": "EDGEApplicationRuleEngineRequestPhaseBehaviors"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        },
        "order": {
          "name": "order",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 199
          },
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 255,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "behaviors",
        "criteria",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRequestPhaseRuleEngineOrderRequest": {
      "name": "EDGEApplicationRequestPhaseRuleEngineOrderRequest",
      "type": "object",
      "properties": {
        "order": {
          "name": "order",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "order_item",
            "type": "integer",
            "format": "int64",
            "constraints": {
              "minimum": 1,
              "maximum": 9223372036854776000
            }
          }
        }
      },
      "required": [
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRequestPhaseRuleEngineRequest": {
      "name": "EDGEApplicationRequestPhaseRuleEngineRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeApplicationCriterionFieldRequest",
              "referenceName": "EDGEEdgeApplicationCriterionFieldRequest"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest",
            "referenceName": "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "behaviors",
        "criteria",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationResponsePhaseRuleEngine": {
      "name": "EDGEApplicationResponsePhaseRuleEngine",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeApplicationCriterionField",
              "referenceName": "EDGEEdgeApplicationCriterionField"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviors",
            "referenceName": "EDGEApplicationRuleEngineResponsePhaseBehaviors"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        },
        "order": {
          "name": "order",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 199
          },
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 255,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "behaviors",
        "criteria",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationResponsePhaseRuleEngineOrderRequest": {
      "name": "EDGEApplicationResponsePhaseRuleEngineOrderRequest",
      "type": "object",
      "properties": {
        "order": {
          "name": "order",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "order_item",
            "type": "integer",
            "format": "int64",
            "constraints": {
              "minimum": 1,
              "maximum": 9223372036854776000
            }
          }
        }
      },
      "required": [
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationResponsePhaseRuleEngineRequest": {
      "name": "EDGEApplicationResponsePhaseRuleEngineRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeApplicationCriterionFieldRequest",
              "referenceName": "EDGEEdgeApplicationCriterionFieldRequest"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest",
            "referenceName": "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "behaviors",
        "criteria",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddHeader": {
      "name": "EDGEApplicationRuleEngineAddHeader",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineAddHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddHeaderAttributes",
          "referenceName": "EDGEApplicationRuleEngineAddHeaderAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddHeaderAttributes": {
      "name": "EDGEApplicationRuleEngineAddHeaderAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddHeaderAttributesRequest": {
      "name": "EDGEApplicationRuleEngineAddHeaderAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddHeaderRequest": {
      "name": "EDGEApplicationRuleEngineAddHeaderRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineAddHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddHeaderAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineAddHeaderAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddHeaderTypeEnum": {
      "name": "EDGEApplicationRuleEngineAddHeaderTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddRequestCookie": {
      "name": "EDGEApplicationRuleEngineAddRequestCookie",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddRequestCookieTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineAddRequestCookieTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddRequestCookieAttributes",
          "referenceName": "EDGEApplicationRuleEngineAddRequestCookieAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddRequestCookieAttributes": {
      "name": "EDGEApplicationRuleEngineAddRequestCookieAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddRequestCookieAttributesRequest": {
      "name": "EDGEApplicationRuleEngineAddRequestCookieAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddRequestCookieRequest": {
      "name": "EDGEApplicationRuleEngineAddRequestCookieRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddRequestCookieTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineAddRequestCookieTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddRequestCookieAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineAddRequestCookieAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddRequestCookieTypeEnum": {
      "name": "EDGEApplicationRuleEngineAddRequestCookieTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddResponseHeader": {
      "name": "EDGEApplicationRuleEngineAddResponseHeader",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddResponseHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddResponseHeaderAttributes",
          "referenceName": "EDGEApplicationRuleEngineAddResponseHeaderAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddResponseHeaderAttributes": {
      "name": "EDGEApplicationRuleEngineAddResponseHeaderAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest": {
      "name": "EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddResponseHeaderRequest": {
      "name": "EDGEApplicationRuleEngineAddResponseHeaderRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddResponseHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum": {
      "name": "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineCaptureMatchGroups": {
      "name": "EDGEApplicationRuleEngineCaptureMatchGroups",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineCaptureMatchGroupsAttributes",
          "referenceName": "EDGEApplicationRuleEngineCaptureMatchGroupsAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineCaptureMatchGroupsAttributes": {
      "name": "EDGEApplicationRuleEngineCaptureMatchGroupsAttributes",
      "type": "object",
      "properties": {
        "subject": {
          "name": "subject",
          "type": "string",
          "constraints": {
            "minLength": 4,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "regex": {
          "name": "regex",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "captured_array": {
          "name": "captured_array",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 10,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "captured_array",
        "regex",
        "subject"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest": {
      "name": "EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest",
      "type": "object",
      "properties": {
        "subject": {
          "name": "subject",
          "type": "string",
          "constraints": {
            "minLength": 4,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "regex": {
          "name": "regex",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "captured_array": {
          "name": "captured_array",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 10,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "captured_array",
        "regex",
        "subject"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineCaptureMatchGroupsRequest": {
      "name": "EDGEApplicationRuleEngineCaptureMatchGroupsRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum": {
      "name": "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterHeader": {
      "name": "EDGEApplicationRuleEngineFilterHeader",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineFilterHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterHeaderAttributes",
          "referenceName": "EDGEApplicationRuleEngineFilterHeaderAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterHeaderAttributes": {
      "name": "EDGEApplicationRuleEngineFilterHeaderAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterHeaderAttributesRequest": {
      "name": "EDGEApplicationRuleEngineFilterHeaderAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterHeaderRequest": {
      "name": "EDGEApplicationRuleEngineFilterHeaderRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineFilterHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterHeaderAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineFilterHeaderAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterHeaderTypeEnum": {
      "name": "EDGEApplicationRuleEngineFilterHeaderTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterRequestCookie": {
      "name": "EDGEApplicationRuleEngineFilterRequestCookie",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterRequestCookieTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterRequestCookieAttributes",
          "referenceName": "EDGEApplicationRuleEngineFilterRequestCookieAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterRequestCookieAttributes": {
      "name": "EDGEApplicationRuleEngineFilterRequestCookieAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest": {
      "name": "EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterRequestCookieRequest": {
      "name": "EDGEApplicationRuleEngineFilterRequestCookieRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterRequestCookieTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum": {
      "name": "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterResponseHeader": {
      "name": "EDGEApplicationRuleEngineFilterResponseHeader",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterResponseHeaderAttributes",
          "referenceName": "EDGEApplicationRuleEngineFilterResponseHeaderAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterResponseHeaderAttributes": {
      "name": "EDGEApplicationRuleEngineFilterResponseHeaderAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest": {
      "name": "EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterResponseHeaderRequest": {
      "name": "EDGEApplicationRuleEngineFilterResponseHeaderRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum": {
      "name": "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineNoArgs": {
      "name": "EDGEApplicationRuleEngineNoArgs",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineNoArgsTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineNoArgsTypeEnum"
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineNoArgsRequest": {
      "name": "EDGEApplicationRuleEngineNoArgsRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineNoArgsTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineNoArgsTypeEnum"
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineNoArgsTypeEnum": {
      "name": "EDGEApplicationRuleEngineNoArgsTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviors": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviors",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "no_content": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "finish_request_phase": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString",
            "forward_cookies": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "optimize_images": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "bypass_cache": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "filter_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction",
            "set_origin": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin",
            "redirect_http_to_https": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "set_connector": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector",
            "set_cache_policy": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy",
            "rewrite_request": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest",
            "add_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader",
            "filter_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups",
            "add_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie"
          }
        ]
      },
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "no_content": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "finish_request_phase": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest",
            "forward_cookies": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "optimize_images": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "bypass_cache": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "filter_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest",
            "set_origin": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest",
            "redirect_http_to_https": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "set_connector": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest",
            "set_cache_policy": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest",
            "rewrite_request": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest",
            "add_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest",
            "filter_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest",
            "add_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEApplicationRuleEngineRequestPhaseBehaviorsShared": {
      "name": "EDGEApplicationRuleEngineRequestPhaseBehaviorsShared",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true,
        "businessRules": [
          {
            "type": "dependency",
            "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
          }
        ]
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseNoArgs": {
      "name": "EDGEApplicationRuleEngineResponseNoArgs",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineResponseNoArgsTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineResponseNoArgsTypeEnum"
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseNoArgsRequest": {
      "name": "EDGEApplicationRuleEngineResponseNoArgsRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineResponseNoArgsTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineResponseNoArgsTypeEnum"
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseNoArgsTypeEnum": {
      "name": "EDGEApplicationRuleEngineResponseNoArgsTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviors": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviors",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
            "filter_response_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse",
            "set_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie",
            "add_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader",
            "filter_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups"
          }
        ]
      },
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
            "filter_response_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest",
            "set_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest",
            "add_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest",
            "filter_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEApplicationRuleEngineResponsePhaseBehaviorsShared": {
      "name": "EDGEApplicationRuleEngineResponsePhaseBehaviorsShared",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true,
        "businessRules": [
          {
            "type": "dependency",
            "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
          }
        ]
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseString": {
      "name": "EDGEApplicationRuleEngineResponseString",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineResponseStringTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineResponseStringTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineResponseStringAttributes",
          "referenceName": "EDGEApplicationRuleEngineResponseStringAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseStringAttributes": {
      "name": "EDGEApplicationRuleEngineResponseStringAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseStringAttributesRequest": {
      "name": "EDGEApplicationRuleEngineResponseStringAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseStringRequest": {
      "name": "EDGEApplicationRuleEngineResponseStringRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineResponseStringTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineResponseStringTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineResponseStringAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineResponseStringAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineResponseStringTypeEnum": {
      "name": "EDGEApplicationRuleEngineResponseStringTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRewriteRequest": {
      "name": "EDGEApplicationRuleEngineRewriteRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGETypeF11Enum",
          "referenceName": "EDGETypeF11Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineRewriteRequestAttributes",
          "referenceName": "EDGEApplicationRuleEngineRewriteRequestAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRewriteRequestAttributes": {
      "name": "EDGEApplicationRuleEngineRewriteRequestAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRewriteRequestAttributesRequest": {
      "name": "EDGEApplicationRuleEngineRewriteRequestAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRewriteRequestRequest": {
      "name": "EDGEApplicationRuleEngineRewriteRequestRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGETypeF11Enum",
          "referenceName": "EDGETypeF11Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineRewriteRequestAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineRewriteRequestAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunction": {
      "name": "EDGEApplicationRuleEngineRunFunction",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType689Enum",
          "referenceName": "EDGEType689Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineRunFunctionAttributes",
          "referenceName": "EDGEApplicationRuleEngineRunFunctionAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionAttributes": {
      "name": "EDGEApplicationRuleEngineRunFunctionAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionAttributesRequest": {
      "name": "EDGEApplicationRuleEngineRunFunctionAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionRequest": {
      "name": "EDGEApplicationRuleEngineRunFunctionRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType689Enum",
          "referenceName": "EDGEType689Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineRunFunctionAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineRunFunctionAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionResponse": {
      "name": "EDGEApplicationRuleEngineRunFunctionResponse",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType689Enum",
          "referenceName": "EDGEType689Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineRunFunctionResponseAttributes",
          "referenceName": "EDGEApplicationRuleEngineRunFunctionResponseAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionResponseAttributes": {
      "name": "EDGEApplicationRuleEngineRunFunctionResponseAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest": {
      "name": "EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineRunFunctionResponseRequest": {
      "name": "EDGEApplicationRuleEngineRunFunctionResponseRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType689Enum",
          "referenceName": "EDGEType689Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCachePolicy": {
      "name": "EDGEApplicationRuleEngineSetCachePolicy",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCachePolicyTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetCachePolicyTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCachePolicyAttributes",
          "referenceName": "EDGEApplicationRuleEngineSetCachePolicyAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCachePolicyAttributes": {
      "name": "EDGEApplicationRuleEngineSetCachePolicyAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCachePolicyAttributesRequest": {
      "name": "EDGEApplicationRuleEngineSetCachePolicyAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCachePolicyRequest": {
      "name": "EDGEApplicationRuleEngineSetCachePolicyRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCachePolicyTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetCachePolicyTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCachePolicyAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineSetCachePolicyAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCachePolicyTypeEnum": {
      "name": "EDGEApplicationRuleEngineSetCachePolicyTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetConnector": {
      "name": "EDGEApplicationRuleEngineSetConnector",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetConnectorTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetConnectorTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetConnectorAttributes",
          "referenceName": "EDGEApplicationRuleEngineSetConnectorAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetConnectorAttributes": {
      "name": "EDGEApplicationRuleEngineSetConnectorAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetConnectorAttributesRequest": {
      "name": "EDGEApplicationRuleEngineSetConnectorAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetConnectorRequest": {
      "name": "EDGEApplicationRuleEngineSetConnectorRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetConnectorTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetConnectorTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetConnectorAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineSetConnectorAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetConnectorTypeEnum": {
      "name": "EDGEApplicationRuleEngineSetConnectorTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCookie": {
      "name": "EDGEApplicationRuleEngineSetCookie",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCookieTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetCookieTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCookieAttributes",
          "referenceName": "EDGEApplicationRuleEngineSetCookieAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCookieAttributes": {
      "name": "EDGEApplicationRuleEngineSetCookieAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCookieAttributesRequest": {
      "name": "EDGEApplicationRuleEngineSetCookieAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCookieRequest": {
      "name": "EDGEApplicationRuleEngineSetCookieRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCookieTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetCookieTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetCookieAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineSetCookieAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetCookieTypeEnum": {
      "name": "EDGEApplicationRuleEngineSetCookieTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetOrigin": {
      "name": "EDGEApplicationRuleEngineSetOrigin",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetOriginTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetOriginTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetOriginAttributes",
          "referenceName": "EDGEApplicationRuleEngineSetOriginAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetOriginAttributes": {
      "name": "EDGEApplicationRuleEngineSetOriginAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetOriginAttributesRequest": {
      "name": "EDGEApplicationRuleEngineSetOriginAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetOriginRequest": {
      "name": "EDGEApplicationRuleEngineSetOriginRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetOriginTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineSetOriginTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineSetOriginAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineSetOriginAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineSetOriginTypeEnum": {
      "name": "EDGEApplicationRuleEngineSetOriginTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineString": {
      "name": "EDGEApplicationRuleEngineString",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineStringTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineStringTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineStringAttributes",
          "referenceName": "EDGEApplicationRuleEngineStringAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineStringAttributes": {
      "name": "EDGEApplicationRuleEngineStringAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineStringAttributesRequest": {
      "name": "EDGEApplicationRuleEngineStringAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 2000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineStringRequest": {
      "name": "EDGEApplicationRuleEngineStringRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineStringTypeEnum",
          "referenceName": "EDGEApplicationRuleEngineStringTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRuleEngineStringAttributesRequest",
          "referenceName": "EDGEApplicationRuleEngineStringAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEApplicationRuleEngineStringTypeEnum": {
      "name": "EDGEApplicationRuleEngineStringTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEBehaviorA69Enum": {
      "name": "EDGEBehaviorA69Enum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEBlankEnum": {
      "name": "EDGEBlankEnum",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEBrowserCacheModule": {
      "name": "EDGEBrowserCacheModule",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "honor",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEBrowserCacheModuleBehaviorEnum"
            }
          ]
        },
        "max_age": {
          "name": "max_age",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 0
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEBrowserCacheModuleBehaviorEnum": {
      "name": "EDGEBrowserCacheModuleBehaviorEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEBrowserCacheModuleRequest": {
      "name": "EDGEBrowserCacheModuleRequest",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "honor",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEBrowserCacheModuleBehaviorEnum"
            }
          ]
        },
        "max_age": {
          "name": "max_age",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 0
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheModule": {
      "name": "EDGECacheModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGECacheModuleRequest": {
      "name": "EDGECacheModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGECacheSetting": {
      "name": "EDGECacheSetting",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
          }
        },
        "browser_cache": {
          "name": "browser_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEBrowserCacheModule",
          "referenceName": "EDGEBrowserCacheModule"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsModules",
          "referenceName": "EDGECacheSettingsModules"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingRequest": {
      "name": "EDGECacheSettingRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
          }
        },
        "browser_cache": {
          "name": "browser_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEBrowserCacheModuleRequest",
          "referenceName": "EDGEBrowserCacheModuleRequest"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsModulesRequest",
          "referenceName": "EDGECacheSettingsModulesRequest"
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsApplicationAcceleratorModule": {
      "name": "EDGECacheSettingsApplicationAcceleratorModule",
      "type": "object",
      "properties": {
        "cache_vary_by_method": {
          "name": "cache_vary_by_method",
          "type": "array",
          "constraints": {
            "maxItems": 2
          },
          "items": {
            "name": "cache_vary_by_method_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGECacheVaryByMethodEnum",
            "referenceName": "EDGECacheVaryByMethodEnum"
          }
        },
        "cache_vary_by_querystring": {
          "name": "cache_vary_by_querystring",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheVaryByQuerystringModule",
          "referenceName": "EDGECacheVaryByQuerystringModule"
        },
        "cache_vary_by_cookies": {
          "name": "cache_vary_by_cookies",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheVaryByCookiesModule",
          "referenceName": "EDGECacheVaryByCookiesModule"
        },
        "cache_vary_by_devices": {
          "name": "cache_vary_by_devices",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheVaryByDevicesModule",
          "referenceName": "EDGECacheVaryByDevicesModule"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsApplicationAcceleratorModuleRequest": {
      "name": "EDGECacheSettingsApplicationAcceleratorModuleRequest",
      "type": "object",
      "properties": {
        "cache_vary_by_method": {
          "name": "cache_vary_by_method",
          "type": "array",
          "constraints": {
            "maxItems": 2
          },
          "items": {
            "name": "cache_vary_by_method_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGECacheVaryByMethodEnum",
            "referenceName": "EDGECacheVaryByMethodEnum"
          }
        },
        "cache_vary_by_querystring": {
          "name": "cache_vary_by_querystring",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheVaryByQuerystringModuleRequest",
          "referenceName": "EDGECacheVaryByQuerystringModuleRequest"
        },
        "cache_vary_by_cookies": {
          "name": "cache_vary_by_cookies",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheVaryByCookiesModuleRequest",
          "referenceName": "EDGECacheVaryByCookiesModuleRequest"
        },
        "cache_vary_by_devices": {
          "name": "cache_vary_by_devices",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheVaryByDevicesModuleRequest",
          "referenceName": "EDGECacheVaryByDevicesModuleRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsEdgeCacheModule": {
      "name": "EDGECacheSettingsEdgeCacheModule",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "honor",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheSettingsEdgeCacheModuleBehaviorEnum"
            }
          ]
        },
        "max_age": {
          "name": "max_age",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 60,
          "description": "To use a value lower than 60s, the Application Acceleration module must be enabled on the Edge Application."
        },
        "stale_cache": {
          "name": "stale_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEStateCacheModule",
          "referenceName": "EDGEStateCacheModule"
        },
        "large_file_cache": {
          "name": "large_file_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGELargeFileCacheModule",
          "referenceName": "EDGELargeFileCacheModule"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsEdgeCacheModuleBehaviorEnum": {
      "name": "EDGECacheSettingsEdgeCacheModuleBehaviorEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsEdgeCacheModuleRequest": {
      "name": "EDGECacheSettingsEdgeCacheModuleRequest",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "honor",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheSettingsEdgeCacheModuleBehaviorEnum"
            }
          ]
        },
        "max_age": {
          "name": "max_age",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 60,
          "description": "To use a value lower than 60s, the Application Acceleration module must be enabled on the Edge Application."
        },
        "stale_cache": {
          "name": "stale_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEStateCacheModuleRequest",
          "referenceName": "EDGEStateCacheModuleRequest"
        },
        "large_file_cache": {
          "name": "large_file_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGELargeFileCacheModuleRequest",
          "referenceName": "EDGELargeFileCacheModuleRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsModules": {
      "name": "EDGECacheSettingsModules",
      "type": "object",
      "properties": {
        "edge_cache": {
          "name": "edge_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsEdgeCacheModule",
          "referenceName": "EDGECacheSettingsEdgeCacheModule"
        },
        "tiered_cache": {
          "name": "tiered_cache",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheSettingsTieredCacheModule"
            }
          ]
        },
        "application_accelerator": {
          "name": "application_accelerator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsApplicationAcceleratorModule",
          "referenceName": "EDGECacheSettingsApplicationAcceleratorModule"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsModulesRequest": {
      "name": "EDGECacheSettingsModulesRequest",
      "type": "object",
      "properties": {
        "edge_cache": {
          "name": "edge_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsEdgeCacheModuleRequest",
          "referenceName": "EDGECacheSettingsEdgeCacheModuleRequest"
        },
        "tiered_cache": {
          "name": "tiered_cache",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheSettingsTieredCacheModuleRequest"
            }
          ]
        },
        "application_accelerator": {
          "name": "application_accelerator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsApplicationAcceleratorModuleRequest",
          "referenceName": "EDGECacheSettingsApplicationAcceleratorModuleRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsTieredCacheModule": {
      "name": "EDGECacheSettingsTieredCacheModule",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "override",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheSettingsTieredCacheModuleBehaviorEnum"
            }
          ]
        },
        "max_age": {
          "name": "max_age",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 31536000,
          "readOnly": true
        },
        "topology": {
          "name": "topology",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGETopologyEnum",
          "referenceName": "EDGETopologyEnum"
        }
      },
      "required": [
        "behavior",
        "max_age"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsTieredCacheModuleBehaviorEnum": {
      "name": "EDGECacheSettingsTieredCacheModuleBehaviorEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheSettingsTieredCacheModuleRequest": {
      "name": "EDGECacheSettingsTieredCacheModuleRequest",
      "type": "object",
      "properties": {
        "topology": {
          "name": "topology",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGETopologyEnum",
          "referenceName": "EDGETopologyEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByCookiesModule": {
      "name": "EDGECacheVaryByCookiesModule",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "ignore",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEBehaviorA69Enum"
            }
          ]
        },
        "cookie_names": {
          "name": "cookie_names",
          "type": "array",
          "constraints": {},
          "default": [],
          "items": {
            "name": "cookie_names_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByCookiesModuleRequest": {
      "name": "EDGECacheVaryByCookiesModuleRequest",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "ignore",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEBehaviorA69Enum"
            }
          ]
        },
        "cookie_names": {
          "name": "cookie_names",
          "type": "array",
          "constraints": {},
          "default": [],
          "items": {
            "name": "cookie_names_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByDevicesModule": {
      "name": "EDGECacheVaryByDevicesModule",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "ignore",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheVaryByDevicesModuleBehaviorEnum"
            }
          ]
        },
        "device_group": {
          "name": "device_group",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "device_group_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByDevicesModuleBehaviorEnum": {
      "name": "EDGECacheVaryByDevicesModuleBehaviorEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByDevicesModuleRequest": {
      "name": "EDGECacheVaryByDevicesModuleRequest",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "ignore",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECacheVaryByDevicesModuleBehaviorEnum"
            }
          ]
        },
        "device_group": {
          "name": "device_group",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "device_group_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByMethodEnum": {
      "name": "EDGECacheVaryByMethodEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECacheVaryByQuerystringModule": {
      "name": "EDGECacheVaryByQuerystringModule",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "ignore",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEBehaviorA69Enum"
            }
          ]
        },
        "fields": {
          "name": "fields",
          "type": "array",
          "constraints": {},
          "default": [],
          "items": {
            "name": "fields_item",
            "type": "string",
            "constraints": {}
          }
        },
        "sort_enabled": {
          "name": "sort_enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "sort_enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGECacheVaryByQuerystringModuleRequest": {
      "name": "EDGECacheVaryByQuerystringModuleRequest",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "unknown",
          "constraints": {},
          "default": "ignore",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEBehaviorA69Enum"
            }
          ]
        },
        "fields": {
          "name": "fields",
          "type": "array",
          "constraints": {},
          "default": [],
          "items": {
            "name": "fields_item",
            "type": "string",
            "constraints": {}
          }
        },
        "sort_enabled": {
          "name": "sort_enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "sort_enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGECiphersEnum": {
      "name": "EDGECiphersEnum",
      "type": "integer",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECloneApplicationRequest": {
      "name": "EDGECloneApplicationRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECloneFirewallRequest": {
      "name": "EDGECloneFirewallRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECloneWAFRequest": {
      "name": "EDGECloneWAFRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECodeEnum": {
      "name": "EDGECodeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConditionalEnum": {
      "name": "EDGEConditionalEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorHTTP": {
      "name": "EDGEConnectorHTTP",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorHTTPAttributes",
          "referenceName": "EDGEConnectorHTTPAttributes"
        }
      },
      "required": [
        "attributes",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorHTTPAttributes": {
      "name": "EDGEConnectorHTTPAttributes",
      "type": "object",
      "properties": {
        "addresses": {
          "name": "addresses",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "addresses_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEAddress",
            "referenceName": "EDGEAddress"
          }
        },
        "connection_options": {
          "name": "connection_options",
          "type": "unknown",
          "constraints": {},
          "default": {
            "dns_resolution": "preserve",
            "transport_policy": "preserve",
            "http_version_policy": "http1_1",
            "host": "${host}",
            "path_prefix": "",
            "following_redirect": false,
            "real_ip_header": "X-Real-IP",
            "real_port_header": "X-Real-PORT"
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHTTPConnectionOptions"
            }
          ]
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "default": {
            "load_balancer": {
              "enabled": false,
              "config": null
            },
            "origin_shield": {
              "enabled": false,
              "config": null
            }
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHTTPModules"
            }
          ]
        }
      },
      "required": [
        "addresses"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorHTTPAttributesRequest": {
      "name": "EDGEConnectorHTTPAttributesRequest",
      "type": "object",
      "properties": {
        "addresses": {
          "name": "addresses",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "addresses_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEAddressRequest",
            "referenceName": "EDGEAddressRequest"
          }
        },
        "connection_options": {
          "name": "connection_options",
          "type": "unknown",
          "constraints": {},
          "default": {
            "dns_resolution": "preserve",
            "transport_policy": "preserve",
            "http_version_policy": "http1_1",
            "host": "${host}",
            "path_prefix": "",
            "following_redirect": false,
            "real_ip_header": "X-Real-IP",
            "real_port_header": "X-Real-PORT"
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHTTPConnectionOptionsRequest"
            }
          ]
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "default": {
            "load_balancer": {
              "enabled": false,
              "config": null
            },
            "origin_shield": {
              "enabled": false,
              "config": null
            }
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHTTPModulesRequest"
            }
          ]
        }
      },
      "required": [
        "addresses"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorHTTPRequest": {
      "name": "EDGEConnectorHTTPRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorHTTPAttributesRequest",
          "referenceName": "EDGEConnectorHTTPAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorLiveIngest": {
      "name": "EDGEConnectorLiveIngest",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorLiveIngestAttributes",
          "referenceName": "EDGEConnectorLiveIngestAttributes"
        }
      },
      "required": [
        "attributes",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorLiveIngestAttributes": {
      "name": "EDGEConnectorLiveIngestAttributes",
      "type": "object",
      "properties": {
        "region": {
          "name": "region",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGERegionEnum",
          "referenceName": "EDGERegionEnum"
        }
      },
      "required": [
        "region"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorLiveIngestAttributesRequest": {
      "name": "EDGEConnectorLiveIngestAttributesRequest",
      "type": "object",
      "properties": {
        "region": {
          "name": "region",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGERegionEnum",
          "referenceName": "EDGERegionEnum"
        }
      },
      "required": [
        "region"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorLiveIngestRequest": {
      "name": "EDGEConnectorLiveIngestRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorLiveIngestAttributesRequest",
          "referenceName": "EDGEConnectorLiveIngestAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorPolymorphic": {
      "name": "EDGEConnectorPolymorphic",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/EDGEConnectorHTTP",
            "storage": "#/components/schemas/EDGEConnectorStorage",
            "live_ingest": "#/components/schemas/EDGEConnectorLiveIngest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEConnectorHTTP"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorStorage"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorLiveIngest"
          }
        ]
      },
      "examples": []
    },
    "EDGEConnectorPolymorphicRequest": {
      "name": "EDGEConnectorPolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/EDGEConnectorHTTPRequest",
            "storage": "#/components/schemas/EDGEConnectorStorageRequest",
            "live_ingest": "#/components/schemas/EDGEConnectorLiveIngestRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEConnectorHTTPRequest"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorStorageRequest"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorLiveIngestRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEConnectorStorage": {
      "name": "EDGEConnectorStorage",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorStorageAttributes",
          "referenceName": "EDGEConnectorStorageAttributes"
        }
      },
      "required": [
        "attributes",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorStorageAttributes": {
      "name": "EDGEConnectorStorageAttributes",
      "type": "object",
      "properties": {
        "bucket": {
          "name": "bucket",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "prefix": {
          "name": "prefix",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "bucket"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorStorageAttributesRequest": {
      "name": "EDGEConnectorStorageAttributesRequest",
      "type": "object",
      "properties": {
        "bucket": {
          "name": "bucket",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "prefix": {
          "name": "prefix",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "bucket"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEConnectorStorageRequest": {
      "name": "EDGEConnectorStorageRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorStorageAttributesRequest",
          "referenceName": "EDGEConnectorStorageAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECustomPage": {
      "name": "EDGECustomPage",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "default": "1.0",
          "readOnly": true
        },
        "pages": {
          "name": "pages",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "pages_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEPage",
            "referenceName": "EDGEPage"
          }
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "pages",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGECustomPageRequest": {
      "name": "EDGECustomPageRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "pages": {
          "name": "pages",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "pages_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEPageRequest",
            "referenceName": "EDGEPageRequest"
          }
        }
      },
      "required": [
        "name",
        "pages"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDefaultDeploymentStrategy": {
      "name": "EDGEDefaultDeploymentStrategy",
      "type": "object",
      "properties": {
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEDefaultDeploymentStrategyAttrs",
          "referenceName": "EDGEDefaultDeploymentStrategyAttrs"
        }
      },
      "required": [
        "attributes"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDefaultDeploymentStrategyAttrs": {
      "name": "EDGEDefaultDeploymentStrategyAttrs",
      "type": "object",
      "properties": {
        "application": {
          "name": "application",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "firewall": {
          "name": "firewall",
          "type": "integer",
          "constraints": {}
        },
        "custom_page": {
          "name": "custom_page",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        }
      },
      "required": [
        "application"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDefaultDeploymentStrategyAttrsRequest": {
      "name": "EDGEDefaultDeploymentStrategyAttrsRequest",
      "type": "object",
      "properties": {
        "application": {
          "name": "application",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "firewall": {
          "name": "firewall",
          "type": "integer",
          "constraints": {}
        },
        "custom_page": {
          "name": "custom_page",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        }
      },
      "required": [
        "application"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDefaultDeploymentStrategyRequest": {
      "name": "EDGEDefaultDeploymentStrategyRequest",
      "type": "object",
      "properties": {
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEDefaultDeploymentStrategyAttrsRequest",
          "referenceName": "EDGEDefaultDeploymentStrategyAttrsRequest"
        }
      },
      "required": [
        "attributes"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDefaultErrorResponse": {
      "name": "EDGEDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDeploymentStrategy": {
      "name": "EDGEDeploymentStrategy",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "default": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategy"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategy"
          }
        ]
      },
      "examples": []
    },
    "EDGEDeploymentStrategyDefaultDeploymentStrategy": {
      "name": "EDGEDeploymentStrategyDefaultDeploymentStrategy",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDeploymentStrategyDefaultDeploymentStrategyRequest": {
      "name": "EDGEDeploymentStrategyDefaultDeploymentStrategyRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDeploymentStrategyRequest": {
      "name": "EDGEDeploymentStrategyRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "default": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategyRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategyRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEDeploymentStrategyShared": {
      "name": "EDGEDeploymentStrategyShared",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEDnsResolutionEnum": {
      "name": "EDGEDnsResolutionEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeApplicationCriterionField": {
      "name": "EDGEEdgeApplicationCriterionField",
      "type": "object",
      "properties": {
        "conditional": {
          "name": "conditional",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConditionalEnum",
          "referenceName": "EDGEConditionalEnum"
        },
        "variable": {
          "name": "variable",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeApplicationCriterionFieldVariableEnum",
          "referenceName": "EDGEEdgeApplicationCriterionFieldVariableEnum"
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEOperator565Enum",
          "referenceName": "EDGEOperator565Enum"
        },
        "argument": {
          "name": "argument",
          "type": "unknown",
          "constraints": {},
          "default": "",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEdgeApplicationCriterionPolymorphicArgument"
            }
          ]
        }
      },
      "required": [
        "conditional",
        "operator",
        "variable"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeApplicationCriterionFieldRequest": {
      "name": "EDGEEdgeApplicationCriterionFieldRequest",
      "type": "object",
      "properties": {
        "conditional": {
          "name": "conditional",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConditionalEnum",
          "referenceName": "EDGEConditionalEnum"
        },
        "variable": {
          "name": "variable",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeApplicationCriterionFieldVariableEnum",
          "referenceName": "EDGEEdgeApplicationCriterionFieldVariableEnum"
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEOperator565Enum",
          "referenceName": "EDGEOperator565Enum"
        },
        "argument": {
          "name": "argument",
          "type": "unknown",
          "constraints": {},
          "default": "",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEdgeApplicationCriterionPolymorphicArgumentRequest"
            }
          ]
        }
      },
      "required": [
        "conditional",
        "operator",
        "variable"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeApplicationCriterionFieldVariableEnum": {
      "name": "EDGEEdgeApplicationCriterionFieldVariableEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeApplicationCriterionPolymorphicArgument": {
      "name": "EDGEEdgeApplicationCriterionPolymorphicArgument",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "examples": []
    },
    "EDGEEdgeApplicationCriterionPolymorphicArgumentRequest": {
      "name": "EDGEEdgeApplicationCriterionPolymorphicArgumentRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "examples": []
    },
    "EDGEEdgeFirewallCriterionField": {
      "name": "EDGEEdgeFirewallCriterionField",
      "type": "object",
      "properties": {
        "conditional": {
          "name": "conditional",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConditionalEnum",
          "referenceName": "EDGEConditionalEnum"
        },
        "variable": {
          "name": "variable",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeFirewallCriterionFieldVariableEnum",
          "referenceName": "EDGEEdgeFirewallCriterionFieldVariableEnum"
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEOperator565Enum",
          "referenceName": "EDGEOperator565Enum"
        },
        "argument": {
          "name": "argument",
          "type": "unknown",
          "constraints": {},
          "default": "",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEdgeFirewallCriterionPolymorphicArgument"
            }
          ]
        }
      },
      "required": [
        "conditional",
        "operator",
        "variable"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeFirewallCriterionFieldRequest": {
      "name": "EDGEEdgeFirewallCriterionFieldRequest",
      "type": "object",
      "properties": {
        "conditional": {
          "name": "conditional",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConditionalEnum",
          "referenceName": "EDGEConditionalEnum"
        },
        "variable": {
          "name": "variable",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeFirewallCriterionFieldVariableEnum",
          "referenceName": "EDGEEdgeFirewallCriterionFieldVariableEnum"
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEOperator565Enum",
          "referenceName": "EDGEOperator565Enum"
        },
        "argument": {
          "name": "argument",
          "type": "unknown",
          "constraints": {},
          "default": "",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEdgeFirewallCriterionPolymorphicArgumentRequest"
            }
          ]
        }
      },
      "required": [
        "conditional",
        "operator",
        "variable"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeFirewallCriterionFieldVariableEnum": {
      "name": "EDGEEdgeFirewallCriterionFieldVariableEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeFirewallCriterionPolymorphicArgument": {
      "name": "EDGEEdgeFirewallCriterionPolymorphicArgument",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "examples": []
    },
    "EDGEEdgeFirewallCriterionPolymorphicArgumentRequest": {
      "name": "EDGEEdgeFirewallCriterionPolymorphicArgumentRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "examples": []
    },
    "EDGEEdgeFunctionModule": {
      "name": "EDGEEdgeFunctionModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGEEdgeFunctionModuleRequest": {
      "name": "EDGEEdgeFunctionModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGEEdgeFunctions": {
      "name": "EDGEEdgeFunctions",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "maxLength": 50,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "runtime": {
          "name": "runtime",
          "type": "unknown",
          "constraints": {},
          "default": "azion_js",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGERuntimeEnum"
            }
          ]
        },
        "execution_environment": {
          "name": "execution_environment",
          "type": "unknown",
          "constraints": {},
          "default": "application",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEExecutionEnvironmentEnum"
            }
          ]
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 52428800,
            "pattern": ".*"
          },
          "description": "String containing the function code. Maximum size: 20MB."
        },
        "default_args": {
          "name": "default_args",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "Args to be accessed by the Edge Function.\n- default_args must be a JSON object or an array.\n- If there are no args being informed, an empty JSON object will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "reference_count": {
          "name": "reference_count",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "version": {
          "name": "version",
          "type": "string",
          "constraints": {},
          "description": "Installed version, which may not be the latest if the vendor has released updates since installation.",
          "readOnly": true
        },
        "vendor": {
          "name": "vendor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "code",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "reference_count",
        "vendor",
        "version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEdgeFunctionsRequest": {
      "name": "EDGEEdgeFunctionsRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "runtime": {
          "name": "runtime",
          "type": "unknown",
          "constraints": {},
          "default": "azion_js",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGERuntimeEnum"
            }
          ]
        },
        "execution_environment": {
          "name": "execution_environment",
          "type": "unknown",
          "constraints": {},
          "default": "application",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEExecutionEnvironmentEnum"
            }
          ]
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 52428800,
            "pattern": ".*"
          },
          "description": "String containing the function code. Maximum size: 20MB."
        },
        "default_args": {
          "name": "default_args",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "Args to be accessed by the Edge Function.\n- default_args must be a JSON object or an array.\n- If there are no args being informed, an empty JSON object will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        }
      },
      "required": [
        "code",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEEngineVersionEnum": {
      "name": "EDGEEngineVersionEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEExecutionEnvironmentEnum": {
      "name": "EDGEExecutionEnvironmentEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewall": {
      "name": "EDGEFirewall",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallModules",
          "referenceName": "EDGEFirewallModules"
        },
        "debug": {
          "name": "debug",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorNoArguments": {
      "name": "EDGEFirewallBehaviorNoArguments",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorNoArgumentsTypeEnum",
          "referenceName": "EDGEFirewallBehaviorNoArgumentsTypeEnum"
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorNoArgumentsRequest": {
      "name": "EDGEFirewallBehaviorNoArgumentsRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorNoArgumentsTypeEnum",
          "referenceName": "EDGEFirewallBehaviorNoArgumentsTypeEnum"
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorNoArgumentsTypeEnum": {
      "name": "EDGEFirewallBehaviorNoArgumentsTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorRunFunction": {
      "name": "EDGEFirewallBehaviorRunFunction",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType689Enum",
          "referenceName": "EDGEType689Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorRunFunctionAttributes",
          "referenceName": "EDGEFirewallBehaviorRunFunctionAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorRunFunctionAttributes": {
      "name": "EDGEFirewallBehaviorRunFunctionAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorRunFunctionAttributesRequest": {
      "name": "EDGEFirewallBehaviorRunFunctionAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorRunFunctionRequest": {
      "name": "EDGEFirewallBehaviorRunFunctionRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType689Enum",
          "referenceName": "EDGEType689Enum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorRunFunctionAttributesRequest",
          "referenceName": "EDGEFirewallBehaviorRunFunctionAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetCustomResponse": {
      "name": "EDGEFirewallBehaviorSetCustomResponse",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetCustomResponseTypeEnum",
          "referenceName": "EDGEFirewallBehaviorSetCustomResponseTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetCustomResponseAttributes",
          "referenceName": "EDGEFirewallBehaviorSetCustomResponseAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetCustomResponseAttributes": {
      "name": "EDGEFirewallBehaviorSetCustomResponseAttributes",
      "type": "object",
      "properties": {
        "status_code": {
          "name": "status_code",
          "type": "integer",
          "constraints": {
            "minimum": 200,
            "maximum": 499
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": ""
        },
        "content_body": {
          "name": "content_body",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 500,
            "pattern": ".*"
          },
          "default": ""
        }
      },
      "required": [
        "status_code"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetCustomResponseAttributesRequest": {
      "name": "EDGEFirewallBehaviorSetCustomResponseAttributesRequest",
      "type": "object",
      "properties": {
        "status_code": {
          "name": "status_code",
          "type": "integer",
          "constraints": {
            "minimum": 200,
            "maximum": 499
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": ""
        },
        "content_body": {
          "name": "content_body",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 500,
            "pattern": ".*"
          },
          "default": ""
        }
      },
      "required": [
        "status_code"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetCustomResponseRequest": {
      "name": "EDGEFirewallBehaviorSetCustomResponseRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetCustomResponseTypeEnum",
          "referenceName": "EDGEFirewallBehaviorSetCustomResponseTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetCustomResponseAttributesRequest",
          "referenceName": "EDGEFirewallBehaviorSetCustomResponseAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetCustomResponseTypeEnum": {
      "name": "EDGEFirewallBehaviorSetCustomResponseTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetRateLimit": {
      "name": "EDGEFirewallBehaviorSetRateLimit",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetRateLimitTypeEnum",
          "referenceName": "EDGEFirewallBehaviorSetRateLimitTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetRateLimitAttributes",
          "referenceName": "EDGEFirewallBehaviorSetRateLimitAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetRateLimitAttributes": {
      "name": "EDGEFirewallBehaviorSetRateLimitAttributes",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "second",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallBehaviorSetRateLimitAttributesTypeEnum"
            }
          ]
        },
        "limit_by": {
          "name": "limit_by",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGELimitByEnum",
          "referenceName": "EDGELimitByEnum"
        },
        "average_rate_limit": {
          "name": "average_rate_limit",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          }
        },
        "maximum_burst_size": {
          "name": "maximum_burst_size",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          }
        }
      },
      "required": [
        "average_rate_limit",
        "limit_by"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetRateLimitAttributesRequest": {
      "name": "EDGEFirewallBehaviorSetRateLimitAttributesRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "second",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallBehaviorSetRateLimitAttributesTypeEnum"
            }
          ]
        },
        "limit_by": {
          "name": "limit_by",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGELimitByEnum",
          "referenceName": "EDGELimitByEnum"
        },
        "average_rate_limit": {
          "name": "average_rate_limit",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          }
        },
        "maximum_burst_size": {
          "name": "maximum_burst_size",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          }
        }
      },
      "required": [
        "average_rate_limit",
        "limit_by"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetRateLimitAttributesTypeEnum": {
      "name": "EDGEFirewallBehaviorSetRateLimitAttributesTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetRateLimitRequest": {
      "name": "EDGEFirewallBehaviorSetRateLimitRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetRateLimitTypeEnum",
          "referenceName": "EDGEFirewallBehaviorSetRateLimitTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetRateLimitAttributesRequest",
          "referenceName": "EDGEFirewallBehaviorSetRateLimitAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetRateLimitTypeEnum": {
      "name": "EDGEFirewallBehaviorSetRateLimitTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetWaf": {
      "name": "EDGEFirewallBehaviorSetWaf",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetWafTypeEnum",
          "referenceName": "EDGEFirewallBehaviorSetWafTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetWafAttributes",
          "referenceName": "EDGEFirewallBehaviorSetWafAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetWafAttributes": {
      "name": "EDGEFirewallBehaviorSetWafAttributes",
      "type": "object",
      "properties": {
        "waf_id": {
          "name": "waf_id",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "mode": {
          "name": "mode",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEModeEnum",
          "referenceName": "EDGEModeEnum"
        }
      },
      "required": [
        "mode",
        "waf_id"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetWafAttributesRequest": {
      "name": "EDGEFirewallBehaviorSetWafAttributesRequest",
      "type": "object",
      "properties": {
        "waf_id": {
          "name": "waf_id",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "mode": {
          "name": "mode",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEModeEnum",
          "referenceName": "EDGEModeEnum"
        }
      },
      "required": [
        "mode",
        "waf_id"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetWafRequest": {
      "name": "EDGEFirewallBehaviorSetWafRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetWafTypeEnum",
          "referenceName": "EDGEFirewallBehaviorSetWafTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorSetWafAttributesRequest",
          "referenceName": "EDGEFirewallBehaviorSetWafAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorSetWafTypeEnum": {
      "name": "EDGEFirewallBehaviorSetWafTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorTagEvent": {
      "name": "EDGEFirewallBehaviorTagEvent",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorTagEventTypeEnum",
          "referenceName": "EDGEFirewallBehaviorTagEventTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorTagEventAttributes",
          "referenceName": "EDGEFirewallBehaviorTagEventAttributes"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorTagEventAttributes": {
      "name": "EDGEFirewallBehaviorTagEventAttributes",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 128,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorTagEventAttributesRequest": {
      "name": "EDGEFirewallBehaviorTagEventAttributesRequest",
      "type": "object",
      "properties": {
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 128,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "value"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorTagEventRequest": {
      "name": "EDGEFirewallBehaviorTagEventRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorTagEventTypeEnum",
          "referenceName": "EDGEFirewallBehaviorTagEventTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallBehaviorTagEventAttributesRequest",
          "referenceName": "EDGEFirewallBehaviorTagEventAttributesRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorTagEventTypeEnum": {
      "name": "EDGEFirewallBehaviorTagEventTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviors": {
      "name": "EDGEFirewallBehaviors",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArguments",
            "drop": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArguments",
            "set_custom_response": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse",
            "set_rate_limit": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit",
            "tag_event": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEvent",
            "set_waf": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWaf",
            "run_function": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunction"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArguments"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEvent"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWaf"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunction"
          }
        ]
      },
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorNoArguments": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorNoArguments",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorRunFunction": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorRunFunction",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorSetWaf": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorSetWaf",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorTagEvent": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorTagEvent",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest": {
      "name": "EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallBehaviorsRequest": {
      "name": "EDGEFirewallBehaviorsRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest",
            "drop": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest",
            "set_custom_response": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest",
            "set_rate_limit": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest",
            "tag_event": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest",
            "set_waf": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest",
            "run_function": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEFirewallBehaviorsShared": {
      "name": "EDGEFirewallBehaviorsShared",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true,
        "businessRules": [
          {
            "type": "dependency",
            "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
          }
        ]
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallFunctionInstance": {
      "name": "EDGEFirewallFunctionInstance",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "args": {
          "name": "args",
          "type": "object",
          "constraints": {},
          "description": "Args to be accessed by the Edge Function.\n- args must be a JSON object or an array.\n- If there are no args being informed, the function default_args will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "function": {
          "name": "function",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "function",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallFunctionInstanceRequest": {
      "name": "EDGEFirewallFunctionInstanceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "args": {
          "name": "args",
          "type": "object",
          "constraints": {},
          "description": "Args to be accessed by the Edge Function.\n- args must be a JSON object or an array.\n- If there are no args being informed, the function default_args will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "function": {
          "name": "function",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "function",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallModule": {
      "name": "EDGEFirewallModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGEFirewallModuleRequest": {
      "name": "EDGEFirewallModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "examples": []
    },
    "EDGEFirewallModules": {
      "name": "EDGEFirewallModules",
      "type": "object",
      "properties": {
        "ddos_protection": {
          "name": "ddos_protection",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModule"
            }
          ]
        },
        "functions": {
          "name": "functions",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModule"
            }
          ]
        },
        "network_protection": {
          "name": "network_protection",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModule"
            }
          ]
        },
        "waf": {
          "name": "waf",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModule"
            }
          ]
        }
      },
      "required": [
        "ddos_protection"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallModulesRequest": {
      "name": "EDGEFirewallModulesRequest",
      "type": "object",
      "properties": {
        "functions": {
          "name": "functions",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModuleRequest"
            }
          ]
        },
        "network_protection": {
          "name": "network_protection",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": true
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModuleRequest"
            }
          ]
        },
        "waf": {
          "name": "waf",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEFirewallModuleRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallRequest": {
      "name": "EDGEFirewallRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallModulesRequest",
          "referenceName": "EDGEFirewallModulesRequest"
        },
        "debug": {
          "name": "debug",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallRuleEngine": {
      "name": "EDGEFirewallRuleEngine",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 255,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeFirewallCriterionField",
              "referenceName": "EDGEEdgeFirewallCriterionField"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEFirewallBehaviors",
            "referenceName": "EDGEFirewallBehaviors"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        },
        "order": {
          "name": "order",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 199
          },
          "readOnly": true
        }
      },
      "required": [
        "behaviors",
        "criteria",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallRuleEngineOrderRequest": {
      "name": "EDGEFirewallRuleEngineOrderRequest",
      "type": "object",
      "properties": {
        "order": {
          "name": "order",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "order_item",
            "type": "integer",
            "format": "int64",
            "constraints": {
              "minimum": 1,
              "maximum": 9223372036854776000
            }
          }
        }
      },
      "required": [
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEFirewallRuleEngineRequest": {
      "name": "EDGEFirewallRuleEngineRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeFirewallCriterionFieldRequest",
              "referenceName": "EDGEEdgeFirewallCriterionFieldRequest"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEFirewallBehaviorsRequest",
            "referenceName": "EDGEFirewallBehaviorsRequest"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "behaviors",
        "criteria",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHMAC": {
      "name": "EDGEHMAC",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "config": {
          "name": "config",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHMACPolymorphic"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEHMACPolymorphic": {
      "name": "EDGEHMACPolymorphic",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "aws4_hmac_sha256": "#/components/schemas/EDGEAWS4HMAC"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEAWS4HMAC"
          }
        ]
      },
      "examples": []
    },
    "EDGEHMACPolymorphicRequest": {
      "name": "EDGEHMACPolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "aws4_hmac_sha256": "#/components/schemas/EDGEAWS4HMACRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEAWS4HMACRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEHMACRequest": {
      "name": "EDGEHMACRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "config": {
          "name": "config",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHMACPolymorphicRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEHTTPConnectionOptions": {
      "name": "EDGEHTTPConnectionOptions",
      "type": "object",
      "properties": {
        "dns_resolution": {
          "name": "dns_resolution",
          "type": "unknown",
          "constraints": {},
          "default": "preserve",
          "description": "DNS resolution policy: preserve, force IPv4, or force IPv6 usage when connecting.\n\n* `preserve` - Preserve\n* `force_ipv4` - Force IPv4\n* `force_ipv6` - Force IPv6",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEDnsResolutionEnum"
            }
          ]
        },
        "transport_policy": {
          "name": "transport_policy",
          "type": "unknown",
          "constraints": {},
          "default": "preserve",
          "description": "Transport protocol policy: preserve current scheme, force HTTP, or force HTTPS.\n\n* `preserve` - Preserve\n* `force_https` - Force HTTPS\n* `force_http` - Force HTTP",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETransportPolicyEnum"
            }
          ]
        },
        "http_version_policy": {
          "name": "http_version_policy",
          "type": "unknown",
          "constraints": {},
          "default": "http1_1",
          "description": "Defines the HTTP version preference for outbound connections (e.g., HTTP/1.1).\n\n* `http1_1` - HTTP/1.1",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHttpVersionPolicyEnum"
            }
          ]
        },
        "host": {
          "name": "host",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "${host}",
          "description": "Optional custom host used to override the default target hostname during connection."
        },
        "path_prefix": {
          "name": "path_prefix",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "",
          "description": "Optional prefix to add to all request paths (e.g., '/v1')."
        },
        "following_redirect": {
          "name": "following_redirect",
          "type": "boolean",
          "constraints": {},
          "default": false,
          "description": "If true, automatically follows HTTP redirects from the target server."
        },
        "real_ip_header": {
          "name": "real_ip_header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          },
          "default": "X-Real-IP",
          "description": "Header name used to forward the original client IP address."
        },
        "real_port_header": {
          "name": "real_port_header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          },
          "default": "X-Real-PORT",
          "description": "Header name used to forward the original client port."
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHTTPConnectionOptionsRequest": {
      "name": "EDGEHTTPConnectionOptionsRequest",
      "type": "object",
      "properties": {
        "dns_resolution": {
          "name": "dns_resolution",
          "type": "unknown",
          "constraints": {},
          "default": "preserve",
          "description": "DNS resolution policy: preserve, force IPv4, or force IPv6 usage when connecting.\n\n* `preserve` - Preserve\n* `force_ipv4` - Force IPv4\n* `force_ipv6` - Force IPv6",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEDnsResolutionEnum"
            }
          ]
        },
        "transport_policy": {
          "name": "transport_policy",
          "type": "unknown",
          "constraints": {},
          "default": "preserve",
          "description": "Transport protocol policy: preserve current scheme, force HTTP, or force HTTPS.\n\n* `preserve` - Preserve\n* `force_https` - Force HTTPS\n* `force_http` - Force HTTP",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETransportPolicyEnum"
            }
          ]
        },
        "http_version_policy": {
          "name": "http_version_policy",
          "type": "unknown",
          "constraints": {},
          "default": "http1_1",
          "description": "Defines the HTTP version preference for outbound connections (e.g., HTTP/1.1).\n\n* `http1_1` - HTTP/1.1",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHttpVersionPolicyEnum"
            }
          ]
        },
        "host": {
          "name": "host",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "${host}",
          "description": "Optional custom host used to override the default target hostname during connection."
        },
        "path_prefix": {
          "name": "path_prefix",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "",
          "description": "Optional prefix to add to all request paths (e.g., '/v1')."
        },
        "following_redirect": {
          "name": "following_redirect",
          "type": "boolean",
          "constraints": {},
          "default": false,
          "description": "If true, automatically follows HTTP redirects from the target server."
        },
        "real_ip_header": {
          "name": "real_ip_header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          },
          "default": "X-Real-IP",
          "description": "Header name used to forward the original client IP address."
        },
        "real_port_header": {
          "name": "real_port_header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          },
          "default": "X-Real-PORT",
          "description": "Header name used to forward the original client port."
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHTTPModules": {
      "name": "EDGEHTTPModules",
      "type": "object",
      "properties": {
        "load_balancer": {
          "name": "load_balancer",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false,
            "config": null
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGELoadBalancerModule"
            }
          ]
        },
        "origin_shield": {
          "name": "origin_shield",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false,
            "config": null
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEOriginShieldModule"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHTTPModulesRequest": {
      "name": "EDGEHTTPModulesRequest",
      "type": "object",
      "properties": {
        "load_balancer": {
          "name": "load_balancer",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false,
            "config": null
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGELoadBalancerModuleRequest"
            }
          ]
        },
        "origin_shield": {
          "name": "origin_shield",
          "type": "unknown",
          "constraints": {},
          "default": {
            "enabled": false,
            "config": null
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEOriginShieldModuleRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHttpProtocol": {
      "name": "EDGEHttpProtocol",
      "type": "object",
      "properties": {
        "versions": {
          "name": "versions",
          "type": "array",
          "constraints": {
            "maxItems": 3
          },
          "default": [
            "http1",
            "http2"
          ],
          "items": {
            "name": "versions_item",
            "type": "string",
            "constraints": {
              "maxLength": 30
            }
          }
        },
        "http_ports": {
          "name": "http_ports",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 4
          },
          "default": [
            80
          ],
          "items": {
            "name": "http_ports_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "https_ports": {
          "name": "https_ports",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 12
          },
          "default": [
            443
          ],
          "items": {
            "name": "https_ports_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "quic_ports": {
          "name": "quic_ports",
          "type": "array",
          "constraints": {
            "maxItems": 12
          },
          "items": {
            "name": "quic_ports_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHttpProtocolRequest": {
      "name": "EDGEHttpProtocolRequest",
      "type": "object",
      "properties": {
        "versions": {
          "name": "versions",
          "type": "array",
          "constraints": {
            "maxItems": 3
          },
          "default": [
            "http1",
            "http2"
          ],
          "items": {
            "name": "versions_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 30
            }
          }
        },
        "http_ports": {
          "name": "http_ports",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 4
          },
          "default": [
            80
          ],
          "items": {
            "name": "http_ports_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "https_ports": {
          "name": "https_ports",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 12
          },
          "default": [
            443
          ],
          "items": {
            "name": "https_ports_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "quic_ports": {
          "name": "quic_ports",
          "type": "array",
          "constraints": {
            "maxItems": 12
          },
          "items": {
            "name": "quic_ports_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEHttpVersionPolicyEnum": {
      "name": "EDGEHttpVersionPolicyEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEImageProcessorModule": {
      "name": "EDGEImageProcessorModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEImageProcessorModuleRequest": {
      "name": "EDGEImageProcessorModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEInfrastructureEnum": {
      "name": "EDGEInfrastructureEnum",
      "type": "integer",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEJSONAPIErrorObject": {
      "name": "EDGEJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEJSONAPIErrorResponse": {
      "name": "EDGEJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEJSONAPIErrorObject",
            "referenceName": "EDGEJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEJSONAPIErrorSource": {
      "name": "EDGEJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGELargeFileCacheModule": {
      "name": "EDGELargeFileCacheModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "offset": {
          "name": "offset",
          "type": "integer",
          "constraints": {
            "minimum": 1024,
            "maximum": 1024
          },
          "default": 1024
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGELargeFileCacheModuleRequest": {
      "name": "EDGELargeFileCacheModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "offset": {
          "name": "offset",
          "type": "integer",
          "constraints": {
            "minimum": 1024,
            "maximum": 1024
          },
          "default": 1024
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGELayerEnum": {
      "name": "EDGELayerEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGELimitByEnum": {
      "name": "EDGELimitByEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGELoadBalancerModule": {
      "name": "EDGELoadBalancerModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "config": {
          "name": "config",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGELoadBalancerModuleConfig"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGELoadBalancerModuleConfig": {
      "name": "EDGELoadBalancerModuleConfig",
      "type": "object",
      "properties": {
        "method": {
          "name": "method",
          "type": "unknown",
          "constraints": {},
          "default": "round_robin",
          "description": "Load balancing method to use (e.g., round-robin, least_conn).\n\n* `round_robin` - Round Robin\n* `least_conn` - Least Connections\n* `ip_hash` - IP Hash",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEMethodEnum"
            }
          ]
        },
        "max_retries": {
          "name": "max_retries",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 20
          },
          "default": 0,
          "description": "Maximum number of retry attempts on connection failure."
        },
        "connection_timeout": {
          "name": "connection_timeout",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 300
          },
          "default": 60,
          "description": "Maximum time (in seconds) to wait for a connection to be established."
        },
        "read_write_timeout": {
          "name": "read_write_timeout",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 600
          },
          "default": 120,
          "description": "Maximum time (in seconds) to wait for data read/write after connection."
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGELoadBalancerModuleConfigRequest": {
      "name": "EDGELoadBalancerModuleConfigRequest",
      "type": "object",
      "properties": {
        "method": {
          "name": "method",
          "type": "unknown",
          "constraints": {},
          "default": "round_robin",
          "description": "Load balancing method to use (e.g., round-robin, least_conn).\n\n* `round_robin` - Round Robin\n* `least_conn` - Least Connections\n* `ip_hash` - IP Hash",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEMethodEnum"
            }
          ]
        },
        "max_retries": {
          "name": "max_retries",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 20
          },
          "default": 0,
          "description": "Maximum number of retry attempts on connection failure."
        },
        "connection_timeout": {
          "name": "connection_timeout",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 300
          },
          "default": 60,
          "description": "Maximum time (in seconds) to wait for a connection to be established."
        },
        "read_write_timeout": {
          "name": "read_write_timeout",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 600
          },
          "default": 120,
          "description": "Maximum time (in seconds) to wait for data read/write after connection."
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGELoadBalancerModuleRequest": {
      "name": "EDGELoadBalancerModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "config": {
          "name": "config",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGELoadBalancerModuleConfigRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEMTLS": {
      "name": "EDGEMTLS",
      "type": "object",
      "properties": {
        "verification": {
          "name": "verification",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "$ref": "#/components/schemas/EDGEVerificationEnum"
            },
            {
              "$ref": "#/components/schemas/EDGENullEnum"
            }
          ]
        },
        "certificate": {
          "name": "certificate",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        },
        "crl": {
          "name": "crl",
          "type": "array",
          "constraints": {
            "maxItems": 100
          },
          "items": {
            "name": "crl_item",
            "type": "integer",
            "constraints": {
              "minimum": 1
            }
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEMTLSRequest": {
      "name": "EDGEMTLSRequest",
      "type": "object",
      "properties": {
        "verification": {
          "name": "verification",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "$ref": "#/components/schemas/EDGEVerificationEnum"
            },
            {
              "$ref": "#/components/schemas/EDGENullEnum"
            }
          ]
        },
        "certificate": {
          "name": "certificate",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        },
        "crl": {
          "name": "crl",
          "type": "array",
          "constraints": {
            "maxItems": 100
          },
          "items": {
            "name": "crl_item",
            "type": "integer",
            "constraints": {
              "minimum": 1
            }
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEMethodEnum": {
      "name": "EDGEMethodEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEMinimumVersionEnum": {
      "name": "EDGEMinimumVersionEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEModeEnum": {
      "name": "EDGEModeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGENetworkList": {
      "name": "EDGENetworkList",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType528Enum",
          "referenceName": "EDGEType528Enum"
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGENetworkListDetail": {
      "name": "EDGENetworkListDetail",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType528Enum",
          "referenceName": "EDGEType528Enum"
        },
        "items": {
          "name": "items",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 20000
          },
          "items": {
            "name": "items_item",
            "type": "string",
            "constraints": {
              "minLength": 0,
              "maxLength": 250,
              "pattern": ".*"
            }
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "id",
        "items",
        "last_editor",
        "last_modified",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGENetworkListDetailRequest": {
      "name": "EDGENetworkListDetailRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType528Enum",
          "referenceName": "EDGEType528Enum"
        },
        "items": {
          "name": "items",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 20000
          },
          "items": {
            "name": "items_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 250,
              "pattern": ".*"
            }
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "items",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGENullEnum": {
      "name": "EDGENullEnum",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEOperator565Enum": {
      "name": "EDGEOperator565Enum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEOriginIPACL": {
      "name": "EDGEOriginIPACL",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEOriginIPACLRequest": {
      "name": "EDGEOriginIPACLRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEOriginShieldConfig": {
      "name": "EDGEOriginShieldConfig",
      "type": "object",
      "properties": {
        "origin_ip_acl": {
          "name": "origin_ip_acl",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEOriginIPACL",
          "referenceName": "EDGEOriginIPACL"
        },
        "hmac": {
          "name": "hmac",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEHMAC",
          "referenceName": "EDGEHMAC"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEOriginShieldConfigRequest": {
      "name": "EDGEOriginShieldConfigRequest",
      "type": "object",
      "properties": {
        "origin_ip_acl": {
          "name": "origin_ip_acl",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEOriginIPACLRequest",
          "referenceName": "EDGEOriginIPACLRequest"
        },
        "hmac": {
          "name": "hmac",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEHMACRequest",
          "referenceName": "EDGEHMACRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEOriginShieldModule": {
      "name": "EDGEOriginShieldModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "config": {
          "name": "config",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEOriginShieldConfig"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEOriginShieldModuleRequest": {
      "name": "EDGEOriginShieldModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "config": {
          "name": "config",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEOriginShieldConfigRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEPage": {
      "name": "EDGEPage",
      "type": "object",
      "properties": {
        "code": {
          "name": "code",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECodeEnum",
          "referenceName": "EDGECodeEnum"
        },
        "page": {
          "name": "page",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEPagePolymorphic",
          "referenceName": "EDGEPagePolymorphic"
        }
      },
      "required": [
        "code",
        "page"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPageConnector": {
      "name": "EDGEPageConnector",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "page_connector"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEPageConnectorAttributes",
          "referenceName": "EDGEPageConnectorAttributes"
        }
      },
      "required": [
        "attributes"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPageConnectorAttributes": {
      "name": "EDGEPageConnectorAttributes",
      "type": "object",
      "properties": {
        "connector": {
          "name": "connector",
          "type": "integer",
          "constraints": {}
        },
        "ttl": {
          "name": "ttl",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 0
        },
        "uri": {
          "name": "uri",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^\\/[\\/a-zA-Z0-9\\-_\\.\\~@:]*$"
          }
        },
        "custom_status_code": {
          "name": "custom_status_code",
          "type": "integer",
          "constraints": {
            "minimum": 100,
            "maximum": 599
          }
        }
      },
      "required": [
        "connector"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPageConnectorAttributesRequest": {
      "name": "EDGEPageConnectorAttributesRequest",
      "type": "object",
      "properties": {
        "connector": {
          "name": "connector",
          "type": "integer",
          "constraints": {}
        },
        "ttl": {
          "name": "ttl",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 31536000
          },
          "default": 0
        },
        "uri": {
          "name": "uri",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^\\/[\\/a-zA-Z0-9\\-_\\.\\~@:]*$"
          }
        },
        "custom_status_code": {
          "name": "custom_status_code",
          "type": "integer",
          "constraints": {
            "minimum": 100,
            "maximum": 599
          }
        }
      },
      "required": [
        "connector"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPageConnectorRequest": {
      "name": "EDGEPageConnectorRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "page_connector"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEPageConnectorAttributesRequest",
          "referenceName": "EDGEPageConnectorAttributesRequest"
        }
      },
      "required": [
        "attributes"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPagePolymorphic": {
      "name": "EDGEPagePolymorphic",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "page_connector": "#/components/schemas/EDGEPageConnector"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEPageConnector"
          }
        ]
      },
      "examples": []
    },
    "EDGEPagePolymorphicRequest": {
      "name": "EDGEPagePolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "page_connector": "#/components/schemas/EDGEPageConnectorRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEPageConnectorRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEPageRequest": {
      "name": "EDGEPageRequest",
      "type": "object",
      "properties": {
        "code": {
          "name": "code",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECodeEnum",
          "referenceName": "EDGECodeEnum"
        },
        "page": {
          "name": "page",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEPagePolymorphicRequest",
          "referenceName": "EDGEPagePolymorphicRequest"
        }
      },
      "required": [
        "code",
        "page"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedApplicationDeviceGroupsList": {
      "name": "EDGEPaginatedApplicationDeviceGroupsList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationDeviceGroups",
            "referenceName": "EDGEApplicationDeviceGroups"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedApplicationFunctionInstanceList": {
      "name": "EDGEPaginatedApplicationFunctionInstanceList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationFunctionInstance",
            "referenceName": "EDGEApplicationFunctionInstance"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedApplicationList": {
      "name": "EDGEPaginatedApplicationList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplication",
            "referenceName": "EDGEApplication"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedApplicationRequestPhaseRuleEngineList": {
      "name": "EDGEPaginatedApplicationRequestPhaseRuleEngineList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngine",
            "referenceName": "EDGEApplicationRequestPhaseRuleEngine"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedApplicationResponsePhaseRuleEngineList": {
      "name": "EDGEPaginatedApplicationResponsePhaseRuleEngineList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationResponsePhaseRuleEngine",
            "referenceName": "EDGEApplicationResponsePhaseRuleEngine"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedConnectorPolymorphicList": {
      "name": "EDGEPaginatedConnectorPolymorphicList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEConnectorPolymorphic",
            "referenceName": "EDGEConnectorPolymorphic"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedCustomPageList": {
      "name": "EDGEPaginatedCustomPageList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGECustomPage",
            "referenceName": "EDGECustomPage"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedEdgeFunctionsList": {
      "name": "EDGEPaginatedEdgeFunctionsList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEEdgeFunctions",
            "referenceName": "EDGEEdgeFunctions"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedFirewallFunctionInstanceList": {
      "name": "EDGEPaginatedFirewallFunctionInstanceList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEFirewallFunctionInstance",
            "referenceName": "EDGEFirewallFunctionInstance"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedFirewallList": {
      "name": "EDGEPaginatedFirewallList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEFirewall",
            "referenceName": "EDGEFirewall"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedFirewallRuleEngineList": {
      "name": "EDGEPaginatedFirewallRuleEngineList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEFirewallRuleEngine",
            "referenceName": "EDGEFirewallRuleEngine"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedNetworkListList": {
      "name": "EDGEPaginatedNetworkListList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGENetworkList",
            "referenceName": "EDGENetworkList"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedResponseListCacheSettingList": {
      "name": "EDGEPaginatedResponseListCacheSettingList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEResponseListCacheSetting",
            "referenceName": "EDGEResponseListCacheSetting"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedWAFList": {
      "name": "EDGEPaginatedWAFList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWAF",
            "referenceName": "EDGEWAF"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedWAFRuleList": {
      "name": "EDGEPaginatedWAFRuleList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWAFRule",
            "referenceName": "EDGEWAFRule"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedWorkloadDeploymentList": {
      "name": "EDGEPaginatedWorkloadDeploymentList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWorkloadDeployment",
            "referenceName": "EDGEWorkloadDeployment"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPaginatedWorkloadList": {
      "name": "EDGEPaginatedWorkloadList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWorkload",
            "referenceName": "EDGEWorkload"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedApplicationDeviceGroupsRequest": {
      "name": "EDGEPatchedApplicationDeviceGroupsRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "user_agent": {
          "name": "user_agent",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 512,
            "pattern": ".*"
          },
          "description": "Enter a valid regular expression pattern to identify user agents."
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedApplicationFunctionInstanceRequest": {
      "name": "EDGEPatchedApplicationFunctionInstanceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "args": {
          "name": "args",
          "type": "object",
          "constraints": {},
          "description": "Args to be accessed by the Edge Function.\n- args must be a JSON object or an array.\n- If there are no args being informed, the function default_args will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "function": {
          "name": "function",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedApplicationRequest": {
      "name": "EDGEPatchedApplicationRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationModulesRequest",
          "referenceName": "EDGEApplicationModulesRequest"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "debug": {
          "name": "debug",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedApplicationRequestPhaseRuleEngineRequest": {
      "name": "EDGEPatchedApplicationRequestPhaseRuleEngineRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeApplicationCriterionFieldRequest",
              "referenceName": "EDGEEdgeApplicationCriterionFieldRequest"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest",
            "referenceName": "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedApplicationResponsePhaseRuleEngineRequest": {
      "name": "EDGEPatchedApplicationResponsePhaseRuleEngineRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeApplicationCriterionFieldRequest",
              "referenceName": "EDGEEdgeApplicationCriterionFieldRequest"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest",
            "referenceName": "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedCacheSettingRequest": {
      "name": "EDGEPatchedCacheSettingRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
          }
        },
        "browser_cache": {
          "name": "browser_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEBrowserCacheModuleRequest",
          "referenceName": "EDGEBrowserCacheModuleRequest"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsModulesRequest",
          "referenceName": "EDGECacheSettingsModulesRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedConnectorHTTPRequest": {
      "name": "EDGEPatchedConnectorHTTPRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorHTTPAttributesRequest",
          "referenceName": "EDGEConnectorHTTPAttributesRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedConnectorLiveIngestRequest": {
      "name": "EDGEPatchedConnectorLiveIngestRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorLiveIngestAttributesRequest",
          "referenceName": "EDGEConnectorLiveIngestAttributesRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedConnectorPolymorphicRequest": {
      "name": "EDGEPatchedConnectorPolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/EDGEPatchedConnectorHTTPRequest",
            "storage": "#/components/schemas/EDGEPatchedConnectorStorageRequest",
            "live_ingest": "#/components/schemas/EDGEPatchedConnectorLiveIngestRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEPatchedConnectorHTTPRequest"
          },
          {
            "reference": "#/components/schemas/EDGEPatchedConnectorStorageRequest"
          },
          {
            "reference": "#/components/schemas/EDGEPatchedConnectorLiveIngestRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEPatchedConnectorStorageRequest": {
      "name": "EDGEPatchedConnectorStorageRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "Type of the connector\n\n* `http` - HTTP\n* `storage` - Storage\n* `live_ingest` - Live Ingest",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEType15cEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorStorageAttributesRequest",
          "referenceName": "EDGEConnectorStorageAttributesRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedCustomPageRequest": {
      "name": "EDGEPatchedCustomPageRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "pages": {
          "name": "pages",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "pages_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEPageRequest",
            "referenceName": "EDGEPageRequest"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedEdgeFunctionsRequest": {
      "name": "EDGEPatchedEdgeFunctionsRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "runtime": {
          "name": "runtime",
          "type": "unknown",
          "constraints": {},
          "default": "azion_js",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGERuntimeEnum"
            }
          ]
        },
        "execution_environment": {
          "name": "execution_environment",
          "type": "unknown",
          "constraints": {},
          "default": "application",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEExecutionEnvironmentEnum"
            }
          ]
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 52428800,
            "pattern": ".*"
          },
          "description": "String containing the function code. Maximum size: 20MB."
        },
        "default_args": {
          "name": "default_args",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "Args to be accessed by the Edge Function.\n- default_args must be a JSON object or an array.\n- If there are no args being informed, an empty JSON object will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedFirewallFunctionInstanceRequest": {
      "name": "EDGEPatchedFirewallFunctionInstanceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "args": {
          "name": "args",
          "type": "object",
          "constraints": {},
          "description": "Args to be accessed by the Edge Function.\n- args must be a JSON object or an array.\n- If there are no args being informed, the function default_args will be used.\n"
        },
        "azion_form": {
          "name": "azion_form",
          "type": "object",
          "constraints": {},
          "default": {},
          "description": "JSON schema to be rendered as a json args form.\n- azion_form must be a JSON schema.\n- If there are no schema being informed, an empty JSON object will be used.\n"
        },
        "function": {
          "name": "function",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 9223372036854776000
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedFirewallRequest": {
      "name": "EDGEPatchedFirewallRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallModulesRequest",
          "referenceName": "EDGEFirewallModulesRequest"
        },
        "debug": {
          "name": "debug",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedFirewallRuleEngineRequest": {
      "name": "EDGEPatchedFirewallRuleEngineRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "criteria": {
          "name": "criteria",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 5
          },
          "items": {
            "name": "criteria_item",
            "type": "array",
            "constraints": {
              "minItems": 1,
              "maxItems": 10
            },
            "items": {
              "name": "criteria_item_item",
              "type": "unknown",
              "constraints": {},
              "reference": "#/components/schemas/EDGEEdgeFirewallCriterionFieldRequest",
              "referenceName": "EDGEEdgeFirewallCriterionFieldRequest"
            }
          }
        },
        "behaviors": {
          "name": "behaviors",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 10
          },
          "items": {
            "name": "behaviors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEFirewallBehaviorsRequest",
            "referenceName": "EDGEFirewallBehaviorsRequest"
          }
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 1000,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedNetworkListDetailRequest": {
      "name": "EDGEPatchedNetworkListDetailRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEType528Enum",
          "referenceName": "EDGEType528Enum"
        },
        "items": {
          "name": "items",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 20000
          },
          "items": {
            "name": "items_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 250,
              "pattern": ".*"
            }
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedWAFRequest": {
      "name": "EDGEPatchedWAFRequest",
      "type": "object",
      "properties": {
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "default": "1.0"
        },
        "engine_settings": {
          "name": "engine_settings",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFEngineSettingsFieldRequest",
          "referenceName": "EDGEWAFEngineSettingsFieldRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedWAFRuleRequest": {
      "name": "EDGEPatchedWAFRuleRequest",
      "type": "object",
      "properties": {
        "rule_id": {
          "name": "rule_id",
          "type": "unknown",
          "constraints": {},
          "default": 0,
          "description": "0 - All Rules<br>\n1 - Validation of protocol compliance: weird request, unable to parse<br>\n2 - Request too big, stored on disk and not parsed<br>\n10 - Validation of protocol compliance: invalid HEX encoding (null bytes)<br>\n11 - Validation of protocol compliance: missing or unknown Content-Type header in a POST (this rule applies only to Request Body match zone)<br>\n12 - Validation of protocol compliance: invalid formatted URL<br>\n13 - Validation of protocol compliance: invalid POST format<br>\n14 - Validation of protocol compliance: invalid POST boundary<br>\n15 - Validation of protocol compliance: invalid JSON<br>\n16 - Validation of protocol compliance: POST with no body<br>\n17 - Possible SQL Injection attack: validation with libinjection_sql<br>\n18 - Possible XSS attack: validation with libinjection_xss<br>\n1000 - Possible SQL Injection attack: SQL keywords found in Body, Path, Query String or Cookies<br>\n1001 - Possible SQL Injection or XSS attack: double quote (\") found in Body, Path, Query String or Cookies<br>\n1002 - Possible SQL Injection attack: possible hex encoding (0x) found in Body, Path, Query String or Cookies<br>\n1003 - Possible SQL Injection attack: MySQL comment (/*) found in Body, Path, Query String or Cookies<br>\n1004 - Possible SQL Injection attack: MySQL comment (*/) found in Body, Path, Query String or Cookies<br>\n1005 - Possible SQL Injection attack: MySQL keyword (|) found in Body, Path, Query String or Cookies<br>\n1006 - Possible SQL Injection attack: MySQL keyword (&&) found in Body, Path, Query String or Cookies<br>\n1007 - Possible SQL Injection attack: MySQL comment (--) found in Body, Path, Query String or Cookies<br>\n1008 - Possible SQL Injection or XSS attack: semicolon (;) found in Body, Path or Query String<br>\n1009 - Possible SQL Injection attack: equal sign (=) found in Body or Query String<br>\n1010 - Possible SQL Injection or XSS attack: open parenthesis [(] found in Body, Path, Query String or Cookies<br>\n1011 - Possible SQL Injection or XSS attack: close parenthesis [)] found in Body, Path, Query String or Cookies<br>\n1013 - Possible SQL Injection or XSS attack: apostrophe (') found in Body, Path, Query String or Cookies<br>\n1015 - Possible SQL Injection attack: comma (,) found in Body, Path, Query String or Cookies<br>\n1016 - Possible SQL Injection attack: MySQL comment (#) found in Body, Path, Query String or Cookies<br>\n1017 - Possible SQL Injection attack: double at sign (@@) found in Body, Path, Query String or Cookies<br>\n1100 - Possible RFI attack: scheme \"http://\" found in Body, Query String or Cookies<br>\n1101 - Possible RFI attack: scheme \"https://\" found in Body, Query String or Cookies<br>\n1102 - Possible RFI attack: scheme \"ftp://\" found in Body, Query String or Cookies<br>\n1103 - Possible RFI attack: scheme \"php://\" found in Body, Query String or Cookies<br>\n1104 - Possible RFI attack: scheme \"sftp://\" found in Body, Query String or Cookies<br>\n1105 - Possible RFI attack: scheme \"zlib://\" found in Body, Query String or Cookies<br>\n1106 - Possible RFI attack: scheme \"data://\" found in Body, Query String or Cookies<br>\n1107 - Possible RFI attack: scheme \"glob://\" found in Body, Query String or Cookies<br>\n1108 - Possible RFI attack: scheme \"phar://\" found in Body, Query String or Cookies<br>\n1109 - Possible RFI attack: scheme \"file://\" found in Body, Query String or Cookies<br>\n1110 - Possible RFI attack: scheme \"gopher://\" found in Body, Query String or Cookies<br>\n1198 - Possible RCE attack: validation with log4j (Log4Shell) in HEADERS_VAR<br>\n1199 - Possible RCE attack: validation with log4j (Log4Shell) in Body, Path, Query String, Headers or Cookies<br>\n1200 - Possible Directory Traversal attack: double dot (..) found in Body, Path, Query String or Cookies<br>\n1202 - Possible Directory Traversal attack: obvious probe (/etc/passwd) found in Body, Path, Query String or Cookies<br>\n1203 - Possible Directory Traversal attack: obvious windows path (c:\\) found in Body, Path, Query String or Cookies<br>\n1204 - Possible Directory Traversal attack: obvious probe (cmd.exe) found in Body, Path, Query String or Cookies<br>\n1205 - Possible Directory Traversal attack: backslash (\\) found in Body, Path, Query String or Cookies<br>\n1206 - Possible Directory Traversal attack: slash (/) found in Body, Query String or Cookies<br>\n1207 - Possible Directory Traversal attack: obvious path probe (/..;/) found in Body, Query String or Cookies<br>\n1208 - Possible Directory Traversal attack: obvious path probe (/.;/) found in Body, Query String or Cookies<br>\n1209 - Possible Directory Traversal attack: obvious path probe (/.%2e/) found in Body, Query String or Cookies<br>\n1210 - Possible Directory Traversal attack: obvious path probe (/%2e./) found in Body, Query String or Cookies<br>\n1302 - Possible XSS attack: html open tag (<) found in Body, Path, Query String or Cookies<br>\n1303 - Possible XSS attack: html close tag (>) found in Body, Path, Query String or Cookies<br>\n1310 - Possible XSS attack: open square bracket ([) found in Body, Path, Query String or Cookies<br>\n1311 - Possible XSS attack: close square bracket (]) found in Body, Path, Query String or Cookies<br>\n1312 - Possible XSS attack: tilde character (~) found in Body, Path, Query String or Cookies<br>\n1314 - Possible XSS attack: back quote ( `) found in Body, Path, Query String or Cookies<br>\n1315 - Possible XSS attack: double encoding (%[2|3]) found in Body, Path, Query String or Cookies<br>\n1400 - Possible trick to evade protection: UTF7/8 encoding (&#) found in Body, Path, Query String or Cookies<br>\n1401 - Possible trick to evade protection: MS encoding (%U) found in Body, Path, Query String or Cookies<br>\n1402 - Possible trick to evade protection: encoded chars (%20-%3F) found in Body, Query String or Cookies<br>\n1500 - Possible File Upload attempt: asp/php (.ph, .asp or .ht) found in filename in a multipart POST containing a file<br>\n2001 - Possible CVE-2022-22965 attack: Tomcat Pipeline Context tampering\n\n* `0` - All Rules\n* `1` - Validation of protocol compliance: weird request, unable to parse\n* `2` - Request too big, stored on disk and not parsed\n* `10` - Validation of protocol compliance: invalid HEX encoding (null bytes)\n* `11` - Validation of protocol compliance: missing or unknown Content-Type header in a POST (this rule applies only to Request Body match zone)\n* `12` - Validation of protocol compliance: invalid formatted URL\n* `13` - Validation of protocol compliance: invalid POST format\n* `14` - Validation of protocol compliance: invalid POST boundary\n* `15` - Validation of protocol compliance: invalid JSON\n* `16` - Validation of protocol compliance: POST with no body\n* `17` - Possible SQL Injection attack: validation with libinjection_sql\n* `18` - Possible XSS attack: validation with libinjection_xss\n* `1000` - Possible SQL Injection attack: SQL keywords found in Body, Path, Query String or Cookies\n* `1001` - Possible SQL Injection or XSS attack: double quote (\") found in Body, Path, Query String or Cookies\n* `1002` - Possible SQL Injection attack: possible hex encoding (0x) found in Body, Path, Query String or Cookies\n* `1003` - Possible SQL Injection attack: MySQL comment (/*) found in Body, Path, Query String or Cookies\n* `1004` - Possible SQL Injection attack: MySQL comment (*/) found in Body, Path, Query String or Cookies\n* `1005` - Possible SQL Injection attack: MySQL keyword (|) found in Body, Path, Query String or Cookies\n* `1006` - Possible SQL Injection attack: MySQL keyword (&&) found in Body, Path, Query String or Cookies\n* `1007` - Possible SQL Injection attack: MySQL comment (--) found in Body, Path, Query String or Cookies\n* `1008` - Possible SQL Injection or XSS attack: semicolon (;) found in Body, Path or Query String\n* `1009` - Possible SQL Injection attack: equal sign (=) found in Body or Query String\n* `1010` - Possible SQL Injection or XSS attack: open parenthesis [(] found in Body, Path, Query String or Cookies\n* `1011` - Possible SQL Injection or XSS attack: close parenthesis [)] found in Body, Path, Query String or Cookies\n* `1013` - Possible SQL Injection or XSS attack: apostrophe (') found in Body, Path, Query String or Cookies\n* `1015` - Possible SQL Injection attack: comma (,) found in Body, Path, Query String or Cookies\n* `1016` - Possible SQL Injection attack: MySQL comment (#) found in Body, Path, Query String or Cookies\n* `1017` - Possible SQL Injection attack: double at sign (@@) found in Body, Path, Query String or Cookies\n* `1100` - Possible RFI attack: scheme \"http://\" found in Body, Query String or Cookies\n* `1101` - Possible RFI attack: scheme \"https://\" found in Body, Query String or Cookies\n* `1102` - Possible RFI attack: scheme \"ftp://\" found in Body, Query String or Cookies\n* `1103` - Possible RFI attack: scheme \"php://\" found in Body, Query String or Cookies\n* `1104` - Possible RFI attack: scheme \"sftp://\" found in Body, Query String or Cookies\n* `1105` - Possible RFI attack: scheme \"zlib://\" found in Body, Query String or Cookies\n* `1106` - Possible RFI attack: scheme \"data://\" found in Body, Query String or Cookies\n* `1107` - Possible RFI attack: scheme \"glob://\" found in Body, Query String or Cookies\n* `1108` - Possible RFI attack: scheme \"phar://\" found in Body, Query String or Cookies\n* `1109` - Possible RFI attack: scheme \"file://\" found in Body, Query String or Cookies\n* `1110` - Possible RFI attack: scheme \"gopher://\" found in Body, Query String or Cookies\n* `1198` - Possible RCE attack: validation with log4j (Log4Shell) in HEADERS_VAR\n* `1199` - Possible RCE attack: validation with log4j (Log4Shell) in Body, Path, Query String, Headers or Cookies\n* `1200` - Possible Directory Traversal attack: double dot (..) found in Body, Path, Query String or Cookies\n* `1202` - Possible Directory Traversal attack: obvious probe (/etc/passwd) found in Body, Path, Query String or Cookies\n* `1203` - Possible Directory Traversal attack: obvious windows path (c:\\) found in Body, Path, Query String or Cookies\n* `1204` - Possible Directory Traversal attack: obvious probe (cmd.exe) found in Body, Path, Query String or Cookies\n* `1205` - Possible Directory Traversal attack: backslash (\\) found in Body, Path, Query String or Cookies\n* `1206` - Possible Directory Traversal attack: slash (/) found in Body, Query String or Cookies\n* `1207` - Possible Directory Traversal attack: obvious path probe (/..;/) found in Body, Query String or Cookies\n* `1208` - Possible Directory Traversal attack: obvious path probe (/.;/) found in Body, Query String or Cookies\n* `1209` - Possible Directory Traversal attack: obvious path probe (/.%2e/) found in Body, Query String or Cookies\n* `1210` - Possible Directory Traversal attack: obvious path probe (/%2e./) found in Body, Query String or Cookies\n* `1302` - Possible XSS attack: html open tag (<) found in Body, Path, Query String or Cookies\n* `1303` - Possible XSS attack: html close tag (>) found in Body, Path, Query String or Cookies\n* `1310` - Possible XSS attack: open square bracket ([) found in Body, Path, Query String or Cookies\n* `1311` - Possible XSS attack: close square bracket (]) found in Body, Path, Query String or Cookies\n* `1312` - Possible XSS attack: tilde character (~) found in Body, Path, Query String or Cookies\n* `1314` - Possible XSS attack: back quote ( `) found in Body, Path, Query String or Cookies\n* `1315` - Possible XSS attack: double encoding (%[2|3]) found in Body, Path, Query String or Cookies\n* `1400` - Possible trick to evade protection: UTF7/8 encoding (&#) found in Body, Path, Query String or Cookies\n* `1401` - Possible trick to evade protection: MS encoding (%U) found in Body, Path, Query String or Cookies\n* `1402` - Possible trick to evade protection: encoded chars (%20-%3F) found in Body, Query String or Cookies\n* `1500` - Possible File Upload attempt: asp/php (.ph, .asp or .ht) found in filename in a multipart POST containing a file\n* `2001` - Possible CVE-2022-22965 attack: Tomcat Pipeline Context tampering",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGERuleIdEnum"
            }
          ]
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "path": {
          "name": "path",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": "^[^|]*$"
          }
        },
        "conditions": {
          "name": "conditions",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "conditions_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWAFExceptionPolymorphicConditionRequest",
            "referenceName": "EDGEWAFExceptionPolymorphicConditionRequest"
          }
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "default": "contains",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEWAFRuleOperatorEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedWorkloadDeploymentRequest": {
      "name": "EDGEPatchedWorkloadDeploymentRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 254,
            "pattern": ".*"
          }
        },
        "current": {
          "name": "current",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "strategy": {
          "name": "strategy",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEDeploymentStrategyRequest",
          "referenceName": "EDGEDeploymentStrategyRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPatchedWorkloadRequest": {
      "name": "EDGEPatchedWorkloadRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "infrastructure": {
          "name": "infrastructure",
          "type": "unknown",
          "constraints": {},
          "default": 1,
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEInfrastructureEnum"
            }
          ]
        },
        "tls": {
          "name": "tls",
          "type": "unknown",
          "constraints": {},
          "default": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETLSWorkloadRequest"
            }
          ]
        },
        "protocols": {
          "name": "protocols",
          "type": "unknown",
          "constraints": {},
          "default": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEProtocolsRequest"
            }
          ]
        },
        "mtls": {
          "name": "mtls",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEMTLSRequest",
          "referenceName": "EDGEMTLSRequest"
        },
        "domains": {
          "name": "domains",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "domains_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "workload_domain_allow_access": {
          "name": "workload_domain_allow_access",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEProtocols": {
      "name": "EDGEProtocols",
      "type": "object",
      "properties": {
        "http": {
          "name": "http",
          "type": "unknown",
          "constraints": {},
          "default": {
            "versions": [
              "http1",
              "http2"
            ],
            "http_ports": [
              80
            ],
            "https_ports": [
              443
            ],
            "quic_ports": null
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHttpProtocol"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEProtocolsRequest": {
      "name": "EDGEProtocolsRequest",
      "type": "object",
      "properties": {
        "http": {
          "name": "http",
          "type": "unknown",
          "constraints": {},
          "default": {
            "versions": [
              "http1",
              "http2"
            ],
            "http_ports": [
              80
            ],
            "https_ports": [
              443
            ],
            "quic_ports": null
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEHttpProtocolRequest"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPurgeInput": {
      "name": "EDGEPurgeInput",
      "type": "object",
      "properties": {
        "items": {
          "name": "items",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "items_item",
            "type": "string",
            "format": "uri",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "layer": {
          "name": "layer",
          "type": "unknown",
          "constraints": {},
          "default": "edge_cache",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGELayerEnum"
            }
          ]
        }
      },
      "required": [
        "items"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEPurgeInputRequest": {
      "name": "EDGEPurgeInputRequest",
      "type": "object",
      "properties": {
        "items": {
          "name": "items",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "items_item",
            "type": "string",
            "format": "uri",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "layer": {
          "name": "layer",
          "type": "unknown",
          "constraints": {},
          "default": "edge_cache",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGELayerEnum"
            }
          ]
        }
      },
      "required": [
        "items"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGERegionEnum": {
      "name": "EDGERegionEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseApplication": {
      "name": "EDGEResponseApplication",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplication",
          "referenceName": "EDGEApplication"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseApplicationDeviceGroups": {
      "name": "EDGEResponseApplicationDeviceGroups",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationDeviceGroups",
          "referenceName": "EDGEApplicationDeviceGroups"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseApplicationFunctionInstance": {
      "name": "EDGEResponseApplicationFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationFunctionInstance",
          "referenceName": "EDGEApplicationFunctionInstance"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseApplicationRequestPhaseRuleEngine": {
      "name": "EDGEResponseApplicationRequestPhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngine",
          "referenceName": "EDGEApplicationRequestPhaseRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseApplicationResponsePhaseRuleEngine": {
      "name": "EDGEResponseApplicationResponsePhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationResponsePhaseRuleEngine",
          "referenceName": "EDGEApplicationResponsePhaseRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncApplication": {
      "name": "EDGEResponseAsyncApplication",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplication",
          "referenceName": "EDGEApplication"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncApplicationDeviceGroups": {
      "name": "EDGEResponseAsyncApplicationDeviceGroups",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationDeviceGroups",
          "referenceName": "EDGEApplicationDeviceGroups"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncApplicationFunctionInstance": {
      "name": "EDGEResponseAsyncApplicationFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationFunctionInstance",
          "referenceName": "EDGEApplicationFunctionInstance"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncApplicationRequestPhaseRuleEngine": {
      "name": "EDGEResponseAsyncApplicationRequestPhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngine",
          "referenceName": "EDGEApplicationRequestPhaseRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncApplicationResponsePhaseRuleEngine": {
      "name": "EDGEResponseAsyncApplicationResponsePhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationResponsePhaseRuleEngine",
          "referenceName": "EDGEApplicationResponsePhaseRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncCacheSetting": {
      "name": "EDGEResponseAsyncCacheSetting",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSetting",
          "referenceName": "EDGECacheSetting"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncConnectorPolymorphic": {
      "name": "EDGEResponseAsyncConnectorPolymorphic",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorPolymorphic",
          "referenceName": "EDGEConnectorPolymorphic"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncCustomPage": {
      "name": "EDGEResponseAsyncCustomPage",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECustomPage",
          "referenceName": "EDGECustomPage"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteApplication": {
      "name": "EDGEResponseAsyncDeleteApplication",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteApplicationDeviceGroups": {
      "name": "EDGEResponseAsyncDeleteApplicationDeviceGroups",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteApplicationFunctionInstance": {
      "name": "EDGEResponseAsyncDeleteApplicationFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine": {
      "name": "EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine": {
      "name": "EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteCacheSetting": {
      "name": "EDGEResponseAsyncDeleteCacheSetting",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteConnectorPolymorphic": {
      "name": "EDGEResponseAsyncDeleteConnectorPolymorphic",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteCustomPage": {
      "name": "EDGEResponseAsyncDeleteCustomPage",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteFirewall": {
      "name": "EDGEResponseAsyncDeleteFirewall",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteFirewallFunctionInstance": {
      "name": "EDGEResponseAsyncDeleteFirewallFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteFirewallRuleEngine": {
      "name": "EDGEResponseAsyncDeleteFirewallRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteFunctionsDoc": {
      "name": "EDGEResponseAsyncDeleteFunctionsDoc",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteNetworkListDetail": {
      "name": "EDGEResponseAsyncDeleteNetworkListDetail",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteWAF": {
      "name": "EDGEResponseAsyncDeleteWAF",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteWAFRule": {
      "name": "EDGEResponseAsyncDeleteWAFRule",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteWorkload": {
      "name": "EDGEResponseAsyncDeleteWorkload",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncDeleteWorkloadDeployment": {
      "name": "EDGEResponseAsyncDeleteWorkloadDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncFirewall": {
      "name": "EDGEResponseAsyncFirewall",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewall",
          "referenceName": "EDGEFirewall"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncFirewallFunctionInstance": {
      "name": "EDGEResponseAsyncFirewallFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallFunctionInstance",
          "referenceName": "EDGEFirewallFunctionInstance"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncFirewallRuleEngine": {
      "name": "EDGEResponseAsyncFirewallRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallRuleEngine",
          "referenceName": "EDGEFirewallRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncFunctionsDoc": {
      "name": "EDGEResponseAsyncFunctionsDoc",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeFunctions",
          "referenceName": "EDGEEdgeFunctions"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncNetworkListDetail": {
      "name": "EDGEResponseAsyncNetworkListDetail",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGENetworkListDetail",
          "referenceName": "EDGENetworkListDetail"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncPurgeInput": {
      "name": "EDGEResponseAsyncPurgeInput",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEPurgeInput",
          "referenceName": "EDGEPurgeInput"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncWAF": {
      "name": "EDGEResponseAsyncWAF",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAF",
          "referenceName": "EDGEWAF"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncWAFRule": {
      "name": "EDGEResponseAsyncWAFRule",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFRule",
          "referenceName": "EDGEWAFRule"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncWorkload": {
      "name": "EDGEResponseAsyncWorkload",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWorkload",
          "referenceName": "EDGEWorkload"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseAsyncWorkloadDeployment": {
      "name": "EDGEResponseAsyncWorkloadDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWorkloadDeployment",
          "referenceName": "EDGEWorkloadDeployment"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestApplication": {
      "name": "EDGEResponseBadRequestApplication",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestSerializerMetaclassModulesField",
          "referenceName": "EDGEResponseBadRequestSerializerMetaclassModulesField"
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "debug": {
          "name": "debug",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "debug_item",
            "type": "string",
            "constraints": {}
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "product_version_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSetting": {
      "name": "EDGEResponseBadRequestCacheSetting",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "browser_cache": {
          "name": "browser_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField",
          "referenceName": "EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestSerializerMetaclassModulesField",
          "referenceName": "EDGEResponseBadRequestSerializerMetaclassModulesField"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField": {
      "name": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "behavior_item",
            "type": "string",
            "constraints": {}
          }
        },
        "cookie_names": {
          "name": "cookie_names",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField": {
      "name": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "behavior_item",
            "type": "string",
            "constraints": {}
          }
        },
        "device_group": {
          "name": "device_group",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField": {
      "name": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "behavior_item",
            "type": "string",
            "constraints": {}
          }
        },
        "fields": {
          "name": "fields",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "sort_enabled": {
          "name": "sort_enabled",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "sort_enabled_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField": {
      "name": "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "enabled_item",
            "type": "string",
            "constraints": {}
          }
        },
        "offset": {
          "name": "offset",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "offset_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField": {
      "name": "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "enabled_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField": {
      "name": "EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField",
      "type": "object",
      "properties": {
        "cache_vary_by_method": {
          "name": "cache_vary_by_method",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "cache_vary_by_querystring": {
          "name": "cache_vary_by_querystring",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField"
        },
        "cache_vary_by_cookies": {
          "name": "cache_vary_by_cookies",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField"
        },
        "cache_vary_by_devices": {
          "name": "cache_vary_by_devices",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField": {
      "name": "EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "behavior_item",
            "type": "string",
            "constraints": {}
          }
        },
        "max_age": {
          "name": "max_age",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "max_age_item",
            "type": "string",
            "constraints": {}
          }
        },
        "stale_cache": {
          "name": "stale_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField"
        },
        "large_file_cache": {
          "name": "large_file_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField": {
      "name": "EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "behavior_item",
            "type": "string",
            "constraints": {}
          }
        },
        "max_age": {
          "name": "max_age",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "max_age_item",
            "type": "string",
            "constraints": {}
          }
        },
        "topology": {
          "name": "topology",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "topology_item",
            "type": "string",
            "constraints": {}
          }
        },
        "tiered_cache_enabled": {
          "name": "tiered_cache_enabled",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "tiered_cache_enabled_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField": {
      "name": "EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField",
      "type": "object",
      "properties": {
        "behavior": {
          "name": "behavior",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "behavior_item",
            "type": "string",
            "constraints": {}
          }
        },
        "max_age": {
          "name": "max_age",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "max_age_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestSerializerMetaclassModulesField": {
      "name": "EDGEResponseBadRequestSerializerMetaclassModulesField",
      "type": "object",
      "properties": {
        "edge_cache": {
          "name": "edge_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField"
        },
        "tiered_cache": {
          "name": "tiered_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField"
        },
        "application_accelerator": {
          "name": "application_accelerator",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField",
          "referenceName": "EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestSerializerMetaclassStrategyField": {
      "name": "EDGEResponseBadRequestSerializerMetaclassStrategyField",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "type_item",
            "type": "string",
            "constraints": {}
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseBadRequestWorkloadDeployment": {
      "name": "EDGEResponseBadRequestWorkloadDeployment",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "strategy": {
          "name": "strategy",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEResponseBadRequestSerializerMetaclassStrategyField",
          "referenceName": "EDGEResponseBadRequestSerializerMetaclassStrategyField"
        },
        "current": {
          "name": "current",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "current_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseConnectorPolymorphic": {
      "name": "EDGEResponseConnectorPolymorphic",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorPolymorphic",
          "referenceName": "EDGEConnectorPolymorphic"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseCustomPage": {
      "name": "EDGEResponseCustomPage",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECustomPage",
          "referenceName": "EDGECustomPage"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteApplication": {
      "name": "EDGEResponseDeleteApplication",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteApplicationFunctionInstance": {
      "name": "EDGEResponseDeleteApplicationFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteApplicationRequestPhaseRuleEngine": {
      "name": "EDGEResponseDeleteApplicationRequestPhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteApplicationResponsePhaseRuleEngine": {
      "name": "EDGEResponseDeleteApplicationResponsePhaseRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteConnectorPolymorphic": {
      "name": "EDGEResponseDeleteConnectorPolymorphic",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteCustomPage": {
      "name": "EDGEResponseDeleteCustomPage",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteFirewall": {
      "name": "EDGEResponseDeleteFirewall",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteFirewallFunctionInstance": {
      "name": "EDGEResponseDeleteFirewallFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteFirewallRuleEngine": {
      "name": "EDGEResponseDeleteFirewallRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteFunctionsDoc": {
      "name": "EDGEResponseDeleteFunctionsDoc",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteNetworkListDetail": {
      "name": "EDGEResponseDeleteNetworkListDetail",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteWAF": {
      "name": "EDGEResponseDeleteWAF",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseDeleteWAFRule": {
      "name": "EDGEResponseDeleteWAFRule",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseFirewall": {
      "name": "EDGEResponseFirewall",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewall",
          "referenceName": "EDGEFirewall"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseFirewallFunctionInstance": {
      "name": "EDGEResponseFirewallFunctionInstance",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallFunctionInstance",
          "referenceName": "EDGEFirewallFunctionInstance"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseFirewallRuleEngine": {
      "name": "EDGEResponseFirewallRuleEngine",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallRuleEngine",
          "referenceName": "EDGEFirewallRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseFunctionsDoc": {
      "name": "EDGEResponseFunctionsDoc",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeFunctions",
          "referenceName": "EDGEEdgeFunctions"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseListCacheSetting": {
      "name": "EDGEResponseListCacheSetting",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
          }
        },
        "browser_cache": {
          "name": "browser_cache",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEBrowserCacheModule",
          "referenceName": "EDGEBrowserCacheModule"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSettingsModules",
          "referenceName": "EDGECacheSettingsModules"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseNetworkListDetail": {
      "name": "EDGEResponseNetworkListDetail",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGENetworkListDetail",
          "referenceName": "EDGENetworkListDetail"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponsePurgeInput": {
      "name": "EDGEResponsePurgeInput",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEPurgeInput",
          "referenceName": "EDGEPurgeInput"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveApplication": {
      "name": "EDGEResponseRetrieveApplication",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplication",
          "referenceName": "EDGEApplication"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveApplicationDeviceGroups": {
      "name": "EDGEResponseRetrieveApplicationDeviceGroups",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationDeviceGroups",
          "referenceName": "EDGEApplicationDeviceGroups"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveApplicationFunctionInstance": {
      "name": "EDGEResponseRetrieveApplicationFunctionInstance",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationFunctionInstance",
          "referenceName": "EDGEApplicationFunctionInstance"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveApplicationRequestPhaseRuleEngine": {
      "name": "EDGEResponseRetrieveApplicationRequestPhaseRuleEngine",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngine",
          "referenceName": "EDGEApplicationRequestPhaseRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveCacheSetting": {
      "name": "EDGEResponseRetrieveCacheSetting",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECacheSetting",
          "referenceName": "EDGECacheSetting"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveConnectorPolymorphic": {
      "name": "EDGEResponseRetrieveConnectorPolymorphic",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEConnectorPolymorphic",
          "referenceName": "EDGEConnectorPolymorphic"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveCustomPage": {
      "name": "EDGEResponseRetrieveCustomPage",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGECustomPage",
          "referenceName": "EDGECustomPage"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveFirewall": {
      "name": "EDGEResponseRetrieveFirewall",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewall",
          "referenceName": "EDGEFirewall"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveFirewallFunctionInstance": {
      "name": "EDGEResponseRetrieveFirewallFunctionInstance",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallFunctionInstance",
          "referenceName": "EDGEFirewallFunctionInstance"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveFirewallRuleEngine": {
      "name": "EDGEResponseRetrieveFirewallRuleEngine",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEFirewallRuleEngine",
          "referenceName": "EDGEFirewallRuleEngine"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveFunctionsDoc": {
      "name": "EDGEResponseRetrieveFunctionsDoc",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEEdgeFunctions",
          "referenceName": "EDGEEdgeFunctions"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveNetworkListDetail": {
      "name": "EDGEResponseRetrieveNetworkListDetail",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGENetworkListDetail",
          "referenceName": "EDGENetworkListDetail"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveWAF": {
      "name": "EDGEResponseRetrieveWAF",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAF",
          "referenceName": "EDGEWAF"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveWAFRule": {
      "name": "EDGEResponseRetrieveWAFRule",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFRule",
          "referenceName": "EDGEWAFRule"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveWorkload": {
      "name": "EDGEResponseRetrieveWorkload",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWorkload",
          "referenceName": "EDGEWorkload"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseRetrieveWorkloadDeployment": {
      "name": "EDGEResponseRetrieveWorkloadDeployment",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWorkloadDeployment",
          "referenceName": "EDGEWorkloadDeployment"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseWAF": {
      "name": "EDGEResponseWAF",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAF",
          "referenceName": "EDGEWAF"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseWAFRule": {
      "name": "EDGEResponseWAFRule",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFRule",
          "referenceName": "EDGEWAFRule"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseWorkload": {
      "name": "EDGEResponseWorkload",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWorkload",
          "referenceName": "EDGEWorkload"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEResponseWorkloadDeployment": {
      "name": "EDGEResponseWorkloadDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWorkloadDeployment",
          "referenceName": "EDGEWorkloadDeployment"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGERuleIdEnum": {
      "name": "EDGERuleIdEnum",
      "type": "integer",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGERulesetsEnum": {
      "name": "EDGERulesetsEnum",
      "type": "integer",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGERuntimeEnum": {
      "name": "EDGERuntimeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESensitivityEnum": {
      "name": "EDGESensitivityEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEServerRoleEnum": {
      "name": "EDGEServerRoleEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEStateCacheModule": {
      "name": "EDGEStateCacheModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGEStateCacheModuleRequest": {
      "name": "EDGEStateCacheModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGETLSWorkload": {
      "name": "EDGETLSWorkload",
      "type": "object",
      "properties": {
        "certificate": {
          "name": "certificate",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        },
        "ciphers": {
          "name": "ciphers",
          "type": "unknown",
          "constraints": {},
          "description": "Allow to configure which set of ciphers will be used when TLS ciphers negotiation.\n\n* `1` - TLSv1.2_2018 - TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256\n* `2` - TLSv1.2_2019 - ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:TLS_AES_128_GCM_SHA256\n* `3` - TLSv1.3_2022 - ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256\n* `4` - TLSv1.2_2021 - ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:TLS_AES_128_GCM_SHA256\n* `5` - Legacy_v2025Q1 - TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:AES256-GCM-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA\n* `6` - Compatible_v2025Q1 - TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:AES256-GCM-SHA384:AES128-GCM-SHA256\n* `7` - Modern_v2025Q1 - TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305\n* `8` - Legacy_v2017Q1 - AES128-CCM:AES128-CCM8:AES128-GCM-SHA256:AES128-SHA:AES128-SHA256:AES256-CCM:AES256-CCM8:AES256-GCM-SHA384:AES256-SHA:AES256-SHA256:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-AES128-CCM8:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-AES256-CCM8:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES256-SHA384:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECiphersEnum"
            }
          ]
        },
        "minimum_version": {
          "name": "minimum_version",
          "type": "unknown",
          "constraints": {},
          "default": "tls_1_3",
          "oneOf": [
            {
              "$ref": "#/components/schemas/EDGEMinimumVersionEnum"
            },
            {
              "$ref": "#/components/schemas/EDGEBlankEnum"
            },
            {
              "$ref": "#/components/schemas/EDGENullEnum"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGETLSWorkloadRequest": {
      "name": "EDGETLSWorkloadRequest",
      "type": "object",
      "properties": {
        "certificate": {
          "name": "certificate",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        },
        "ciphers": {
          "name": "ciphers",
          "type": "unknown",
          "constraints": {},
          "description": "Allow to configure which set of ciphers will be used when TLS ciphers negotiation.\n\n* `1` - TLSv1.2_2018 - TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256\n* `2` - TLSv1.2_2019 - ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:TLS_AES_128_GCM_SHA256\n* `3` - TLSv1.3_2022 - ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256\n* `4` - TLSv1.2_2021 - ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:TLS_AES_128_GCM_SHA256\n* `5` - Legacy_v2025Q1 - TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:AES256-GCM-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA\n* `6` - Compatible_v2025Q1 - TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:AES256-GCM-SHA384:AES128-GCM-SHA256\n* `7` - Modern_v2025Q1 - TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305\n* `8` - Legacy_v2017Q1 - AES128-CCM:AES128-CCM8:AES128-GCM-SHA256:AES128-SHA:AES128-SHA256:AES256-CCM:AES256-CCM8:AES256-GCM-SHA384:AES256-SHA:AES256-SHA256:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-AES128-CCM8:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-AES256-CCM8:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES256-SHA384:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGECiphersEnum"
            }
          ]
        },
        "minimum_version": {
          "name": "minimum_version",
          "type": "unknown",
          "constraints": {},
          "default": "tls_1_3",
          "oneOf": [
            {
              "$ref": "#/components/schemas/EDGEMinimumVersionEnum"
            },
            {
              "$ref": "#/components/schemas/EDGEBlankEnum"
            },
            {
              "$ref": "#/components/schemas/EDGENullEnum"
            }
          ]
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEThreatEnum": {
      "name": "EDGEThreatEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEThresholdsConfigField": {
      "name": "EDGEThresholdsConfigField",
      "type": "object",
      "properties": {
        "threat": {
          "name": "threat",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEThreatEnum",
          "referenceName": "EDGEThreatEnum"
        },
        "sensitivity": {
          "name": "sensitivity",
          "type": "unknown",
          "constraints": {},
          "default": "medium",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGESensitivityEnum"
            }
          ]
        }
      },
      "required": [
        "threat"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEThresholdsConfigFieldRequest": {
      "name": "EDGEThresholdsConfigFieldRequest",
      "type": "object",
      "properties": {
        "threat": {
          "name": "threat",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEThreatEnum",
          "referenceName": "EDGEThreatEnum"
        },
        "sensitivity": {
          "name": "sensitivity",
          "type": "unknown",
          "constraints": {},
          "default": "medium",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGESensitivityEnum"
            }
          ]
        }
      },
      "required": [
        "threat"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGETieredCacheModule": {
      "name": "EDGETieredCacheModule",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGETieredCacheModuleRequest": {
      "name": "EDGETieredCacheModuleRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "EDGETopologyEnum": {
      "name": "EDGETopologyEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGETransportPolicyEnum": {
      "name": "EDGETransportPolicyEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEType15cEnum": {
      "name": "EDGEType15cEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEType528Enum": {
      "name": "EDGEType528Enum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEType689Enum": {
      "name": "EDGEType689Enum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGETypeF11Enum": {
      "name": "EDGETypeF11Enum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEVerificationEnum": {
      "name": "EDGEVerificationEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAF": {
      "name": "EDGEWAF",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "default": "1.0"
        },
        "engine_settings": {
          "name": "engine_settings",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFEngineSettingsField",
          "referenceName": "EDGEWAFEngineSettingsField"
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFEngineSettingsAttributesField": {
      "name": "EDGEWAFEngineSettingsAttributesField",
      "type": "object",
      "properties": {
        "rulesets": {
          "name": "rulesets",
          "type": "array",
          "constraints": {},
          "default": [
            1
          ],
          "items": {
            "name": "rulesets_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGERulesetsEnum",
            "referenceName": "EDGERulesetsEnum"
          }
        },
        "thresholds": {
          "name": "thresholds",
          "type": "array",
          "constraints": {
            "maxItems": 8
          },
          "default": [
            {
              "threat": "cross_site_scripting",
              "sensitivity": "medium"
            },
            {
              "threat": "directory_traversal",
              "sensitivity": "medium"
            },
            {
              "threat": "evading_tricks",
              "sensitivity": "medium"
            },
            {
              "threat": "file_upload",
              "sensitivity": "medium"
            },
            {
              "threat": "identified_attack",
              "sensitivity": "medium"
            },
            {
              "threat": "remote_file_inclusion",
              "sensitivity": "medium"
            },
            {
              "threat": "sql_injection",
              "sensitivity": "medium"
            },
            {
              "threat": "unwanted_access",
              "sensitivity": "medium"
            }
          ],
          "items": {
            "name": "thresholds_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEThresholdsConfigField",
            "referenceName": "EDGEThresholdsConfigField"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFEngineSettingsAttributesFieldRequest": {
      "name": "EDGEWAFEngineSettingsAttributesFieldRequest",
      "type": "object",
      "properties": {
        "rulesets": {
          "name": "rulesets",
          "type": "array",
          "constraints": {},
          "default": [
            1
          ],
          "items": {
            "name": "rulesets_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGERulesetsEnum",
            "referenceName": "EDGERulesetsEnum"
          }
        },
        "thresholds": {
          "name": "thresholds",
          "type": "array",
          "constraints": {
            "maxItems": 8
          },
          "default": [
            {
              "threat": "cross_site_scripting",
              "sensitivity": "medium"
            },
            {
              "threat": "directory_traversal",
              "sensitivity": "medium"
            },
            {
              "threat": "evading_tricks",
              "sensitivity": "medium"
            },
            {
              "threat": "file_upload",
              "sensitivity": "medium"
            },
            {
              "threat": "identified_attack",
              "sensitivity": "medium"
            },
            {
              "threat": "remote_file_inclusion",
              "sensitivity": "medium"
            },
            {
              "threat": "sql_injection",
              "sensitivity": "medium"
            },
            {
              "threat": "unwanted_access",
              "sensitivity": "medium"
            }
          ],
          "items": {
            "name": "thresholds_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEThresholdsConfigFieldRequest",
            "referenceName": "EDGEThresholdsConfigFieldRequest"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFEngineSettingsField": {
      "name": "EDGEWAFEngineSettingsField",
      "type": "object",
      "properties": {
        "engine_version": {
          "name": "engine_version",
          "type": "unknown",
          "constraints": {},
          "default": "2021-Q3",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEngineVersionEnum"
            }
          ]
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "score",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEWAFEngineSettingsFieldTypeEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFEngineSettingsAttributesField",
          "referenceName": "EDGEWAFEngineSettingsAttributesField"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFEngineSettingsFieldRequest": {
      "name": "EDGEWAFEngineSettingsFieldRequest",
      "type": "object",
      "properties": {
        "engine_version": {
          "name": "engine_version",
          "type": "unknown",
          "constraints": {},
          "default": "2021-Q3",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEEngineVersionEnum"
            }
          ]
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "score",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEWAFEngineSettingsFieldTypeEnum"
            }
          ]
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFEngineSettingsAttributesFieldRequest",
          "referenceName": "EDGEWAFEngineSettingsAttributesFieldRequest"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFEngineSettingsFieldTypeEnum": {
      "name": "EDGEWAFEngineSettingsFieldTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionGenericCondition": {
      "name": "EDGEWAFExceptionGenericCondition",
      "type": "object",
      "properties": {
        "match": {
          "name": "match",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFExceptionGenericConditionMatchEnum",
          "referenceName": "EDGEWAFExceptionGenericConditionMatchEnum"
        }
      },
      "required": [
        "match"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionGenericConditionMatchEnum": {
      "name": "EDGEWAFExceptionGenericConditionMatchEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionGenericConditionRequest": {
      "name": "EDGEWAFExceptionGenericConditionRequest",
      "type": "object",
      "properties": {
        "match": {
          "name": "match",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFExceptionGenericConditionMatchEnum",
          "referenceName": "EDGEWAFExceptionGenericConditionMatchEnum"
        }
      },
      "required": [
        "match"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionPolymorphicCondition": {
      "name": "EDGEWAFExceptionPolymorphicCondition",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "match",
          "mapping": {
            "any_http_header_name": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_http_header_value": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_query_string_name": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_query_string_value": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_url": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "body_form_field_name": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "body_form_field_value": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "file_extension": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "raw_body": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "specific_body_form_field_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName",
            "specific_body_form_field_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue",
            "specific_http_header_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName",
            "specific_http_header_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue",
            "specific_query_string_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName",
            "specific_query_string_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEWAFExceptionGenericCondition"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue"
          }
        ]
      },
      "examples": []
    },
    "EDGEWAFExceptionPolymorphicConditionRequest": {
      "name": "EDGEWAFExceptionPolymorphicConditionRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "match",
          "mapping": {
            "any_http_header_name": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_http_header_value": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_query_string_name": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_query_string_value": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_url": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "body_form_field_name": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "body_form_field_value": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "file_extension": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "raw_body": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "specific_body_form_field_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest",
            "specific_body_form_field_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest",
            "specific_http_header_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest",
            "specific_http_header_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest",
            "specific_query_string_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest",
            "specific_query_string_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest"
          }
        ]
      },
      "examples": []
    },
    "EDGEWAFExceptionSpecificConditionOnName": {
      "name": "EDGEWAFExceptionSpecificConditionOnName",
      "type": "object",
      "properties": {
        "match": {
          "name": "match",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameMatchEnum",
          "referenceName": "EDGEWAFExceptionSpecificConditionOnNameMatchEnum"
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "[a-zA-Z0-9<>?()]+"
          }
        }
      },
      "required": [
        "match",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionSpecificConditionOnNameMatchEnum": {
      "name": "EDGEWAFExceptionSpecificConditionOnNameMatchEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionSpecificConditionOnNameRequest": {
      "name": "EDGEWAFExceptionSpecificConditionOnNameRequest",
      "type": "object",
      "properties": {
        "match": {
          "name": "match",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameMatchEnum",
          "referenceName": "EDGEWAFExceptionSpecificConditionOnNameMatchEnum"
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "[a-zA-Z0-9<>?()]+"
          }
        }
      },
      "required": [
        "match",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionSpecificConditionOnValue": {
      "name": "EDGEWAFExceptionSpecificConditionOnValue",
      "type": "object",
      "properties": {
        "match": {
          "name": "match",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueMatchEnum",
          "referenceName": "EDGEWAFExceptionSpecificConditionOnValueMatchEnum"
        },
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "[a-zA-Z0-9<>?()]+"
          }
        }
      },
      "required": [
        "match",
        "value"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionSpecificConditionOnValueMatchEnum": {
      "name": "EDGEWAFExceptionSpecificConditionOnValueMatchEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFExceptionSpecificConditionOnValueRequest": {
      "name": "EDGEWAFExceptionSpecificConditionOnValueRequest",
      "type": "object",
      "properties": {
        "match": {
          "name": "match",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueMatchEnum",
          "referenceName": "EDGEWAFExceptionSpecificConditionOnValueMatchEnum"
        },
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "[a-zA-Z0-9<>?()]+"
          }
        }
      },
      "required": [
        "match",
        "value"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFRequest": {
      "name": "EDGEWAFRequest",
      "type": "object",
      "properties": {
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "default": "1.0"
        },
        "engine_settings": {
          "name": "engine_settings",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEWAFEngineSettingsFieldRequest",
          "referenceName": "EDGEWAFEngineSettingsFieldRequest"
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFRule": {
      "name": "EDGEWAFRule",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "rule_id": {
          "name": "rule_id",
          "type": "unknown",
          "constraints": {},
          "default": 0,
          "description": "0 - All Rules<br>\n1 - Validation of protocol compliance: weird request, unable to parse<br>\n2 - Request too big, stored on disk and not parsed<br>\n10 - Validation of protocol compliance: invalid HEX encoding (null bytes)<br>\n11 - Validation of protocol compliance: missing or unknown Content-Type header in a POST (this rule applies only to Request Body match zone)<br>\n12 - Validation of protocol compliance: invalid formatted URL<br>\n13 - Validation of protocol compliance: invalid POST format<br>\n14 - Validation of protocol compliance: invalid POST boundary<br>\n15 - Validation of protocol compliance: invalid JSON<br>\n16 - Validation of protocol compliance: POST with no body<br>\n17 - Possible SQL Injection attack: validation with libinjection_sql<br>\n18 - Possible XSS attack: validation with libinjection_xss<br>\n1000 - Possible SQL Injection attack: SQL keywords found in Body, Path, Query String or Cookies<br>\n1001 - Possible SQL Injection or XSS attack: double quote (\") found in Body, Path, Query String or Cookies<br>\n1002 - Possible SQL Injection attack: possible hex encoding (0x) found in Body, Path, Query String or Cookies<br>\n1003 - Possible SQL Injection attack: MySQL comment (/*) found in Body, Path, Query String or Cookies<br>\n1004 - Possible SQL Injection attack: MySQL comment (*/) found in Body, Path, Query String or Cookies<br>\n1005 - Possible SQL Injection attack: MySQL keyword (|) found in Body, Path, Query String or Cookies<br>\n1006 - Possible SQL Injection attack: MySQL keyword (&&) found in Body, Path, Query String or Cookies<br>\n1007 - Possible SQL Injection attack: MySQL comment (--) found in Body, Path, Query String or Cookies<br>\n1008 - Possible SQL Injection or XSS attack: semicolon (;) found in Body, Path or Query String<br>\n1009 - Possible SQL Injection attack: equal sign (=) found in Body or Query String<br>\n1010 - Possible SQL Injection or XSS attack: open parenthesis [(] found in Body, Path, Query String or Cookies<br>\n1011 - Possible SQL Injection or XSS attack: close parenthesis [)] found in Body, Path, Query String or Cookies<br>\n1013 - Possible SQL Injection or XSS attack: apostrophe (') found in Body, Path, Query String or Cookies<br>\n1015 - Possible SQL Injection attack: comma (,) found in Body, Path, Query String or Cookies<br>\n1016 - Possible SQL Injection attack: MySQL comment (#) found in Body, Path, Query String or Cookies<br>\n1017 - Possible SQL Injection attack: double at sign (@@) found in Body, Path, Query String or Cookies<br>\n1100 - Possible RFI attack: scheme \"http://\" found in Body, Query String or Cookies<br>\n1101 - Possible RFI attack: scheme \"https://\" found in Body, Query String or Cookies<br>\n1102 - Possible RFI attack: scheme \"ftp://\" found in Body, Query String or Cookies<br>\n1103 - Possible RFI attack: scheme \"php://\" found in Body, Query String or Cookies<br>\n1104 - Possible RFI attack: scheme \"sftp://\" found in Body, Query String or Cookies<br>\n1105 - Possible RFI attack: scheme \"zlib://\" found in Body, Query String or Cookies<br>\n1106 - Possible RFI attack: scheme \"data://\" found in Body, Query String or Cookies<br>\n1107 - Possible RFI attack: scheme \"glob://\" found in Body, Query String or Cookies<br>\n1108 - Possible RFI attack: scheme \"phar://\" found in Body, Query String or Cookies<br>\n1109 - Possible RFI attack: scheme \"file://\" found in Body, Query String or Cookies<br>\n1110 - Possible RFI attack: scheme \"gopher://\" found in Body, Query String or Cookies<br>\n1198 - Possible RCE attack: validation with log4j (Log4Shell) in HEADERS_VAR<br>\n1199 - Possible RCE attack: validation with log4j (Log4Shell) in Body, Path, Query String, Headers or Cookies<br>\n1200 - Possible Directory Traversal attack: double dot (..) found in Body, Path, Query String or Cookies<br>\n1202 - Possible Directory Traversal attack: obvious probe (/etc/passwd) found in Body, Path, Query String or Cookies<br>\n1203 - Possible Directory Traversal attack: obvious windows path (c:\\) found in Body, Path, Query String or Cookies<br>\n1204 - Possible Directory Traversal attack: obvious probe (cmd.exe) found in Body, Path, Query String or Cookies<br>\n1205 - Possible Directory Traversal attack: backslash (\\) found in Body, Path, Query String or Cookies<br>\n1206 - Possible Directory Traversal attack: slash (/) found in Body, Query String or Cookies<br>\n1207 - Possible Directory Traversal attack: obvious path probe (/..;/) found in Body, Query String or Cookies<br>\n1208 - Possible Directory Traversal attack: obvious path probe (/.;/) found in Body, Query String or Cookies<br>\n1209 - Possible Directory Traversal attack: obvious path probe (/.%2e/) found in Body, Query String or Cookies<br>\n1210 - Possible Directory Traversal attack: obvious path probe (/%2e./) found in Body, Query String or Cookies<br>\n1302 - Possible XSS attack: html open tag (<) found in Body, Path, Query String or Cookies<br>\n1303 - Possible XSS attack: html close tag (>) found in Body, Path, Query String or Cookies<br>\n1310 - Possible XSS attack: open square bracket ([) found in Body, Path, Query String or Cookies<br>\n1311 - Possible XSS attack: close square bracket (]) found in Body, Path, Query String or Cookies<br>\n1312 - Possible XSS attack: tilde character (~) found in Body, Path, Query String or Cookies<br>\n1314 - Possible XSS attack: back quote ( `) found in Body, Path, Query String or Cookies<br>\n1315 - Possible XSS attack: double encoding (%[2|3]) found in Body, Path, Query String or Cookies<br>\n1400 - Possible trick to evade protection: UTF7/8 encoding (&#) found in Body, Path, Query String or Cookies<br>\n1401 - Possible trick to evade protection: MS encoding (%U) found in Body, Path, Query String or Cookies<br>\n1402 - Possible trick to evade protection: encoded chars (%20-%3F) found in Body, Query String or Cookies<br>\n1500 - Possible File Upload attempt: asp/php (.ph, .asp or .ht) found in filename in a multipart POST containing a file<br>\n2001 - Possible CVE-2022-22965 attack: Tomcat Pipeline Context tampering\n\n* `0` - All Rules\n* `1` - Validation of protocol compliance: weird request, unable to parse\n* `2` - Request too big, stored on disk and not parsed\n* `10` - Validation of protocol compliance: invalid HEX encoding (null bytes)\n* `11` - Validation of protocol compliance: missing or unknown Content-Type header in a POST (this rule applies only to Request Body match zone)\n* `12` - Validation of protocol compliance: invalid formatted URL\n* `13` - Validation of protocol compliance: invalid POST format\n* `14` - Validation of protocol compliance: invalid POST boundary\n* `15` - Validation of protocol compliance: invalid JSON\n* `16` - Validation of protocol compliance: POST with no body\n* `17` - Possible SQL Injection attack: validation with libinjection_sql\n* `18` - Possible XSS attack: validation with libinjection_xss\n* `1000` - Possible SQL Injection attack: SQL keywords found in Body, Path, Query String or Cookies\n* `1001` - Possible SQL Injection or XSS attack: double quote (\") found in Body, Path, Query String or Cookies\n* `1002` - Possible SQL Injection attack: possible hex encoding (0x) found in Body, Path, Query String or Cookies\n* `1003` - Possible SQL Injection attack: MySQL comment (/*) found in Body, Path, Query String or Cookies\n* `1004` - Possible SQL Injection attack: MySQL comment (*/) found in Body, Path, Query String or Cookies\n* `1005` - Possible SQL Injection attack: MySQL keyword (|) found in Body, Path, Query String or Cookies\n* `1006` - Possible SQL Injection attack: MySQL keyword (&&) found in Body, Path, Query String or Cookies\n* `1007` - Possible SQL Injection attack: MySQL comment (--) found in Body, Path, Query String or Cookies\n* `1008` - Possible SQL Injection or XSS attack: semicolon (;) found in Body, Path or Query String\n* `1009` - Possible SQL Injection attack: equal sign (=) found in Body or Query String\n* `1010` - Possible SQL Injection or XSS attack: open parenthesis [(] found in Body, Path, Query String or Cookies\n* `1011` - Possible SQL Injection or XSS attack: close parenthesis [)] found in Body, Path, Query String or Cookies\n* `1013` - Possible SQL Injection or XSS attack: apostrophe (') found in Body, Path, Query String or Cookies\n* `1015` - Possible SQL Injection attack: comma (,) found in Body, Path, Query String or Cookies\n* `1016` - Possible SQL Injection attack: MySQL comment (#) found in Body, Path, Query String or Cookies\n* `1017` - Possible SQL Injection attack: double at sign (@@) found in Body, Path, Query String or Cookies\n* `1100` - Possible RFI attack: scheme \"http://\" found in Body, Query String or Cookies\n* `1101` - Possible RFI attack: scheme \"https://\" found in Body, Query String or Cookies\n* `1102` - Possible RFI attack: scheme \"ftp://\" found in Body, Query String or Cookies\n* `1103` - Possible RFI attack: scheme \"php://\" found in Body, Query String or Cookies\n* `1104` - Possible RFI attack: scheme \"sftp://\" found in Body, Query String or Cookies\n* `1105` - Possible RFI attack: scheme \"zlib://\" found in Body, Query String or Cookies\n* `1106` - Possible RFI attack: scheme \"data://\" found in Body, Query String or Cookies\n* `1107` - Possible RFI attack: scheme \"glob://\" found in Body, Query String or Cookies\n* `1108` - Possible RFI attack: scheme \"phar://\" found in Body, Query String or Cookies\n* `1109` - Possible RFI attack: scheme \"file://\" found in Body, Query String or Cookies\n* `1110` - Possible RFI attack: scheme \"gopher://\" found in Body, Query String or Cookies\n* `1198` - Possible RCE attack: validation with log4j (Log4Shell) in HEADERS_VAR\n* `1199` - Possible RCE attack: validation with log4j (Log4Shell) in Body, Path, Query String, Headers or Cookies\n* `1200` - Possible Directory Traversal attack: double dot (..) found in Body, Path, Query String or Cookies\n* `1202` - Possible Directory Traversal attack: obvious probe (/etc/passwd) found in Body, Path, Query String or Cookies\n* `1203` - Possible Directory Traversal attack: obvious windows path (c:\\) found in Body, Path, Query String or Cookies\n* `1204` - Possible Directory Traversal attack: obvious probe (cmd.exe) found in Body, Path, Query String or Cookies\n* `1205` - Possible Directory Traversal attack: backslash (\\) found in Body, Path, Query String or Cookies\n* `1206` - Possible Directory Traversal attack: slash (/) found in Body, Query String or Cookies\n* `1207` - Possible Directory Traversal attack: obvious path probe (/..;/) found in Body, Query String or Cookies\n* `1208` - Possible Directory Traversal attack: obvious path probe (/.;/) found in Body, Query String or Cookies\n* `1209` - Possible Directory Traversal attack: obvious path probe (/.%2e/) found in Body, Query String or Cookies\n* `1210` - Possible Directory Traversal attack: obvious path probe (/%2e./) found in Body, Query String or Cookies\n* `1302` - Possible XSS attack: html open tag (<) found in Body, Path, Query String or Cookies\n* `1303` - Possible XSS attack: html close tag (>) found in Body, Path, Query String or Cookies\n* `1310` - Possible XSS attack: open square bracket ([) found in Body, Path, Query String or Cookies\n* `1311` - Possible XSS attack: close square bracket (]) found in Body, Path, Query String or Cookies\n* `1312` - Possible XSS attack: tilde character (~) found in Body, Path, Query String or Cookies\n* `1314` - Possible XSS attack: back quote ( `) found in Body, Path, Query String or Cookies\n* `1315` - Possible XSS attack: double encoding (%[2|3]) found in Body, Path, Query String or Cookies\n* `1400` - Possible trick to evade protection: UTF7/8 encoding (&#) found in Body, Path, Query String or Cookies\n* `1401` - Possible trick to evade protection: MS encoding (%U) found in Body, Path, Query String or Cookies\n* `1402` - Possible trick to evade protection: encoded chars (%20-%3F) found in Body, Query String or Cookies\n* `1500` - Possible File Upload attempt: asp/php (.ph, .asp or .ht) found in filename in a multipart POST containing a file\n* `2001` - Possible CVE-2022-22965 attack: Tomcat Pipeline Context tampering",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGERuleIdEnum"
            }
          ]
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "path": {
          "name": "path",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": "^[^|]*$"
          }
        },
        "conditions": {
          "name": "conditions",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "conditions_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWAFExceptionPolymorphicCondition",
            "referenceName": "EDGEWAFExceptionPolymorphicCondition"
          }
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "default": "contains",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEWAFRuleOperatorEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "conditions",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFRuleOperatorEnum": {
      "name": "EDGEWAFRuleOperatorEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWAFRuleRequest": {
      "name": "EDGEWAFRuleRequest",
      "type": "object",
      "properties": {
        "rule_id": {
          "name": "rule_id",
          "type": "unknown",
          "constraints": {},
          "default": 0,
          "description": "0 - All Rules<br>\n1 - Validation of protocol compliance: weird request, unable to parse<br>\n2 - Request too big, stored on disk and not parsed<br>\n10 - Validation of protocol compliance: invalid HEX encoding (null bytes)<br>\n11 - Validation of protocol compliance: missing or unknown Content-Type header in a POST (this rule applies only to Request Body match zone)<br>\n12 - Validation of protocol compliance: invalid formatted URL<br>\n13 - Validation of protocol compliance: invalid POST format<br>\n14 - Validation of protocol compliance: invalid POST boundary<br>\n15 - Validation of protocol compliance: invalid JSON<br>\n16 - Validation of protocol compliance: POST with no body<br>\n17 - Possible SQL Injection attack: validation with libinjection_sql<br>\n18 - Possible XSS attack: validation with libinjection_xss<br>\n1000 - Possible SQL Injection attack: SQL keywords found in Body, Path, Query String or Cookies<br>\n1001 - Possible SQL Injection or XSS attack: double quote (\") found in Body, Path, Query String or Cookies<br>\n1002 - Possible SQL Injection attack: possible hex encoding (0x) found in Body, Path, Query String or Cookies<br>\n1003 - Possible SQL Injection attack: MySQL comment (/*) found in Body, Path, Query String or Cookies<br>\n1004 - Possible SQL Injection attack: MySQL comment (*/) found in Body, Path, Query String or Cookies<br>\n1005 - Possible SQL Injection attack: MySQL keyword (|) found in Body, Path, Query String or Cookies<br>\n1006 - Possible SQL Injection attack: MySQL keyword (&&) found in Body, Path, Query String or Cookies<br>\n1007 - Possible SQL Injection attack: MySQL comment (--) found in Body, Path, Query String or Cookies<br>\n1008 - Possible SQL Injection or XSS attack: semicolon (;) found in Body, Path or Query String<br>\n1009 - Possible SQL Injection attack: equal sign (=) found in Body or Query String<br>\n1010 - Possible SQL Injection or XSS attack: open parenthesis [(] found in Body, Path, Query String or Cookies<br>\n1011 - Possible SQL Injection or XSS attack: close parenthesis [)] found in Body, Path, Query String or Cookies<br>\n1013 - Possible SQL Injection or XSS attack: apostrophe (') found in Body, Path, Query String or Cookies<br>\n1015 - Possible SQL Injection attack: comma (,) found in Body, Path, Query String or Cookies<br>\n1016 - Possible SQL Injection attack: MySQL comment (#) found in Body, Path, Query String or Cookies<br>\n1017 - Possible SQL Injection attack: double at sign (@@) found in Body, Path, Query String or Cookies<br>\n1100 - Possible RFI attack: scheme \"http://\" found in Body, Query String or Cookies<br>\n1101 - Possible RFI attack: scheme \"https://\" found in Body, Query String or Cookies<br>\n1102 - Possible RFI attack: scheme \"ftp://\" found in Body, Query String or Cookies<br>\n1103 - Possible RFI attack: scheme \"php://\" found in Body, Query String or Cookies<br>\n1104 - Possible RFI attack: scheme \"sftp://\" found in Body, Query String or Cookies<br>\n1105 - Possible RFI attack: scheme \"zlib://\" found in Body, Query String or Cookies<br>\n1106 - Possible RFI attack: scheme \"data://\" found in Body, Query String or Cookies<br>\n1107 - Possible RFI attack: scheme \"glob://\" found in Body, Query String or Cookies<br>\n1108 - Possible RFI attack: scheme \"phar://\" found in Body, Query String or Cookies<br>\n1109 - Possible RFI attack: scheme \"file://\" found in Body, Query String or Cookies<br>\n1110 - Possible RFI attack: scheme \"gopher://\" found in Body, Query String or Cookies<br>\n1198 - Possible RCE attack: validation with log4j (Log4Shell) in HEADERS_VAR<br>\n1199 - Possible RCE attack: validation with log4j (Log4Shell) in Body, Path, Query String, Headers or Cookies<br>\n1200 - Possible Directory Traversal attack: double dot (..) found in Body, Path, Query String or Cookies<br>\n1202 - Possible Directory Traversal attack: obvious probe (/etc/passwd) found in Body, Path, Query String or Cookies<br>\n1203 - Possible Directory Traversal attack: obvious windows path (c:\\) found in Body, Path, Query String or Cookies<br>\n1204 - Possible Directory Traversal attack: obvious probe (cmd.exe) found in Body, Path, Query String or Cookies<br>\n1205 - Possible Directory Traversal attack: backslash (\\) found in Body, Path, Query String or Cookies<br>\n1206 - Possible Directory Traversal attack: slash (/) found in Body, Query String or Cookies<br>\n1207 - Possible Directory Traversal attack: obvious path probe (/..;/) found in Body, Query String or Cookies<br>\n1208 - Possible Directory Traversal attack: obvious path probe (/.;/) found in Body, Query String or Cookies<br>\n1209 - Possible Directory Traversal attack: obvious path probe (/.%2e/) found in Body, Query String or Cookies<br>\n1210 - Possible Directory Traversal attack: obvious path probe (/%2e./) found in Body, Query String or Cookies<br>\n1302 - Possible XSS attack: html open tag (<) found in Body, Path, Query String or Cookies<br>\n1303 - Possible XSS attack: html close tag (>) found in Body, Path, Query String or Cookies<br>\n1310 - Possible XSS attack: open square bracket ([) found in Body, Path, Query String or Cookies<br>\n1311 - Possible XSS attack: close square bracket (]) found in Body, Path, Query String or Cookies<br>\n1312 - Possible XSS attack: tilde character (~) found in Body, Path, Query String or Cookies<br>\n1314 - Possible XSS attack: back quote ( `) found in Body, Path, Query String or Cookies<br>\n1315 - Possible XSS attack: double encoding (%[2|3]) found in Body, Path, Query String or Cookies<br>\n1400 - Possible trick to evade protection: UTF7/8 encoding (&#) found in Body, Path, Query String or Cookies<br>\n1401 - Possible trick to evade protection: MS encoding (%U) found in Body, Path, Query String or Cookies<br>\n1402 - Possible trick to evade protection: encoded chars (%20-%3F) found in Body, Query String or Cookies<br>\n1500 - Possible File Upload attempt: asp/php (.ph, .asp or .ht) found in filename in a multipart POST containing a file<br>\n2001 - Possible CVE-2022-22965 attack: Tomcat Pipeline Context tampering\n\n* `0` - All Rules\n* `1` - Validation of protocol compliance: weird request, unable to parse\n* `2` - Request too big, stored on disk and not parsed\n* `10` - Validation of protocol compliance: invalid HEX encoding (null bytes)\n* `11` - Validation of protocol compliance: missing or unknown Content-Type header in a POST (this rule applies only to Request Body match zone)\n* `12` - Validation of protocol compliance: invalid formatted URL\n* `13` - Validation of protocol compliance: invalid POST format\n* `14` - Validation of protocol compliance: invalid POST boundary\n* `15` - Validation of protocol compliance: invalid JSON\n* `16` - Validation of protocol compliance: POST with no body\n* `17` - Possible SQL Injection attack: validation with libinjection_sql\n* `18` - Possible XSS attack: validation with libinjection_xss\n* `1000` - Possible SQL Injection attack: SQL keywords found in Body, Path, Query String or Cookies\n* `1001` - Possible SQL Injection or XSS attack: double quote (\") found in Body, Path, Query String or Cookies\n* `1002` - Possible SQL Injection attack: possible hex encoding (0x) found in Body, Path, Query String or Cookies\n* `1003` - Possible SQL Injection attack: MySQL comment (/*) found in Body, Path, Query String or Cookies\n* `1004` - Possible SQL Injection attack: MySQL comment (*/) found in Body, Path, Query String or Cookies\n* `1005` - Possible SQL Injection attack: MySQL keyword (|) found in Body, Path, Query String or Cookies\n* `1006` - Possible SQL Injection attack: MySQL keyword (&&) found in Body, Path, Query String or Cookies\n* `1007` - Possible SQL Injection attack: MySQL comment (--) found in Body, Path, Query String or Cookies\n* `1008` - Possible SQL Injection or XSS attack: semicolon (;) found in Body, Path or Query String\n* `1009` - Possible SQL Injection attack: equal sign (=) found in Body or Query String\n* `1010` - Possible SQL Injection or XSS attack: open parenthesis [(] found in Body, Path, Query String or Cookies\n* `1011` - Possible SQL Injection or XSS attack: close parenthesis [)] found in Body, Path, Query String or Cookies\n* `1013` - Possible SQL Injection or XSS attack: apostrophe (') found in Body, Path, Query String or Cookies\n* `1015` - Possible SQL Injection attack: comma (,) found in Body, Path, Query String or Cookies\n* `1016` - Possible SQL Injection attack: MySQL comment (#) found in Body, Path, Query String or Cookies\n* `1017` - Possible SQL Injection attack: double at sign (@@) found in Body, Path, Query String or Cookies\n* `1100` - Possible RFI attack: scheme \"http://\" found in Body, Query String or Cookies\n* `1101` - Possible RFI attack: scheme \"https://\" found in Body, Query String or Cookies\n* `1102` - Possible RFI attack: scheme \"ftp://\" found in Body, Query String or Cookies\n* `1103` - Possible RFI attack: scheme \"php://\" found in Body, Query String or Cookies\n* `1104` - Possible RFI attack: scheme \"sftp://\" found in Body, Query String or Cookies\n* `1105` - Possible RFI attack: scheme \"zlib://\" found in Body, Query String or Cookies\n* `1106` - Possible RFI attack: scheme \"data://\" found in Body, Query String or Cookies\n* `1107` - Possible RFI attack: scheme \"glob://\" found in Body, Query String or Cookies\n* `1108` - Possible RFI attack: scheme \"phar://\" found in Body, Query String or Cookies\n* `1109` - Possible RFI attack: scheme \"file://\" found in Body, Query String or Cookies\n* `1110` - Possible RFI attack: scheme \"gopher://\" found in Body, Query String or Cookies\n* `1198` - Possible RCE attack: validation with log4j (Log4Shell) in HEADERS_VAR\n* `1199` - Possible RCE attack: validation with log4j (Log4Shell) in Body, Path, Query String, Headers or Cookies\n* `1200` - Possible Directory Traversal attack: double dot (..) found in Body, Path, Query String or Cookies\n* `1202` - Possible Directory Traversal attack: obvious probe (/etc/passwd) found in Body, Path, Query String or Cookies\n* `1203` - Possible Directory Traversal attack: obvious windows path (c:\\) found in Body, Path, Query String or Cookies\n* `1204` - Possible Directory Traversal attack: obvious probe (cmd.exe) found in Body, Path, Query String or Cookies\n* `1205` - Possible Directory Traversal attack: backslash (\\) found in Body, Path, Query String or Cookies\n* `1206` - Possible Directory Traversal attack: slash (/) found in Body, Query String or Cookies\n* `1207` - Possible Directory Traversal attack: obvious path probe (/..;/) found in Body, Query String or Cookies\n* `1208` - Possible Directory Traversal attack: obvious path probe (/.;/) found in Body, Query String or Cookies\n* `1209` - Possible Directory Traversal attack: obvious path probe (/.%2e/) found in Body, Query String or Cookies\n* `1210` - Possible Directory Traversal attack: obvious path probe (/%2e./) found in Body, Query String or Cookies\n* `1302` - Possible XSS attack: html open tag (<) found in Body, Path, Query String or Cookies\n* `1303` - Possible XSS attack: html close tag (>) found in Body, Path, Query String or Cookies\n* `1310` - Possible XSS attack: open square bracket ([) found in Body, Path, Query String or Cookies\n* `1311` - Possible XSS attack: close square bracket (]) found in Body, Path, Query String or Cookies\n* `1312` - Possible XSS attack: tilde character (~) found in Body, Path, Query String or Cookies\n* `1314` - Possible XSS attack: back quote ( `) found in Body, Path, Query String or Cookies\n* `1315` - Possible XSS attack: double encoding (%[2|3]) found in Body, Path, Query String or Cookies\n* `1400` - Possible trick to evade protection: UTF7/8 encoding (&#) found in Body, Path, Query String or Cookies\n* `1401` - Possible trick to evade protection: MS encoding (%U) found in Body, Path, Query String or Cookies\n* `1402` - Possible trick to evade protection: encoded chars (%20-%3F) found in Body, Query String or Cookies\n* `1500` - Possible File Upload attempt: asp/php (.ph, .asp or .ht) found in filename in a multipart POST containing a file\n* `2001` - Possible CVE-2022-22965 attack: Tomcat Pipeline Context tampering",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGERuleIdEnum"
            }
          ]
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "path": {
          "name": "path",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": "^[^|]*$"
          }
        },
        "conditions": {
          "name": "conditions",
          "type": "array",
          "constraints": {
            "minItems": 1
          },
          "items": {
            "name": "conditions_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGEWAFExceptionPolymorphicConditionRequest",
            "referenceName": "EDGEWAFExceptionPolymorphicConditionRequest"
          }
        },
        "operator": {
          "name": "operator",
          "type": "unknown",
          "constraints": {},
          "default": "contains",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEWAFRuleOperatorEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "conditions",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWorkload": {
      "name": "EDGEWorkload",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "infrastructure": {
          "name": "infrastructure",
          "type": "unknown",
          "constraints": {},
          "default": 1,
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEInfrastructureEnum"
            }
          ]
        },
        "tls": {
          "name": "tls",
          "type": "unknown",
          "constraints": {},
          "default": {
            "certificate": null,
            "minimum_version": "tls_1_3"
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETLSWorkload"
            }
          ]
        },
        "protocols": {
          "name": "protocols",
          "type": "unknown",
          "constraints": {},
          "default": {
            "http": {
              "versions": [
                "http1",
                "http2"
              ],
              "http_ports": [
                80
              ],
              "https_ports": [
                443
              ],
              "quic_ports": null
            }
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEProtocols"
            }
          ]
        },
        "mtls": {
          "name": "mtls",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEMTLS",
          "referenceName": "EDGEMTLS"
        },
        "domains": {
          "name": "domains",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "domains_item",
            "type": "string",
            "constraints": {}
          }
        },
        "workload_domain_allow_access": {
          "name": "workload_domain_allow_access",
          "type": "boolean",
          "constraints": {}
        },
        "workload_domain": {
          "name": "workload_domain",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "default": "",
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "pattern": "^(custom|\\d+\\.\\d+)$"
          },
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "workload_domain"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWorkloadDeployment": {
      "name": "EDGEWorkloadDeployment",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 254,
            "pattern": ".*"
          }
        },
        "current": {
          "name": "current",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "strategy": {
          "name": "strategy",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEDeploymentStrategy",
          "referenceName": "EDGEDeploymentStrategy"
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "strategy"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWorkloadDeploymentRequest": {
      "name": "EDGEWorkloadDeploymentRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 254,
            "pattern": ".*"
          }
        },
        "current": {
          "name": "current",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "strategy": {
          "name": "strategy",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEDeploymentStrategyRequest",
          "referenceName": "EDGEDeploymentStrategyRequest"
        }
      },
      "required": [
        "name",
        "strategy"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGEWorkloadRequest": {
      "name": "EDGEWorkloadRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "infrastructure": {
          "name": "infrastructure",
          "type": "unknown",
          "constraints": {},
          "default": 1,
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEInfrastructureEnum"
            }
          ]
        },
        "tls": {
          "name": "tls",
          "type": "unknown",
          "constraints": {},
          "default": {
            "certificate": null,
            "minimum_version": "tls_1_3"
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGETLSWorkloadRequest"
            }
          ]
        },
        "protocols": {
          "name": "protocols",
          "type": "unknown",
          "constraints": {},
          "default": {
            "http": {
              "versions": [
                "http1",
                "http2"
              ],
              "http_ports": [
                80
              ],
              "https_ports": [
                443
              ],
              "quic_ports": null
            }
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGEProtocolsRequest"
            }
          ]
        },
        "mtls": {
          "name": "mtls",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGEMTLSRequest",
          "referenceName": "EDGEMTLSRequest"
        },
        "domains": {
          "name": "domains",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "domains_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "workload_domain_allow_access": {
          "name": "workload_domain_allow_access",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSAggregatedField": {
      "name": "METRICSAggregatedField",
      "type": "object",
      "properties": {
        "aggregation": {
          "name": "aggregation",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "variable": {
          "name": "variable",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        }
      },
      "required": [
        "aggregation",
        "variable"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSAggregatedFieldRequest": {
      "name": "METRICSAggregatedFieldRequest",
      "type": "object",
      "properties": {
        "aggregation": {
          "name": "aggregation",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "variable": {
          "name": "variable",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "required": [
        "aggregation",
        "variable"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSAggregationTypeEnum": {
      "name": "METRICSAggregationTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSBaseQuery": {
      "name": "METRICSBaseQuery",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "dataset": {
          "name": "dataset",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "filters": {
          "name": "filters",
          "type": "object",
          "constraints": {}
        },
        "group_by": {
          "name": "group_by",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "group_by_item",
            "type": "string",
            "constraints": {
              "maxLength": 255
            }
          }
        },
        "limit": {
          "name": "limit",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 10000
          }
        },
        "aggregated_fields": {
          "name": "aggregated_fields",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "aggregated_fields_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSAggregatedField",
            "referenceName": "METRICSAggregatedField"
          }
        },
        "calculated_fields": {
          "name": "calculated_fields",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "calculated_fields_item",
            "type": "string",
            "constraints": {
              "maxLength": 255
            }
          }
        },
        "order_direction": {
          "name": "order_direction",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSOrderDirectionEnum",
          "referenceName": "METRICSOrderDirectionEnum"
        },
        "top_x": {
          "name": "top_x",
          "type": "boolean",
          "constraints": {}
        },
        "max_y_axis": {
          "name": "max_y_axis",
          "type": "integer",
          "constraints": {}
        }
      },
      "required": [
        "dataset",
        "id",
        "limit",
        "order_direction"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSBaseQueryRequest": {
      "name": "METRICSBaseQueryRequest",
      "type": "object",
      "properties": {
        "dataset": {
          "name": "dataset",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "filters": {
          "name": "filters",
          "type": "object",
          "constraints": {}
        },
        "group_by": {
          "name": "group_by",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "group_by_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 255
            }
          }
        },
        "limit": {
          "name": "limit",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 10000
          }
        },
        "aggregated_fields": {
          "name": "aggregated_fields",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "aggregated_fields_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSAggregatedFieldRequest",
            "referenceName": "METRICSAggregatedFieldRequest"
          }
        },
        "calculated_fields": {
          "name": "calculated_fields",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "calculated_fields_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 255
            }
          }
        },
        "order_direction": {
          "name": "order_direction",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSOrderDirectionEnum",
          "referenceName": "METRICSOrderDirectionEnum"
        },
        "top_x": {
          "name": "top_x",
          "type": "boolean",
          "constraints": {}
        },
        "max_y_axis": {
          "name": "max_y_axis",
          "type": "integer",
          "constraints": {}
        }
      },
      "required": [
        "dataset",
        "limit",
        "order_direction"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSComparisonTypeEnum": {
      "name": "METRICSComparisonTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false,
        "businessRules": [
          {
            "type": "dependency",
            "description": "* `inverse` - The lower the value, the better the result or performance.\n* `neutral` - There is no general rule to say whether a value is good or bad, as it depends on the context.\n* `regular` - The higher the value, the better the result or performance."
          }
        ]
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSDashboard": {
      "name": "METRICSDashboard",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        },
        "folder_id": {
          "name": "folder_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "folder_id",
        "id",
        "name",
        "scope"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSDashboardRequest": {
      "name": "METRICSDashboardRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        }
      },
      "required": [
        "name",
        "scope"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSDataUnitEnum": {
      "name": "METRICSDataUnitEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSFolder": {
      "name": "METRICSFolder",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        }
      },
      "required": [
        "id",
        "name",
        "scope"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSFolderRequest": {
      "name": "METRICSFolderRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        }
      },
      "required": [
        "name",
        "scope"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSJSONAPIErrorObject": {
      "name": "METRICSJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/METRICSJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSJSONAPIErrorResponse": {
      "name": "METRICSJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSJSONAPIErrorObject",
            "referenceName": "METRICSJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSJSONAPIErrorSource": {
      "name": "METRICSJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSLibraryReportRequest": {
      "name": "METRICSLibraryReportRequest",
      "type": "object",
      "properties": {
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSTypeEnum",
          "referenceName": "METRICSTypeEnum"
        },
        "x_axis": {
          "name": "x_axis",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "aggregation_type": {
          "name": "aggregation_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSAggregationTypeEnum",
          "referenceName": "METRICSAggregationTypeEnum"
        },
        "data_unit": {
          "name": "data_unit",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDataUnitEnum",
          "referenceName": "METRICSDataUnitEnum"
        },
        "queries": {
          "name": "queries",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "queries_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSBaseQueryRequest",
            "referenceName": "METRICSBaseQueryRequest"
          }
        },
        "library": {
          "name": "library",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        },
        "rotated": {
          "name": "rotated",
          "type": "boolean",
          "constraints": {}
        },
        "comparison_type": {
          "name": "comparison_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSComparisonTypeEnum",
          "referenceName": "METRICSComparisonTypeEnum"
        },
        "help_center_path": {
          "name": "help_center_path",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "required": [
        "aggregation_type",
        "data_unit",
        "description",
        "name",
        "queries",
        "scope",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSOrder": {
      "name": "METRICSOrder",
      "type": "object",
      "properties": {
        "order": {
          "name": "order",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "order_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSOrderDirectionEnum": {
      "name": "METRICSOrderDirectionEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSOrderRequest": {
      "name": "METRICSOrderRequest",
      "type": "object",
      "properties": {
        "order": {
          "name": "order",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "order_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [
        "order"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSPaginatedResponseListDashboardList": {
      "name": "METRICSPaginatedResponseListDashboardList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSResponseListDashboard",
            "referenceName": "METRICSResponseListDashboard"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSPaginatedResponseListFolderList": {
      "name": "METRICSPaginatedResponseListFolderList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSResponseListFolder",
            "referenceName": "METRICSResponseListFolder"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSPaginatedResponseListReportList": {
      "name": "METRICSPaginatedResponseListReportList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSResponseListReport",
            "referenceName": "METRICSResponseListReport"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSPaginatedResponseListRowList": {
      "name": "METRICSPaginatedResponseListRowList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSResponseListRow",
            "referenceName": "METRICSResponseListRow"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSPatchedDashboardRequest": {
      "name": "METRICSPatchedDashboardRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSPatchedFolderRequest": {
      "name": "METRICSPatchedFolderRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSRecommendationRequest": {
      "name": "METRICSRecommendationRequest",
      "type": "object",
      "properties": {
        "dashboard_id": {
          "name": "dashboard_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        }
      },
      "required": [
        "dashboard_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSReport": {
      "name": "METRICSReport",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSTypeEnum",
          "referenceName": "METRICSTypeEnum"
        },
        "x_axis": {
          "name": "x_axis",
          "type": "string",
          "constraints": {
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "aggregation_type": {
          "name": "aggregation_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSAggregationTypeEnum",
          "referenceName": "METRICSAggregationTypeEnum"
        },
        "data_unit": {
          "name": "data_unit",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDataUnitEnum",
          "referenceName": "METRICSDataUnitEnum"
        },
        "queries": {
          "name": "queries",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "queries_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSBaseQuery",
            "referenceName": "METRICSBaseQuery"
          }
        },
        "order": {
          "name": "order",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "rotated": {
          "name": "rotated",
          "type": "boolean",
          "constraints": {}
        },
        "comparison_type": {
          "name": "comparison_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSComparisonTypeEnum",
          "referenceName": "METRICSComparisonTypeEnum"
        },
        "help_center_path": {
          "name": "help_center_path",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "library": {
          "name": "library",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "aggregation_type",
        "data_unit",
        "description",
        "id",
        "name",
        "order",
        "queries",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSReportRequest": {
      "name": "METRICSReportRequest",
      "type": "object",
      "properties": {
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSTypeEnum",
          "referenceName": "METRICSTypeEnum"
        },
        "x_axis": {
          "name": "x_axis",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "aggregation_type": {
          "name": "aggregation_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSAggregationTypeEnum",
          "referenceName": "METRICSAggregationTypeEnum"
        },
        "data_unit": {
          "name": "data_unit",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDataUnitEnum",
          "referenceName": "METRICSDataUnitEnum"
        },
        "queries": {
          "name": "queries",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "queries_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSBaseQueryRequest",
            "referenceName": "METRICSBaseQueryRequest"
          }
        },
        "columns": {
          "name": "columns",
          "type": "integer",
          "constraints": {
            "maximum": 12
          },
          "writeOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "rotated": {
          "name": "rotated",
          "type": "boolean",
          "constraints": {}
        },
        "comparison_type": {
          "name": "comparison_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSComparisonTypeEnum",
          "referenceName": "METRICSComparisonTypeEnum"
        },
        "help_center_path": {
          "name": "help_center_path",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "library": {
          "name": "library",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "aggregation_type",
        "columns",
        "data_unit",
        "description",
        "name",
        "queries",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncDashboard": {
      "name": "METRICSResponseAsyncDashboard",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDashboard",
          "referenceName": "METRICSDashboard"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncDeleteDashboard": {
      "name": "METRICSResponseAsyncDeleteDashboard",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncDeleteFolder": {
      "name": "METRICSResponseAsyncDeleteFolder",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncDeleteReport": {
      "name": "METRICSResponseAsyncDeleteReport",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncDeleteRow": {
      "name": "METRICSResponseAsyncDeleteRow",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncFolder": {
      "name": "METRICSResponseAsyncFolder",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSFolder",
          "referenceName": "METRICSFolder"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncOrder": {
      "name": "METRICSResponseAsyncOrder",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSOrder",
          "referenceName": "METRICSOrder"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncReport": {
      "name": "METRICSResponseAsyncReport",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSReport",
          "referenceName": "METRICSReport"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseAsyncRow": {
      "name": "METRICSResponseAsyncRow",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSRow",
          "referenceName": "METRICSRow"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseDashboard": {
      "name": "METRICSResponseDashboard",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDashboard",
          "referenceName": "METRICSDashboard"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseDeleteDashboard": {
      "name": "METRICSResponseDeleteDashboard",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseDeleteFolder": {
      "name": "METRICSResponseDeleteFolder",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseDeleteReport": {
      "name": "METRICSResponseDeleteReport",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseDeleteRow": {
      "name": "METRICSResponseDeleteRow",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseFolder": {
      "name": "METRICSResponseFolder",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSFolder",
          "referenceName": "METRICSFolder"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseListDashboard": {
      "name": "METRICSResponseListDashboard",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        },
        "folder_id": {
          "name": "folder_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "folder_id",
        "id",
        "name",
        "scope"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseListFolder": {
      "name": "METRICSResponseListFolder",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "scope": {
          "name": "scope",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSScopeEnum",
          "referenceName": "METRICSScopeEnum"
        }
      },
      "required": [
        "id",
        "name",
        "scope"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseListReport": {
      "name": "METRICSResponseListReport",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSTypeEnum",
          "referenceName": "METRICSTypeEnum"
        },
        "x_axis": {
          "name": "x_axis",
          "type": "string",
          "constraints": {
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "aggregation_type": {
          "name": "aggregation_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSAggregationTypeEnum",
          "referenceName": "METRICSAggregationTypeEnum"
        },
        "data_unit": {
          "name": "data_unit",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDataUnitEnum",
          "referenceName": "METRICSDataUnitEnum"
        },
        "queries": {
          "name": "queries",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "queries_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/METRICSBaseQuery",
            "referenceName": "METRICSBaseQuery"
          }
        },
        "order": {
          "name": "order",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "rotated": {
          "name": "rotated",
          "type": "boolean",
          "constraints": {}
        },
        "comparison_type": {
          "name": "comparison_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSComparisonTypeEnum",
          "referenceName": "METRICSComparisonTypeEnum"
        },
        "help_center_path": {
          "name": "help_center_path",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "library": {
          "name": "library",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "aggregation_type",
        "data_unit",
        "description",
        "id",
        "name",
        "order",
        "queries",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseListRow": {
      "name": "METRICSResponseListRow",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "order": {
          "name": "order",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "order",
        "title"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseOrder": {
      "name": "METRICSResponseOrder",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSOrder",
          "referenceName": "METRICSOrder"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseReport": {
      "name": "METRICSResponseReport",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSReport",
          "referenceName": "METRICSReport"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseRetrieveDashboard": {
      "name": "METRICSResponseRetrieveDashboard",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSDashboard",
          "referenceName": "METRICSDashboard"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseRetrieveFolder": {
      "name": "METRICSResponseRetrieveFolder",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSFolder",
          "referenceName": "METRICSFolder"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseRetrieveReport": {
      "name": "METRICSResponseRetrieveReport",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSReport",
          "referenceName": "METRICSReport"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseRetrieveRow": {
      "name": "METRICSResponseRetrieveRow",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSRow",
          "referenceName": "METRICSRow"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSResponseRow": {
      "name": "METRICSResponseRow",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/METRICSRow",
          "referenceName": "METRICSRow"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSRow": {
      "name": "METRICSRow",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "order": {
          "name": "order",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "order",
        "title"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSRowRequest": {
      "name": "METRICSRowRequest",
      "type": "object",
      "properties": {
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "required": [
        "title"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSScopeEnum": {
      "name": "METRICSScopeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "METRICSTypeEnum": {
      "name": "METRICSTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLDatabaseRequest": {
      "name": "EDGESQLDatabaseRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 50,
            "pattern": "^[A-Za-z0-9-]{6,50}$"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLJSONAPIErrorObject": {
      "name": "EDGESQLJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGESQLJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "unknown",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLJSONAPIErrorResponse": {
      "name": "EDGESQLJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGESQLJSONAPIErrorObject",
            "referenceName": "EDGESQLJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLJSONAPIErrorSource": {
      "name": "EDGESQLJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLOpenAPISchema": {
      "name": "EDGESQLOpenAPISchema",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 50,
            "pattern": "^[A-Za-z0-9-]{6,50}$"
          }
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "default": "creating",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/EDGESQLStatusEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "description": "Last editor of the schema.",
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "status"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLPaginatedOpenAPISchemaList": {
      "name": "EDGESQLPaginatedOpenAPISchemaList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/EDGESQLOpenAPISchema",
            "referenceName": "EDGESQLOpenAPISchema"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseAsyncDeleteOpenAPISchema": {
      "name": "EDGESQLResponseAsyncDeleteOpenAPISchema",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseAsyncOpenAPISchema": {
      "name": "EDGESQLResponseAsyncOpenAPISchema",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGESQLOpenAPISchema",
          "referenceName": "EDGESQLOpenAPISchema"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseAsyncSQLResult": {
      "name": "EDGESQLResponseAsyncSQLResult",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGESQLSQLResult",
          "referenceName": "EDGESQLSQLResult"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseDeleteOpenAPISchema": {
      "name": "EDGESQLResponseDeleteOpenAPISchema",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseOpenAPISchema": {
      "name": "EDGESQLResponseOpenAPISchema",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGESQLOpenAPISchema",
          "referenceName": "EDGESQLOpenAPISchema"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseRetrieveOpenAPISchema": {
      "name": "EDGESQLResponseRetrieveOpenAPISchema",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGESQLOpenAPISchema",
          "referenceName": "EDGESQLOpenAPISchema"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLResponseSQLResult": {
      "name": "EDGESQLResponseSQLResult",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/EDGESQLSQLResult",
          "referenceName": "EDGESQLSQLResult"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLSQLResult": {
      "name": "EDGESQLSQLResult",
      "type": "object",
      "properties": {
        "columns": {
          "name": "columns",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "columns_item",
            "type": "unknown",
            "constraints": {}
          }
        },
        "rows": {
          "name": "rows",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rows_item",
            "type": "unknown",
            "constraints": {}
          }
        }
      },
      "required": [
        "columns",
        "rows"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLSQLStatementsRequest": {
      "name": "EDGESQLSQLStatementsRequest",
      "type": "object",
      "properties": {
        "statements": {
          "name": "statements",
          "type": "array",
          "constraints": {
            "maxItems": 1000
          },
          "items": {
            "name": "statements_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "statements"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "EDGESQLStatusEnum": {
      "name": "EDGESQLStatusEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSCredit": {
      "name": "PAYMENTSCredit",
      "type": "object",
      "properties": {
        "amount": {
          "name": "amount",
          "type": "string",
          "format": "decimal",
          "constraints": {
            "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$"
          }
        },
        "client_id": {
          "name": "client_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        },
        "currency": {
          "name": "currency",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        },
        "entry_type": {
          "name": "entry_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        },
        "expiration_date": {
          "name": "expiration_date",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        },
        "customer_stripe_id": {
          "name": "customer_stripe_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          },
          "readOnly": true
        }
      },
      "required": [
        "amount",
        "client_id",
        "created",
        "currency",
        "customer_stripe_id",
        "description",
        "entry_type",
        "expiration_date"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSCreditRequest": {
      "name": "PAYMENTSCreditRequest",
      "type": "object",
      "properties": {
        "amount": {
          "name": "amount",
          "type": "string",
          "format": "decimal",
          "constraints": {
            "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$"
          }
        }
      },
      "required": [
        "amount"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSJSONAPIErrorObject": {
      "name": "PAYMENTSJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/PAYMENTSJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "unknown",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSJSONAPIErrorResponse": {
      "name": "PAYMENTSJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/PAYMENTSJSONAPIErrorObject",
            "referenceName": "PAYMENTSJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSJSONAPIErrorSource": {
      "name": "PAYMENTSJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSPaginatedPaymentHistoryList": {
      "name": "PAYMENTSPaginatedPaymentHistoryList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/PAYMENTSPaymentHistory",
            "referenceName": "PAYMENTSPaymentHistory"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSPaginatedResponsePaymentMethodList": {
      "name": "PAYMENTSPaginatedResponsePaymentMethodList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/PAYMENTSResponsePaymentMethod",
            "referenceName": "PAYMENTSResponsePaymentMethod"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSPatchedPartialUpdateRequest": {
      "name": "PAYMENTSPatchedPartialUpdateRequest",
      "type": "object",
      "properties": {
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSPaymentHistory": {
      "name": "PAYMENTSPaymentHistory",
      "type": "object",
      "properties": {
        "amount_with_currency": {
          "name": "amount_with_currency",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "invoice_number": {
          "name": "invoice_number",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "invoice_url": {
          "name": "invoice_url",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^/account/\\d+/invoice\\?billing_month=\\d{4}-\\d{2}$"
          }
        },
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 30,
            "pattern": "^[\\w\\s]*$"
          }
        },
        "payment_due": {
          "name": "payment_due",
          "type": "string",
          "format": "date",
          "constraints": {}
        },
        "card_brand": {
          "name": "card_brand",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[\\w\\s]*$"
          }
        },
        "payment_method_details": {
          "name": "payment_method_details",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "amount_with_currency",
        "card_brand",
        "invoice_number",
        "invoice_url",
        "payment_due",
        "payment_method_details",
        "status"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSPaymentMethod": {
      "name": "PAYMENTSPaymentMethod",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "card_holder": {
          "name": "card_holder",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-zA-Z ]+$"
          }
        },
        "card_brand": {
          "name": "card_brand",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$"
          }
        },
        "card_expiration_month": {
          "name": "card_expiration_month",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 12
          }
        },
        "card_expiration_year": {
          "name": "card_expiration_year",
          "type": "integer",
          "constraints": {
            "minimum": 2022,
            "maximum": 2099
          }
        },
        "card_last_4_digits": {
          "name": "card_last_4_digits",
          "type": "string",
          "constraints": {
            "minLength": 4,
            "maxLength": 4,
            "pattern": "^\\d{4}$"
          }
        },
        "card_address_zip": {
          "name": "card_address_zip",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 20,
            "pattern": "^[\\w\\s-]+$"
          }
        },
        "card_country": {
          "name": "card_country",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[a-zA-Z ]+$"
          }
        },
        "card_address_line1": {
          "name": "card_address_line1",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "card_address_line2": {
          "name": "card_address_line2",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "card_id": {
          "name": "card_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "card_address_zip",
        "card_brand",
        "card_country",
        "card_expiration_month",
        "card_expiration_year",
        "card_holder",
        "card_id",
        "card_last_4_digits",
        "id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSPaymentMethodRequest": {
      "name": "PAYMENTSPaymentMethodRequest",
      "type": "object",
      "properties": {
        "card_holder": {
          "name": "card_holder",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-zA-Z ]+$"
          }
        },
        "card_brand": {
          "name": "card_brand",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$"
          }
        },
        "card_expiration_month": {
          "name": "card_expiration_month",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 12
          }
        },
        "card_expiration_year": {
          "name": "card_expiration_year",
          "type": "integer",
          "constraints": {
            "minimum": 2022,
            "maximum": 2099
          }
        },
        "card_last_4_digits": {
          "name": "card_last_4_digits",
          "type": "string",
          "constraints": {
            "minLength": 4,
            "maxLength": 4,
            "pattern": "^\\d{4}$"
          }
        },
        "card_address_zip": {
          "name": "card_address_zip",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 20,
            "pattern": "^[\\w\\s-]+$"
          }
        },
        "card_country": {
          "name": "card_country",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[a-zA-Z ]+$"
          }
        },
        "card_address_line1": {
          "name": "card_address_line1",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "card_address_line2": {
          "name": "card_address_line2",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "stripe_token": {
          "name": "stripe_token",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "card_id": {
          "name": "card_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "card_address_zip",
        "card_brand",
        "card_country",
        "card_expiration_month",
        "card_expiration_year",
        "card_holder",
        "card_id",
        "card_last_4_digits",
        "stripe_token"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSResponseAsyncCredit": {
      "name": "PAYMENTSResponseAsyncCredit",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/PAYMENTSCredit",
          "referenceName": "PAYMENTSCredit"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSResponseAsyncDeletePaymentMethod": {
      "name": "PAYMENTSResponseAsyncDeletePaymentMethod",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSResponseAsyncPaymentMethod": {
      "name": "PAYMENTSResponseAsyncPaymentMethod",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/PAYMENTSPaymentMethod",
          "referenceName": "PAYMENTSPaymentMethod"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSResponseCredit": {
      "name": "PAYMENTSResponseCredit",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/PAYMENTSCredit",
          "referenceName": "PAYMENTSCredit"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSResponseDeletePaymentMethod": {
      "name": "PAYMENTSResponseDeletePaymentMethod",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "PAYMENTSResponsePaymentMethod": {
      "name": "PAYMENTSResponsePaymentMethod",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/PAYMENTSPaymentMethod",
          "referenceName": "PAYMENTSPaymentMethod"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSAccount": {
      "name": "ACCOUNTSAccount",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSBrand",
            "Organization": "#/components/schemas/ACCOUNTSOrganization",
            "Reseller": "#/components/schemas/ACCOUNTSReseller",
            "Workspace": "#/components/schemas/ACCOUNTSWorkspace"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSBrand"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSOrganization"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSReseller"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSWorkspace"
          }
        ]
      },
      "examples": []
    },
    "ACCOUNTSAccountInfo": {
      "name": "ACCOUNTSAccountInfo",
      "type": "object",
      "properties": {
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {}
        }
      },
      "required": [
        "info"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSAccountRequest": {
      "name": "ACCOUNTSAccountRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSBrandRequest",
            "Organization": "#/components/schemas/ACCOUNTSOrganizationRequest",
            "Reseller": "#/components/schemas/ACCOUNTSResellerRequest",
            "Workspace": "#/components/schemas/ACCOUNTSWorkspaceRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSBrandRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSOrganizationRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSResellerRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSWorkspaceRequest"
          }
        ]
      },
      "examples": []
    },
    "ACCOUNTSBrand": {
      "name": "ACCOUNTSBrand",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {},
          "readOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "active",
        "created",
        "id",
        "info",
        "last_editor",
        "last_modified",
        "name",
        "parent_id",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSBrandRequest": {
      "name": "ACCOUNTSBrandRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSCreateAccountRequest": {
      "name": "ACCOUNTSCreateAccountRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSCreateBrandRequest",
            "Organization": "#/components/schemas/ACCOUNTSCreateOrganizationRequest",
            "Reseller": "#/components/schemas/ACCOUNTSCreateResellerRequest",
            "Workspace": "#/components/schemas/ACCOUNTSCreateWorkspaceRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSCreateBrandRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSCreateOrganizationRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSCreateResellerRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSCreateWorkspaceRequest"
          }
        ]
      },
      "examples": []
    },
    "ACCOUNTSCreateBrandRequest": {
      "name": "ACCOUNTSCreateBrandRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {}
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "name",
        "parent_id",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSCreateOrganizationRequest": {
      "name": "ACCOUNTSCreateOrganizationRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {}
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "name",
        "parent_id",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSCreateResellerRequest": {
      "name": "ACCOUNTSCreateResellerRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {}
        },
        "currency_iso_code": {
          "name": "currency_iso_code",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSCurrencyIsoCodeEnum",
          "referenceName": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        "terms_of_service_url": {
          "name": "terms_of_service_url",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/"
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "currency_iso_code",
        "name",
        "parent_id",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSCreateWorkspaceRequest": {
      "name": "ACCOUNTSCreateWorkspaceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {}
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "name",
        "parent_id",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSCurrencyIsoCodeEnum": {
      "name": "ACCOUNTSCurrencyIsoCodeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSJSONAPIErrorObject": {
      "name": "ACCOUNTSJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/ACCOUNTSJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSJSONAPIErrorResponse": {
      "name": "ACCOUNTSJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ACCOUNTSJSONAPIErrorObject",
            "referenceName": "ACCOUNTSJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSJSONAPIErrorSource": {
      "name": "ACCOUNTSJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSOrganization": {
      "name": "ACCOUNTSOrganization",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {},
          "readOnly": true
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/ACCOUNTSStatusEnum"
            }
          ]
        },
        "reason": {
          "name": "reason",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/ACCOUNTSReasonEnum"
            }
          ]
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "active",
        "created",
        "id",
        "info",
        "last_editor",
        "last_modified",
        "name",
        "parent_id",
        "reason",
        "status",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSOrganizationRequest": {
      "name": "ACCOUNTSOrganizationRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSPaginatedResponseListAccountList": {
      "name": "ACCOUNTSPaginatedResponseListAccountList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ACCOUNTSResponseListAccount",
            "referenceName": "ACCOUNTSResponseListAccount"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSPatchedAccountRequest": {
      "name": "ACCOUNTSPatchedAccountRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSPatchedBrandRequest",
            "Organization": "#/components/schemas/ACCOUNTSPatchedOrganizationRequest",
            "Reseller": "#/components/schemas/ACCOUNTSPatchedResellerRequest",
            "Workspace": "#/components/schemas/ACCOUNTSPatchedWorkspaceRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedBrandRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedOrganizationRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedResellerRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedWorkspaceRequest"
          }
        ]
      },
      "examples": []
    },
    "ACCOUNTSPatchedBrandRequest": {
      "name": "ACCOUNTSPatchedBrandRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSPatchedOrganizationRequest": {
      "name": "ACCOUNTSPatchedOrganizationRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSPatchedResellerRequest": {
      "name": "ACCOUNTSPatchedResellerRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "currency_iso_code": {
          "name": "currency_iso_code",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSCurrencyIsoCodeEnum",
          "referenceName": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        "terms_of_service_url": {
          "name": "terms_of_service_url",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/"
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSPatchedWorkspaceRequest": {
      "name": "ACCOUNTSPatchedWorkspaceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSReasonEnum": {
      "name": "ACCOUNTSReasonEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSReseller": {
      "name": "ACCOUNTSReseller",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {},
          "readOnly": true
        },
        "currency_iso_code": {
          "name": "currency_iso_code",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSCurrencyIsoCodeEnum",
          "referenceName": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        "terms_of_service_url": {
          "name": "terms_of_service_url",
          "type": "string",
          "constraints": {
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/"
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "active",
        "created",
        "currency_iso_code",
        "id",
        "info",
        "last_editor",
        "last_modified",
        "name",
        "parent_id",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResellerRequest": {
      "name": "ACCOUNTSResellerRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "currency_iso_code": {
          "name": "currency_iso_code",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSCurrencyIsoCodeEnum",
          "referenceName": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        "terms_of_service_url": {
          "name": "terms_of_service_url",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          },
          "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/"
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "currency_iso_code",
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResponseAccount": {
      "name": "ACCOUNTSResponseAccount",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSAccount",
          "referenceName": "ACCOUNTSAccount"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResponseAccountInfo": {
      "name": "ACCOUNTSResponseAccountInfo",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSAccountInfo",
          "referenceName": "ACCOUNTSAccountInfo"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResponseAsyncAccount": {
      "name": "ACCOUNTSResponseAsyncAccount",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSAccount",
          "referenceName": "ACCOUNTSAccount"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResponseAsyncAccountInfo": {
      "name": "ACCOUNTSResponseAsyncAccountInfo",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSAccountInfo",
          "referenceName": "ACCOUNTSAccountInfo"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResponseListAccount": {
      "name": "ACCOUNTSResponseListAccount",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSBrand",
            "Organization": "#/components/schemas/ACCOUNTSOrganization",
            "Reseller": "#/components/schemas/ACCOUNTSReseller",
            "Workspace": "#/components/schemas/ACCOUNTSWorkspace"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSBrand"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSOrganization"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSReseller"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSWorkspace"
          }
        ]
      },
      "examples": []
    },
    "ACCOUNTSResponseRetrieveAccount": {
      "name": "ACCOUNTSResponseRetrieveAccount",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSAccount",
          "referenceName": "ACCOUNTSAccount"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSResponseRetrieveAccountInfo": {
      "name": "ACCOUNTSResponseRetrieveAccountInfo",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSAccountInfo",
          "referenceName": "ACCOUNTSAccountInfo"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSStatusEnum": {
      "name": "ACCOUNTSStatusEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSTypeEnum": {
      "name": "ACCOUNTSTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSWorkspace": {
      "name": "ACCOUNTSWorkspace",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "parent_id": {
          "name": "parent_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {},
          "readOnly": true
        },
        "workspace_id": {
          "name": "workspace_id",
          "type": "string",
          "constraints": {
            "pattern": "^[0-9]{4}[A-Z]$"
          },
          "readOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "active",
        "created",
        "id",
        "info",
        "last_editor",
        "last_modified",
        "name",
        "parent_id",
        "type",
        "workspace_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ACCOUNTSWorkspaceRequest": {
      "name": "ACCOUNTSWorkspaceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          }
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ACCOUNTSTypeEnum",
          "referenceName": "ACCOUNTSTypeEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEBucket": {
      "name": "STORAGEBucket",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 63
          },
          "readOnly": true
        },
        "edge_access": {
          "name": "edge_access",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEEdgeAccessEnum",
          "referenceName": "STORAGEEdgeAccessEnum"
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "default": "1.0",
          "readOnly": true
        }
      },
      "required": [
        "edge_access",
        "last_editor",
        "last_modified",
        "name",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEBucketCreate": {
      "name": "STORAGEBucketCreate",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 63,
            "pattern": ".{6,63}"
          }
        },
        "edge_access": {
          "name": "edge_access",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEEdgeAccessEnum",
          "referenceName": "STORAGEEdgeAccessEnum"
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "default": "1.0",
          "readOnly": true
        }
      },
      "required": [
        "edge_access",
        "last_editor",
        "last_modified",
        "name",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEBucketCreateRequest": {
      "name": "STORAGEBucketCreateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 63,
            "pattern": ".{6,63}"
          }
        },
        "edge_access": {
          "name": "edge_access",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEEdgeAccessEnum",
          "referenceName": "STORAGEEdgeAccessEnum"
        }
      },
      "required": [
        "edge_access",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEBucketObject": {
      "name": "STORAGEBucketObject",
      "type": "object",
      "properties": {
        "key": {
          "name": "key",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "size": {
          "name": "size",
          "type": "integer",
          "constraints": {},
          "description": "Size of the object in bytes",
          "readOnly": true
        },
        "is_folder": {
          "name": "is_folder",
          "type": "boolean",
          "constraints": {},
          "description": "Whether this entry represents a folder",
          "readOnly": true
        }
      },
      "required": [
        "is_folder",
        "key",
        "last_modified",
        "size"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGECapabilitiesEnum": {
      "name": "STORAGECapabilitiesEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGECredential": {
      "name": "STORAGECredential",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9\\-]+$"
          }
        },
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "secret_key": {
          "name": "secret_key",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "capabilities": {
          "name": "capabilities",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "capabilities_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGECapabilitiesEnum",
            "referenceName": "STORAGECapabilitiesEnum"
          }
        },
        "bucket": {
          "name": "bucket",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 63,
            "pattern": ".{6,63}"
          }
        },
        "expiration_date": {
          "name": "expiration_date",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "access_key",
        "capabilities",
        "last_editor",
        "last_modified",
        "name",
        "secret_key"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGECredentialCreateRequest": {
      "name": "STORAGECredentialCreateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9\\-]+$"
          }
        },
        "capabilities": {
          "name": "capabilities",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "capabilities_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGECapabilitiesEnum",
            "referenceName": "STORAGECapabilitiesEnum"
          }
        },
        "bucket": {
          "name": "bucket",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 63,
            "pattern": ".{6,63}"
          }
        },
        "expiration_date": {
          "name": "expiration_date",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "capabilities",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEDefaultErrorResponse": {
      "name": "STORAGEDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEEdgeAccessEnum": {
      "name": "STORAGEEdgeAccessEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEJSONAPIErrorObject": {
      "name": "STORAGEJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/STORAGEJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "unknown",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEJSONAPIErrorResponse": {
      "name": "STORAGEJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGEJSONAPIErrorObject",
            "referenceName": "STORAGEJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEJSONAPIErrorSource": {
      "name": "STORAGEJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEObjectResponseAsyncData": {
      "name": "STORAGEObjectResponseAsyncData",
      "type": "object",
      "properties": {
        "object_key": {
          "name": "object_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 1024,
            "pattern": "^[0-9a-zA-Z!\\\"\\~\\-\\_\\.\\*\\'\\(\\)\\&\\$\\@\\=\\;\\/\\:\\+\\,\\\\\\{\\}\\^\\`\\[\\]\\>\\<\\|\\ \\%\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u00c7\\u00c8\\u00c9\\u00ca\\u00cb\\u00cc\\u00cd\\u00ce\\u00cf\\u00d1\\u00d2\\u00d3\\u00d4\\u00d5\\u00d6\\u00d9\\u00da\\u00db\\u00dc\\u00dd\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u00e7\\u00e8\\u00e9\\u00ea\\u00ec\\u00ed\\u00ee\\u00f1\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u00f9\\u00fa\\u00fb\\u00fc\\u00fd\\u00eb\\u00ef]+$"
          }
        }
      },
      "required": [
        "object_key"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEObjectResponseData": {
      "name": "STORAGEObjectResponseData",
      "type": "object",
      "properties": {
        "object_key": {
          "name": "object_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 1024,
            "pattern": "^[0-9a-zA-Z!\\\"\\~\\-\\_\\.\\*\\'\\(\\)\\&\\$\\@\\=\\;\\/\\:\\+\\,\\\\\\{\\}\\^\\`\\[\\]\\>\\<\\|\\ \\%\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u00c7\\u00c8\\u00c9\\u00ca\\u00cb\\u00cc\\u00cd\\u00ce\\u00cf\\u00d1\\u00d2\\u00d3\\u00d4\\u00d5\\u00d6\\u00d9\\u00da\\u00db\\u00dc\\u00dd\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u00e7\\u00e8\\u00e9\\u00ea\\u00ec\\u00ed\\u00ee\\u00f1\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u00f9\\u00fa\\u00fb\\u00fc\\u00fd\\u00eb\\u00ef]+$"
          }
        }
      },
      "required": [
        "object_key"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEPaginatedBucketList": {
      "name": "STORAGEPaginatedBucketList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGEBucket",
            "referenceName": "STORAGEBucket"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEPaginatedResponseListCredentialList": {
      "name": "STORAGEPaginatedResponseListCredentialList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGEResponseListCredential",
            "referenceName": "STORAGEResponseListCredential"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEPatchedBucketRequest": {
      "name": "STORAGEPatchedBucketRequest",
      "type": "object",
      "properties": {
        "edge_access": {
          "name": "edge_access",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEEdgeAccessEnum",
          "referenceName": "STORAGEEdgeAccessEnum"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseAsyncBucketCreate": {
      "name": "STORAGEResponseAsyncBucketCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEBucketCreate",
          "referenceName": "STORAGEBucketCreate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseAsyncCredential": {
      "name": "STORAGEResponseAsyncCredential",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGECredential",
          "referenceName": "STORAGECredential"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseAsyncDeleteBucketCreate": {
      "name": "STORAGEResponseAsyncDeleteBucketCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseAsyncDeleteBucketObject": {
      "name": "STORAGEResponseAsyncDeleteBucketObject",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseAsyncDeleteCredential": {
      "name": "STORAGEResponseAsyncDeleteCredential",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseBadRequestBucket": {
      "name": "STORAGEResponseBadRequestBucket",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "edge_access": {
          "name": "edge_access",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "edge_access_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "product_version_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseBadRequestCredential": {
      "name": "STORAGEResponseBadRequestCredential",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "expiration_date": {
          "name": "expiration_date",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "expiration_date_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "capabilities": {
          "name": "capabilities",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "bucket": {
          "name": "bucket",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "bucket_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseBucketCreate": {
      "name": "STORAGEResponseBucketCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEBucketCreate",
          "referenceName": "STORAGEBucketCreate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseBucketObject": {
      "name": "STORAGEResponseBucketObject",
      "type": "object",
      "properties": {
        "continuation_token": {
          "name": "continuation_token",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 255,
            "pattern": ".{0,255}"
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGEBucketObject",
            "referenceName": "STORAGEBucketObject"
          }
        }
      },
      "required": [
        "continuation_token",
        "results"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseCredential": {
      "name": "STORAGEResponseCredential",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGECredential",
          "referenceName": "STORAGECredential"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseDeleteBucketCreate": {
      "name": "STORAGEResponseDeleteBucketCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseDeleteBucketObject": {
      "name": "STORAGEResponseDeleteBucketObject",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseListCredential": {
      "name": "STORAGEResponseListCredential",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9\\-]+$"
          }
        },
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "secret_key": {
          "name": "secret_key",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "capabilities": {
          "name": "capabilities",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "capabilities_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/STORAGECapabilitiesEnum",
            "referenceName": "STORAGECapabilitiesEnum"
          }
        },
        "bucket": {
          "name": "bucket",
          "type": "string",
          "constraints": {
            "minLength": 6,
            "maxLength": 63,
            "pattern": ".{6,63}"
          }
        },
        "expiration_date": {
          "name": "expiration_date",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "access_key",
        "capabilities",
        "last_editor",
        "last_modified",
        "name",
        "secret_key"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseRetrieveBucket": {
      "name": "STORAGEResponseRetrieveBucket",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEBucket",
          "referenceName": "STORAGEBucket"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGEResponseRetrieveCredential": {
      "name": "STORAGEResponseRetrieveCredential",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGECredential",
          "referenceName": "STORAGECredential"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGESuccessObjectOperation": {
      "name": "STORAGESuccessObjectOperation",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEObjectResponseData",
          "referenceName": "STORAGEObjectResponseData"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "STORAGESuccessObjectOperationAsync": {
      "name": "STORAGESuccessObjectOperationAsync",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/STORAGEObjectResponseAsyncData",
          "referenceName": "STORAGEObjectResponseAsyncData"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAAWSKinesisFirehoseEndpoint": {
      "name": "DATAAWSKinesisFirehoseEndpoint",
      "type": "object",
      "properties": {
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "stream_name": {
          "name": "stream_name",
          "type": "string",
          "constraints": {
            "maxLength": 64
          }
        },
        "region": {
          "name": "region",
          "type": "string",
          "constraints": {
            "maxLength": 50
          }
        },
        "secret_key": {
          "name": "secret_key",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        }
      },
      "required": [
        "access_key",
        "region",
        "secret_key",
        "stream_name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAAWSKinesisFirehoseEndpointRequest": {
      "name": "DATAAWSKinesisFirehoseEndpointRequest",
      "type": "object",
      "properties": {
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "stream_name": {
          "name": "stream_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 64
          }
        },
        "region": {
          "name": "region",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50
          }
        },
        "secret_key": {
          "name": "secret_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        }
      },
      "required": [
        "access_key",
        "region",
        "secret_key",
        "stream_name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAAzureBlobStorageEndpoint": {
      "name": "DATAAzureBlobStorageEndpoint",
      "type": "object",
      "properties": {
        "storage_account": {
          "name": "storage_account",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "container_name": {
          "name": "container_name",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "blob_sas_token": {
          "name": "blob_sas_token",
          "type": "string",
          "constraints": {
            "maxLength": 250
          }
        }
      },
      "required": [
        "blob_sas_token",
        "container_name",
        "storage_account"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAAzureBlobStorageEndpointRequest": {
      "name": "DATAAzureBlobStorageEndpointRequest",
      "type": "object",
      "properties": {
        "storage_account": {
          "name": "storage_account",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "container_name": {
          "name": "container_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "blob_sas_token": {
          "name": "blob_sas_token",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250
          }
        }
      },
      "required": [
        "blob_sas_token",
        "container_name",
        "storage_account"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAAzureMonitorEndpoint": {
      "name": "DATAAzureMonitorEndpoint",
      "type": "object",
      "properties": {
        "log_type": {
          "name": "log_type",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "shared_key": {
          "name": "shared_key",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "time_generated_field": {
          "name": "time_generated_field",
          "type": "string",
          "constraints": {
            "maxLength": 50
          }
        },
        "workspace_id": {
          "name": "workspace_id",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        }
      },
      "required": [
        "log_type",
        "shared_key",
        "workspace_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAAzureMonitorEndpointRequest": {
      "name": "DATAAzureMonitorEndpointRequest",
      "type": "object",
      "properties": {
        "log_type": {
          "name": "log_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "shared_key": {
          "name": "shared_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "time_generated_field": {
          "name": "time_generated_field",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50
          }
        },
        "workspace_id": {
          "name": "workspace_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        }
      },
      "required": [
        "log_type",
        "shared_key",
        "workspace_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATABigQueryEndpoint": {
      "name": "DATABigQueryEndpoint",
      "type": "object",
      "properties": {
        "dataset_id": {
          "name": "dataset_id",
          "type": "string",
          "constraints": {
            "maxLength": 1024
          }
        },
        "project_id": {
          "name": "project_id",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "table_id": {
          "name": "table_id",
          "type": "string",
          "constraints": {
            "maxLength": 1024
          }
        },
        "service_account_key": {
          "name": "service_account_key",
          "type": "string",
          "constraints": {}
        }
      },
      "required": [
        "dataset_id",
        "project_id",
        "service_account_key",
        "table_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATABigQueryEndpointRequest": {
      "name": "DATABigQueryEndpointRequest",
      "type": "object",
      "properties": {
        "dataset_id": {
          "name": "dataset_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 1024
          }
        },
        "project_id": {
          "name": "project_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "table_id": {
          "name": "table_id",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 1024
          }
        },
        "service_account_key": {
          "name": "service_account_key",
          "type": "string",
          "constraints": {
            "minLength": 1
          }
        }
      },
      "required": [
        "dataset_id",
        "project_id",
        "service_account_key",
        "table_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAContentTypeEnum": {
      "name": "DATAContentTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATADataSourceEnum": {
      "name": "DATADataSourceEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATADataStream": {
      "name": "DATADataStream",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "inputs": {
          "name": "inputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "inputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAInputPolymorphic",
            "referenceName": "DATAInputPolymorphic"
          }
        },
        "transform": {
          "name": "transform",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "transform_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATATransformPolymorphic",
            "referenceName": "DATATransformPolymorphic"
          }
        },
        "outputs": {
          "name": "outputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "outputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAOutput",
            "referenceName": "DATAOutput"
          }
        }
      },
      "required": [
        "id",
        "inputs",
        "last_editor",
        "last_modified",
        "name",
        "outputs",
        "product_version",
        "transform"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATADataStreamRequest": {
      "name": "DATADataStreamRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "inputs": {
          "name": "inputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "inputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAInputPolymorphicRequest",
            "referenceName": "DATAInputPolymorphicRequest"
          }
        },
        "transform": {
          "name": "transform",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "transform_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATATransformPolymorphicRequest",
            "referenceName": "DATATransformPolymorphicRequest"
          }
        },
        "outputs": {
          "name": "outputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "outputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAOutputRequest",
            "referenceName": "DATAOutputRequest"
          }
        }
      },
      "required": [
        "inputs",
        "name",
        "outputs",
        "transform"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATADatadogEndpoint": {
      "name": "DATADatadogEndpoint",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        },
        "api_key": {
          "name": "api_key",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        }
      },
      "required": [
        "api_key",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATADatadogEndpointRequest": {
      "name": "DATADatadogEndpointRequest",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1
          }
        },
        "api_key": {
          "name": "api_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "required": [
        "api_key",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAElasticsearchEndpoint": {
      "name": "DATAElasticsearchEndpoint",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        },
        "api_key": {
          "name": "api_key",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        }
      },
      "required": [
        "api_key",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAElasticsearchEndpointRequest": {
      "name": "DATAElasticsearchEndpointRequest",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1
          }
        },
        "api_key": {
          "name": "api_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "required": [
        "api_key",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAHttpPostEndpoint": {
      "name": "DATAHttpPostEndpoint",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        },
        "log_line_separator": {
          "name": "log_line_separator",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "payload_format": {
          "name": "payload_format",
          "type": "string",
          "constraints": {
            "maxLength": 250
          }
        },
        "max_size": {
          "name": "max_size",
          "type": "integer",
          "constraints": {
            "minimum": 1000000,
            "maximum": 2147483647
          }
        },
        "headers": {
          "name": "headers",
          "type": "object",
          "constraints": {}
        }
      },
      "required": [
        "headers",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAHttpPostEndpointRequest": {
      "name": "DATAHttpPostEndpointRequest",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1
          }
        },
        "log_line_separator": {
          "name": "log_line_separator",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "payload_format": {
          "name": "payload_format",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250
          }
        },
        "max_size": {
          "name": "max_size",
          "type": "integer",
          "constraints": {
            "minimum": 1000000,
            "maximum": 2147483647
          }
        },
        "headers": {
          "name": "headers",
          "type": "object",
          "constraints": {}
        }
      },
      "required": [
        "headers",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputDataSource": {
      "name": "DATAInputDataSource",
      "type": "object",
      "properties": {
        "data_source": {
          "name": "data_source",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATADataSourceEnum",
          "referenceName": "DATADataSourceEnum"
        }
      },
      "required": [
        "data_source"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputDataSourceAttributes": {
      "name": "DATAInputDataSourceAttributes",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAInputDataSourceAttributesTypeEnum",
          "referenceName": "DATAInputDataSourceAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAInputDataSource",
          "referenceName": "DATAInputDataSource"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputDataSourceAttributesRequest": {
      "name": "DATAInputDataSourceAttributesRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAInputDataSourceAttributesTypeEnum",
          "referenceName": "DATAInputDataSourceAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAInputDataSourceRequest",
          "referenceName": "DATAInputDataSourceRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputDataSourceAttributesTypeEnum": {
      "name": "DATAInputDataSourceAttributesTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputDataSourceRequest": {
      "name": "DATAInputDataSourceRequest",
      "type": "object",
      "properties": {
        "data_source": {
          "name": "data_source",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATADataSourceEnum",
          "referenceName": "DATADataSourceEnum"
        }
      },
      "required": [
        "data_source"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputPolymorphic": {
      "name": "DATAInputPolymorphic",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "raw_logs": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributes"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributes"
          }
        ]
      },
      "examples": []
    },
    "DATAInputPolymorphicInputDataSourceAttributes": {
      "name": "DATAInputPolymorphicInputDataSourceAttributes",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputPolymorphicInputDataSourceAttributesRequest": {
      "name": "DATAInputPolymorphicInputDataSourceAttributesRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAInputPolymorphicRequest": {
      "name": "DATAInputPolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "raw_logs": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributesRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributesRequest"
          }
        ]
      },
      "examples": []
    },
    "DATAInputPolymorphicShared": {
      "name": "DATAInputPolymorphicShared",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "",
          "allOf": [
            {
              "$ref": "#/components/schemas/DATAType4f5Enum"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAJSONAPIErrorObject": {
      "name": "DATAJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/DATAJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAJSONAPIErrorResponse": {
      "name": "DATAJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAJSONAPIErrorObject",
            "referenceName": "DATAJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAJSONAPIErrorSource": {
      "name": "DATAJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAKafkaEndpoint": {
      "name": "DATAKafkaEndpoint",
      "type": "object",
      "properties": {
        "bootstrap_servers": {
          "name": "bootstrap_servers",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "kafka_topic": {
          "name": "kafka_topic",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "use_tls": {
          "name": "use_tls",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "bootstrap_servers",
        "kafka_topic",
        "use_tls"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAKafkaEndpointRequest": {
      "name": "DATAKafkaEndpointRequest",
      "type": "object",
      "properties": {
        "bootstrap_servers": {
          "name": "bootstrap_servers",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "kafka_topic": {
          "name": "kafka_topic",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "use_tls": {
          "name": "use_tls",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "bootstrap_servers",
        "kafka_topic",
        "use_tls"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAOutput": {
      "name": "DATAOutput",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAOutputTypeEnum",
          "referenceName": "DATAOutputTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAOutputPolymorphic",
          "referenceName": "DATAOutputPolymorphic"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAOutputPolymorphic": {
      "name": "DATAOutputPolymorphic",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "standard": "#/components/schemas/DATAHttpPostEndpoint",
            "kafka": "#/components/schemas/DATAKafkaEndpoint",
            "s3": "#/components/schemas/DATAS3Endpoint",
            "big_query": "#/components/schemas/DATABigQueryEndpoint",
            "elasticsearch": "#/components/schemas/DATAElasticsearchEndpoint",
            "aws_kinesis_firehose": "#/components/schemas/DATAAWSKinesisFirehoseEndpoint",
            "datadog": "#/components/schemas/DATADatadogEndpoint",
            "qradar": "#/components/schemas/DATAQRadarEndpoint",
            "azure_monitor": "#/components/schemas/DATAAzureMonitorEndpoint",
            "azure_blob_storage": "#/components/schemas/DATAAzureBlobStorageEndpoint",
            "splunk": "#/components/schemas/DATASplunkEndpoint"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAHttpPostEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAKafkaEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAS3Endpoint"
          },
          {
            "reference": "#/components/schemas/DATABigQueryEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAElasticsearchEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAAWSKinesisFirehoseEndpoint"
          },
          {
            "reference": "#/components/schemas/DATADatadogEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAQRadarEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAAzureMonitorEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAAzureBlobStorageEndpoint"
          },
          {
            "reference": "#/components/schemas/DATASplunkEndpoint"
          }
        ]
      },
      "examples": []
    },
    "DATAOutputPolymorphicRequest": {
      "name": "DATAOutputPolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "standard": "#/components/schemas/DATAHttpPostEndpointRequest",
            "kafka": "#/components/schemas/DATAKafkaEndpointRequest",
            "s3": "#/components/schemas/DATAS3EndpointRequest",
            "big_query": "#/components/schemas/DATABigQueryEndpointRequest",
            "elasticsearch": "#/components/schemas/DATAElasticsearchEndpointRequest",
            "aws_kinesis_firehose": "#/components/schemas/DATAAWSKinesisFirehoseEndpointRequest",
            "datadog": "#/components/schemas/DATADatadogEndpointRequest",
            "qradar": "#/components/schemas/DATAQRadarEndpointRequest",
            "azure_monitor": "#/components/schemas/DATAAzureMonitorEndpointRequest",
            "azure_blob_storage": "#/components/schemas/DATAAzureBlobStorageEndpointRequest",
            "splunk": "#/components/schemas/DATASplunkEndpointRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAHttpPostEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAKafkaEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAS3EndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATABigQueryEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAElasticsearchEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAAWSKinesisFirehoseEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATADatadogEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAQRadarEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAAzureMonitorEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAAzureBlobStorageEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATASplunkEndpointRequest"
          }
        ]
      },
      "examples": []
    },
    "DATAOutputRequest": {
      "name": "DATAOutputRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAOutputTypeEnum",
          "referenceName": "DATAOutputTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAOutputPolymorphicRequest",
          "referenceName": "DATAOutputPolymorphicRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAOutputTypeEnum": {
      "name": "DATAOutputTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAPaginatedResponseListDataSourceList": {
      "name": "DATAPaginatedResponseListDataSourceList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAResponseListDataSource",
            "referenceName": "DATAResponseListDataSource"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAPaginatedResponseListDataStreamList": {
      "name": "DATAPaginatedResponseListDataStreamList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAResponseListDataStream",
            "referenceName": "DATAResponseListDataStream"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAPaginatedResponseListTemplateList": {
      "name": "DATAPaginatedResponseListTemplateList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAResponseListTemplate",
            "referenceName": "DATAResponseListTemplate"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAPatchedDataStreamRequest": {
      "name": "DATAPatchedDataStreamRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "inputs": {
          "name": "inputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "inputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAInputPolymorphicRequest",
            "referenceName": "DATAInputPolymorphicRequest"
          }
        },
        "transform": {
          "name": "transform",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "transform_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATATransformPolymorphicRequest",
            "referenceName": "DATATransformPolymorphicRequest"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAPatchedTemplateRequest": {
      "name": "DATAPatchedTemplateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "data_set": {
          "name": "data_set",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAQRadarEndpoint": {
      "name": "DATAQRadarEndpoint",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        }
      },
      "required": [
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAQRadarEndpointRequest": {
      "name": "DATAQRadarEndpointRequest",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1
          }
        }
      },
      "required": [
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseAsyncDataStream": {
      "name": "DATAResponseAsyncDataStream",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATADataStream",
          "referenceName": "DATADataStream"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseAsyncDeleteDataStream": {
      "name": "DATAResponseAsyncDeleteDataStream",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseAsyncDeleteTemplate": {
      "name": "DATAResponseAsyncDeleteTemplate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseAsyncTemplate": {
      "name": "DATAResponseAsyncTemplate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATemplate",
          "referenceName": "DATATemplate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseDataStream": {
      "name": "DATAResponseDataStream",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATADataStream",
          "referenceName": "DATADataStream"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseDeleteDataStream": {
      "name": "DATAResponseDeleteDataStream",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseDeleteTemplate": {
      "name": "DATAResponseDeleteTemplate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseListDataSource": {
      "name": "DATAResponseListDataSource",
      "type": "object",
      "properties": {
        "slug": {
          "name": "slug",
          "type": "string",
          "constraints": {
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "active",
        "name",
        "slug"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseListDataStream": {
      "name": "DATAResponseListDataStream",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "inputs": {
          "name": "inputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "inputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAInputPolymorphic",
            "referenceName": "DATAInputPolymorphic"
          }
        },
        "transform": {
          "name": "transform",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "transform_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATATransformPolymorphic",
            "referenceName": "DATATransformPolymorphic"
          }
        },
        "outputs": {
          "name": "outputs",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "outputs_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DATAOutput",
            "referenceName": "DATAOutput"
          }
        }
      },
      "required": [
        "id",
        "inputs",
        "last_editor",
        "last_modified",
        "name",
        "outputs",
        "product_version",
        "transform"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseListTemplate": {
      "name": "DATAResponseListTemplate",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "custom": {
          "name": "custom",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "data_set": {
          "name": "data_set",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "custom",
        "data_set",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseRetrieveDataStream": {
      "name": "DATAResponseRetrieveDataStream",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATADataStream",
          "referenceName": "DATADataStream"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseRetrieveTemplate": {
      "name": "DATAResponseRetrieveTemplate",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATemplate",
          "referenceName": "DATATemplate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAResponseTemplate": {
      "name": "DATAResponseTemplate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATemplate",
          "referenceName": "DATATemplate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAS3Endpoint": {
      "name": "DATAS3Endpoint",
      "type": "object",
      "properties": {
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "region": {
          "name": "region",
          "type": "string",
          "constraints": {
            "maxLength": 50
          }
        },
        "object_key_prefix": {
          "name": "object_key_prefix",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "bucket_name": {
          "name": "bucket_name",
          "type": "string",
          "constraints": {
            "maxLength": 150
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAContentTypeEnum",
          "referenceName": "DATAContentTypeEnum"
        },
        "host_url": {
          "name": "host_url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "maxLength": 200
          }
        }
      },
      "required": [
        "access_key",
        "bucket_name",
        "content_type",
        "host_url",
        "region"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAS3EndpointRequest": {
      "name": "DATAS3EndpointRequest",
      "type": "object",
      "properties": {
        "access_key": {
          "name": "access_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "region": {
          "name": "region",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50
          }
        },
        "object_key_prefix": {
          "name": "object_key_prefix",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "bucket_name": {
          "name": "bucket_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATAContentTypeEnum",
          "referenceName": "DATAContentTypeEnum"
        },
        "host_url": {
          "name": "host_url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1,
            "maxLength": 200
          }
        }
      },
      "required": [
        "access_key",
        "bucket_name",
        "content_type",
        "host_url",
        "region"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATASplunkEndpoint": {
      "name": "DATASplunkEndpoint",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        },
        "api_key": {
          "name": "api_key",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        }
      },
      "required": [
        "api_key",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATASplunkEndpointRequest": {
      "name": "DATASplunkEndpointRequest",
      "type": "object",
      "properties": {
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1
          }
        },
        "api_key": {
          "name": "api_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "required": [
        "api_key",
        "url"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATemplate": {
      "name": "DATATemplate",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "custom": {
          "name": "custom",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "data_set": {
          "name": "data_set",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "custom",
        "data_set",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATemplateRequest": {
      "name": "DATATemplateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "data_set": {
          "name": "data_set",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "data_set",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformFilterWorkloads": {
      "name": "DATATransformFilterWorkloads",
      "type": "object",
      "properties": {
        "workloads": {
          "name": "workloads",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 600
          },
          "items": {
            "name": "workloads_item",
            "type": "integer",
            "constraints": {
              "minimum": 1
            }
          }
        }
      },
      "required": [
        "workloads"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformFilterWorkloadsAttributes": {
      "name": "DATATransformFilterWorkloadsAttributes",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformFilterWorkloadsAttributesTypeEnum",
          "referenceName": "DATATransformFilterWorkloadsAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformFilterWorkloads",
          "referenceName": "DATATransformFilterWorkloads"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformFilterWorkloadsAttributesRequest": {
      "name": "DATATransformFilterWorkloadsAttributesRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformFilterWorkloadsAttributesTypeEnum",
          "referenceName": "DATATransformFilterWorkloadsAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformFilterWorkloadsRequest",
          "referenceName": "DATATransformFilterWorkloadsRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformFilterWorkloadsAttributesTypeEnum": {
      "name": "DATATransformFilterWorkloadsAttributesTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformFilterWorkloadsRequest": {
      "name": "DATATransformFilterWorkloadsRequest",
      "type": "object",
      "properties": {
        "workloads": {
          "name": "workloads",
          "type": "array",
          "constraints": {
            "minItems": 1,
            "maxItems": 600
          },
          "items": {
            "name": "workloads_item",
            "type": "integer",
            "constraints": {
              "minimum": 1
            }
          }
        }
      },
      "required": [
        "workloads"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphic": {
      "name": "DATATransformPolymorphic",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sampling": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributes",
            "filter_workloads": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributes",
            "render_template": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributes"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributes"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributes"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributes"
          }
        ]
      },
      "examples": []
    },
    "DATATransformPolymorphicRequest": {
      "name": "DATATransformPolymorphicRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sampling": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributesRequest",
            "filter_workloads": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest",
            "render_template": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributesRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributesRequest"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributesRequest"
          }
        ]
      },
      "examples": []
    },
    "DATATransformPolymorphicShared": {
      "name": "DATATransformPolymorphicShared",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "description": "",
          "allOf": [
            {
              "$ref": "#/components/schemas/DATAType4f5Enum"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphicTransformFilterWorkloadsAttributes": {
      "name": "DATATransformPolymorphicTransformFilterWorkloadsAttributes",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest": {
      "name": "DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphicTransformRenderTemplateAttributes": {
      "name": "DATATransformPolymorphicTransformRenderTemplateAttributes",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphicTransformRenderTemplateAttributesRequest": {
      "name": "DATATransformPolymorphicTransformRenderTemplateAttributesRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphicTransformSamplingAttributes": {
      "name": "DATATransformPolymorphicTransformSamplingAttributes",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformPolymorphicTransformSamplingAttributesRequest": {
      "name": "DATATransformPolymorphicTransformSamplingAttributesRequest",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformRenderTemplate": {
      "name": "DATATransformRenderTemplate",
      "type": "object",
      "properties": {
        "template": {
          "name": "template",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        }
      },
      "required": [
        "template"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformRenderTemplateAttributes": {
      "name": "DATATransformRenderTemplateAttributes",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformRenderTemplateAttributesTypeEnum",
          "referenceName": "DATATransformRenderTemplateAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformRenderTemplate",
          "referenceName": "DATATransformRenderTemplate"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformRenderTemplateAttributesRequest": {
      "name": "DATATransformRenderTemplateAttributesRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformRenderTemplateAttributesTypeEnum",
          "referenceName": "DATATransformRenderTemplateAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformRenderTemplateRequest",
          "referenceName": "DATATransformRenderTemplateRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformRenderTemplateAttributesTypeEnum": {
      "name": "DATATransformRenderTemplateAttributesTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformRenderTemplateRequest": {
      "name": "DATATransformRenderTemplateRequest",
      "type": "object",
      "properties": {
        "template": {
          "name": "template",
          "type": "integer",
          "constraints": {
            "minimum": 1
          }
        }
      },
      "required": [
        "template"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformSampling": {
      "name": "DATATransformSampling",
      "type": "object",
      "properties": {
        "rate": {
          "name": "rate",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 100
          }
        }
      },
      "required": [
        "rate"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformSamplingAttributes": {
      "name": "DATATransformSamplingAttributes",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformSamplingAttributesTypeEnum",
          "referenceName": "DATATransformSamplingAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformSampling",
          "referenceName": "DATATransformSampling"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformSamplingAttributesRequest": {
      "name": "DATATransformSamplingAttributesRequest",
      "type": "object",
      "properties": {
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformSamplingAttributesTypeEnum",
          "referenceName": "DATATransformSamplingAttributesTypeEnum"
        },
        "attributes": {
          "name": "attributes",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DATATransformSamplingRequest",
          "referenceName": "DATATransformSamplingRequest"
        }
      },
      "required": [
        "attributes",
        "type"
      ],
      "constraints": {
        "additionalProperties": true
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformSamplingAttributesTypeEnum": {
      "name": "DATATransformSamplingAttributesTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATATransformSamplingRequest": {
      "name": "DATATransformSamplingRequest",
      "type": "object",
      "properties": {
        "rate": {
          "name": "rate",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 100
          }
        }
      },
      "required": [
        "rate"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DATAType4f5Enum": {
      "name": "DATAType4f5Enum",
      "type": "boolean",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORBlankEnum": {
      "name": "ORCHESTRATORBlankEnum",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORContent": {
      "name": "ORCHESTRATORContent",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_hash": {
          "name": "content_hash",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "content_hash",
        "content_type",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORContentRequest": {
      "name": "ORCHESTRATORContentRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_hash": {
          "name": "content_hash",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "content_hash",
        "content_type",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORDefaultErrorResponse": {
      "name": "ORCHESTRATORDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeGroups": {
      "name": "ORCHESTRATORNodeGroups",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "ref_count": {
          "name": "ref_count",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "id",
        "name",
        "ref_count"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeGroupsById": {
      "name": "ORCHESTRATORNodeGroupsById",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        }
      },
      "required": [
        "id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeGroupsByIdRequest": {
      "name": "ORCHESTRATORNodeGroupsByIdRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "node_group": {
          "name": "node_group",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeGroupsRequest": {
      "name": "ORCHESTRATORNodeGroupsRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeServiceBind": {
      "name": "ORCHESTRATORNodeServiceBind",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {}
        },
        "service_name": {
          "name": "service_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50
          }
        },
        "service_id": {
          "name": "service_id",
          "type": "integer",
          "constraints": {}
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {}
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "active",
        "id",
        "last_editor",
        "last_modified",
        "service_id",
        "service_name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeServices": {
      "name": "ORCHESTRATORNodeServices",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {}
        },
        "service_name": {
          "name": "service_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "service_id": {
          "name": "service_id",
          "type": "integer",
          "constraints": {}
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "last_editor",
        "last_modified",
        "service_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodeServicesRequest": {
      "name": "ORCHESTRATORNodeServicesRequest",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {}
        },
        "service_name": {
          "name": "service_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "service_id": {
          "name": "service_id",
          "type": "integer",
          "constraints": {}
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "service_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodes": {
      "name": "ORCHESTRATORNodes",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "hash_id": {
          "name": "hash_id",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStatusEnum",
          "referenceName": "ORCHESTRATORStatusEnum"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {}
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        }
      },
      "required": [
        "active",
        "hash_id",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "status"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORNodesRequest": {
      "name": "ORCHESTRATORNodesRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStatusEnum",
          "referenceName": "ORCHESTRATORStatusEnum"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {}
        }
      },
      "required": [
        "name",
        "status"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPaginatedNodeGroupsList": {
      "name": "ORCHESTRATORPaginatedNodeGroupsList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ORCHESTRATORNodeGroups",
            "referenceName": "ORCHESTRATORNodeGroups"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPaginatedResponseListNodeGroupsByIdList": {
      "name": "ORCHESTRATORPaginatedResponseListNodeGroupsByIdList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ORCHESTRATORResponseListNodeGroupsById",
            "referenceName": "ORCHESTRATORResponseListNodeGroupsById"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPaginatedResponseListNodeServicesList": {
      "name": "ORCHESTRATORPaginatedResponseListNodeServicesList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ORCHESTRATORResponseListNodeServices",
            "referenceName": "ORCHESTRATORResponseListNodeServices"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPaginatedResponseListNodesList": {
      "name": "ORCHESTRATORPaginatedResponseListNodesList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ORCHESTRATORResponseListNodes",
            "referenceName": "ORCHESTRATORResponseListNodes"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPaginatedResponseListServicesList": {
      "name": "ORCHESTRATORPaginatedResponseListServicesList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ORCHESTRATORResponseListServices",
            "referenceName": "ORCHESTRATORResponseListServices"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPaginatedServiceResourceList": {
      "name": "ORCHESTRATORPaginatedServiceResourceList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/ORCHESTRATORServiceResource",
            "referenceName": "ORCHESTRATORServiceResource"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPatchedNodesRequest": {
      "name": "ORCHESTRATORPatchedNodesRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStatusEnum",
          "referenceName": "ORCHESTRATORStatusEnum"
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORPatchedServicesRequest": {
      "name": "ORCHESTRATORPatchedServicesRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "min_version": {
          "name": "min_version",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "permissions": {
          "name": "permissions",
          "type": "integer",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseBadRequestNodeGroupsById": {
      "name": "ORCHESTRATORResponseBadRequestNodeGroupsById",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "node_group": {
          "name": "node_group",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "node_group_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseBadRequestNodeServiceBind": {
      "name": "ORCHESTRATORResponseBadRequestNodeServiceBind",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "service_name": {
          "name": "service_name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "service_name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "service_id": {
          "name": "service_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "service_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseBadRequestNodeServices": {
      "name": "ORCHESTRATORResponseBadRequestNodeServices",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "service_name": {
          "name": "service_name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "service_name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "service_id": {
          "name": "service_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "service_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseBadRequestNodes": {
      "name": "ORCHESTRATORResponseBadRequestNodes",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "hash_id": {
          "name": "hash_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "hash_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "status": {
          "name": "status",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "status_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "modules": {
          "name": "modules",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "modules_item",
            "type": "string",
            "constraints": {}
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "product_version_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseBadRequestServices": {
      "name": "ORCHESTRATORResponseBadRequestServices",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "min_version": {
          "name": "min_version",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "min_version_item",
            "type": "string",
            "constraints": {}
          }
        },
        "permissions": {
          "name": "permissions",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "permissions_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "ref_count": {
          "name": "ref_count",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "ref_count_item",
            "type": "string",
            "constraints": {}
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "product_version_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseDeleteNodeServiceBind": {
      "name": "ORCHESTRATORResponseDeleteNodeServiceBind",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/ORCHESTRATORNodeServiceBind"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseDeleteNodes": {
      "name": "ORCHESTRATORResponseDeleteNodes",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/ORCHESTRATORNodes"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseDeleteServices": {
      "name": "ORCHESTRATORResponseDeleteServices",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/ORCHESTRATORServices"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseListNodeGroupsById": {
      "name": "ORCHESTRATORResponseListNodeGroupsById",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        }
      },
      "required": [
        "id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseListNodeServices": {
      "name": "ORCHESTRATORResponseListNodeServices",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {}
        },
        "service_name": {
          "name": "service_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "service_id": {
          "name": "service_id",
          "type": "integer",
          "constraints": {}
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "last_editor",
        "last_modified",
        "service_id"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseListNodes": {
      "name": "ORCHESTRATORResponseListNodes",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "hash_id": {
          "name": "hash_id",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStatusEnum",
          "referenceName": "ORCHESTRATORStatusEnum"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "modules": {
          "name": "modules",
          "type": "unknown",
          "constraints": {}
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        }
      },
      "required": [
        "active",
        "hash_id",
        "id",
        "last_editor",
        "last_modified",
        "name",
        "product_version",
        "status"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseListServices": {
      "name": "ORCHESTRATORResponseListServices",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "min_version": {
          "name": "min_version",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "permissions": {
          "name": "permissions",
          "type": "integer",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "ref_count": {
          "name": "ref_count",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "product_version",
        "ref_count"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseNodeGroupsById": {
      "name": "ORCHESTRATORResponseNodeGroupsById",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORNodeGroupsById",
          "referenceName": "ORCHESTRATORNodeGroupsById"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseNodeServices": {
      "name": "ORCHESTRATORResponseNodeServices",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORNodeServices",
          "referenceName": "ORCHESTRATORNodeServices"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseNodes": {
      "name": "ORCHESTRATORResponseNodes",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORNodes",
          "referenceName": "ORCHESTRATORNodes"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseRetrieveNodeServiceBind": {
      "name": "ORCHESTRATORResponseRetrieveNodeServiceBind",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORNodeServiceBind",
          "referenceName": "ORCHESTRATORNodeServiceBind"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseRetrieveNodes": {
      "name": "ORCHESTRATORResponseRetrieveNodes",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORNodes",
          "referenceName": "ORCHESTRATORNodes"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseRetrieveServices": {
      "name": "ORCHESTRATORResponseRetrieveServices",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORServices",
          "referenceName": "ORCHESTRATORServices"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORResponseServices": {
      "name": "ORCHESTRATORResponseServices",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORStateEnum",
          "referenceName": "ORCHESTRATORStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/ORCHESTRATORServices",
          "referenceName": "ORCHESTRATORServices"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORServiceResource": {
      "name": "ORCHESTRATORServiceResource",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_hash": {
          "name": "content_hash",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 150,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_group": {
          "name": "file_group",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_mode": {
          "name": "file_mode",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4,
            "pattern": ".*"
          }
        },
        "file_owner": {
          "name": "file_owner",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "is_template": {
          "name": "is_template",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "ref_count": {
          "name": "ref_count",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "active",
        "content_hash",
        "content_type",
        "file_group",
        "file_mode",
        "file_owner",
        "id",
        "is_template",
        "last_editor",
        "last_modified",
        "name",
        "ref_count"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORServiceResourceId": {
      "name": "ORCHESTRATORServiceResourceId",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_hash": {
          "name": "content_hash",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "trigger": {
          "name": "trigger",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "$ref": "#/components/schemas/ORCHESTRATORTriggerEnum"
            },
            {
              "$ref": "#/components/schemas/ORCHESTRATORBlankEnum"
            }
          ]
        },
        "content": {
          "name": "content",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "is_template": {
          "name": "is_template",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "file_group": {
          "name": "file_group",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_mode": {
          "name": "file_mode",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_owner": {
          "name": "file_owner",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "active",
        "content_hash",
        "file_group",
        "file_mode",
        "file_owner",
        "id",
        "is_template",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORServiceResourceIdRequest": {
      "name": "ORCHESTRATORServiceResourceIdRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "trigger": {
          "name": "trigger",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "$ref": "#/components/schemas/ORCHESTRATORTriggerEnum"
            },
            {
              "$ref": "#/components/schemas/ORCHESTRATORBlankEnum"
            }
          ]
        },
        "content": {
          "name": "content",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_group": {
          "name": "file_group",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_mode": {
          "name": "file_mode",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_owner": {
          "name": "file_owner",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "file_group",
        "file_mode",
        "file_owner",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORServiceResourceRequest": {
      "name": "ORCHESTRATORServiceResourceRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "content_type": {
          "name": "content_type",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_group": {
          "name": "file_group",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "file_mode": {
          "name": "file_mode",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4,
            "pattern": ".*"
          }
        },
        "file_owner": {
          "name": "file_owner",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "content_type",
        "file_group",
        "file_mode",
        "file_owner",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORServices": {
      "name": "ORCHESTRATORServices",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "min_version": {
          "name": "min_version",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "permissions": {
          "name": "permissions",
          "type": "integer",
          "constraints": {}
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "ref_count": {
          "name": "ref_count",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        }
      },
      "required": [
        "id",
        "last_editor",
        "last_modified",
        "product_version",
        "ref_count"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORServicesRequest": {
      "name": "ORCHESTRATORServicesRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "min_version": {
          "name": "min_version",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "permissions": {
          "name": "permissions",
          "type": "integer",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORStateEnum": {
      "name": "ORCHESTRATORStateEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORStatusEnum": {
      "name": "ORCHESTRATORStatusEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "ORCHESTRATORTriggerEnum": {
      "name": "ORCHESTRATORTriggerEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSBuildContextField": {
      "name": "VCSBuildContextField",
      "type": "object",
      "properties": {
        "field": {
          "name": "field",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "instantiation_data_path": {
          "name": "instantiation_data_path",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        }
      },
      "required": [
        "field",
        "value"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSBuildContextFieldRequest": {
      "name": "VCSBuildContextFieldRequest",
      "type": "object",
      "properties": {
        "field": {
          "name": "field",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "value": {
          "name": "value",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "instantiation_data_path": {
          "name": "instantiation_data_path",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        }
      },
      "required": [
        "field",
        "value"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSContinuousDeployment": {
      "name": "VCSContinuousDeployment",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "repository": {
          "name": "repository",
          "type": "string",
          "constraints": {
            "maxLength": 100,
            "pattern": "^[A-Za-z0-9\\_.\\-]+$"
          }
        },
        "branch": {
          "name": "branch",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "build_context": {
          "name": "build_context",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "build_context_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSBuildContextField",
            "referenceName": "VCSBuildContextField"
          }
        },
        "deploy_context": {
          "name": "deploy_context",
          "type": "object",
          "constraints": {}
        },
        "integration": {
          "name": "integration",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/VCSIntegration"
            }
          ]
        },
        "execution_script": {
          "name": "execution_script",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/VCSExecutionScript"
            }
          ]
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Created date of the continuous deployment.",
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "description": "Last editor of the continuous deployment.",
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Last modified date of the continuous deployment.",
          "readOnly": true
        }
      },
      "required": [
        "branch",
        "build_context",
        "created",
        "execution_script",
        "id",
        "integration",
        "last_editor",
        "last_modified",
        "name",
        "repository"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSContinuousDeploymentRequest": {
      "name": "VCSContinuousDeploymentRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "repository": {
          "name": "repository",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[A-Za-z0-9\\_.\\-]+$"
          }
        },
        "branch": {
          "name": "branch",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "build_context": {
          "name": "build_context",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "build_context_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSBuildContextFieldRequest",
            "referenceName": "VCSBuildContextFieldRequest"
          }
        },
        "deploy_context": {
          "name": "deploy_context",
          "type": "object",
          "constraints": {}
        },
        "integration_id": {
          "name": "integration_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        },
        "execution_script_id": {
          "name": "execution_script_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        }
      },
      "required": [
        "branch",
        "build_context",
        "execution_script_id",
        "integration_id",
        "name",
        "repository"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSExecution": {
      "name": "VCSExecution",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "maxLength": 50
          }
        },
        "created_at": {
          "name": "created_at",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "updated_at": {
          "name": "updated_at",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "created_at",
        "id",
        "updated_at"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSExecutionScript": {
      "name": "VCSExecutionScript",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {}
        },
        "template_uuid": {
          "name": "template_uuid",
          "type": "string",
          "format": "uuid",
          "constraints": {}
        }
      },
      "required": [
        "id",
        "name",
        "template_uuid"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSExecutionScriptRequest": {
      "name": "VCSExecutionScriptRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1
          }
        },
        "template_uuid": {
          "name": "template_uuid",
          "type": "string",
          "format": "uuid",
          "constraints": {}
        }
      },
      "required": [
        "name",
        "template_uuid"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSExecutor": {
      "name": "VCSExecutor",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {}
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "email": {
          "name": "email",
          "type": "string",
          "constraints": {}
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "email",
        "id",
        "is_active",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSIntegration": {
      "name": "VCSIntegration",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "scope": {
          "name": "scope",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "scope_type": {
          "name": "scope_type",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "provider": {
          "name": "provider",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSPlatform",
          "referenceName": "VCSPlatform"
        }
      },
      "required": [
        "id",
        "provider",
        "scope",
        "scope_type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSJSONAPIErrorObject": {
      "name": "VCSJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/VCSJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSJSONAPIErrorResponse": {
      "name": "VCSJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSJSONAPIErrorObject",
            "referenceName": "VCSJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSJSONAPIErrorSource": {
      "name": "VCSJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPaginatedResponseListContinuousDeploymentList": {
      "name": "VCSPaginatedResponseListContinuousDeploymentList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSResponseListContinuousDeployment",
            "referenceName": "VCSResponseListContinuousDeployment"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPaginatedResponseListExecutionList": {
      "name": "VCSPaginatedResponseListExecutionList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSResponseListExecution",
            "referenceName": "VCSResponseListExecution"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPaginatedResponseListExecutionScriptList": {
      "name": "VCSPaginatedResponseListExecutionScriptList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSResponseListExecutionScript",
            "referenceName": "VCSResponseListExecutionScript"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPaginatedResponseListIntegrationList": {
      "name": "VCSPaginatedResponseListIntegrationList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSResponseListIntegration",
            "referenceName": "VCSResponseListIntegration"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPaginatedResponseListPlatformList": {
      "name": "VCSPaginatedResponseListPlatformList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSResponseListPlatform",
            "referenceName": "VCSResponseListPlatform"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPaginatedResponseListRepositoryList": {
      "name": "VCSPaginatedResponseListRepositoryList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSResponseListRepository",
            "referenceName": "VCSResponseListRepository"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPatchedContinuousDeploymentRequest": {
      "name": "VCSPatchedContinuousDeploymentRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100
          }
        },
        "repository": {
          "name": "repository",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[A-Za-z0-9\\_.\\-]+$"
          }
        },
        "branch": {
          "name": "branch",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "build_context": {
          "name": "build_context",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "build_context_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSBuildContextFieldRequest",
            "referenceName": "VCSBuildContextFieldRequest"
          }
        },
        "deploy_context": {
          "name": "deploy_context",
          "type": "object",
          "constraints": {}
        },
        "integration_id": {
          "name": "integration_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        },
        "execution_script_id": {
          "name": "execution_script_id",
          "type": "integer",
          "constraints": {},
          "writeOnly": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSPlatform": {
      "name": "VCSPlatform",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "string",
          "constraints": {
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "installation_url": {
          "name": "installation_url",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "callback_url": {
          "name": "callback_url",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "callback_url",
        "id",
        "installation_url",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseAsyncContinuousDeployment": {
      "name": "VCSResponseAsyncContinuousDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSContinuousDeployment",
          "referenceName": "VCSContinuousDeployment"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseAsyncDeleteContinuousDeployment": {
      "name": "VCSResponseAsyncDeleteContinuousDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseAsyncDeleteIntegration": {
      "name": "VCSResponseAsyncDeleteIntegration",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseAsyncExecution": {
      "name": "VCSResponseAsyncExecution",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSExecution",
          "referenceName": "VCSExecution"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseAsyncExecutor": {
      "name": "VCSResponseAsyncExecutor",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSExecutor",
          "referenceName": "VCSExecutor"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseContinuousDeployment": {
      "name": "VCSResponseContinuousDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSContinuousDeployment",
          "referenceName": "VCSContinuousDeployment"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseDeleteContinuousDeployment": {
      "name": "VCSResponseDeleteContinuousDeployment",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseDeleteIntegration": {
      "name": "VCSResponseDeleteIntegration",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseExecution": {
      "name": "VCSResponseExecution",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSExecution",
          "referenceName": "VCSExecution"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseExecutor": {
      "name": "VCSResponseExecutor",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSExecutor",
          "referenceName": "VCSExecutor"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseListContinuousDeployment": {
      "name": "VCSResponseListContinuousDeployment",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "maxLength": 100
          }
        },
        "repository": {
          "name": "repository",
          "type": "string",
          "constraints": {
            "maxLength": 100,
            "pattern": "^[A-Za-z0-9\\_.\\-]+$"
          }
        },
        "branch": {
          "name": "branch",
          "type": "string",
          "constraints": {
            "maxLength": 255
          }
        },
        "build_context": {
          "name": "build_context",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "build_context_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/VCSBuildContextField",
            "referenceName": "VCSBuildContextField"
          }
        },
        "deploy_context": {
          "name": "deploy_context",
          "type": "object",
          "constraints": {}
        },
        "integration": {
          "name": "integration",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/VCSIntegration"
            }
          ]
        },
        "execution_script": {
          "name": "execution_script",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/VCSExecutionScript"
            }
          ]
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Created date of the continuous deployment.",
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "description": "Last editor of the continuous deployment.",
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Last modified date of the continuous deployment.",
          "readOnly": true
        }
      },
      "required": [
        "branch",
        "build_context",
        "created",
        "execution_script",
        "id",
        "integration",
        "last_editor",
        "last_modified",
        "name",
        "repository"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseListExecution": {
      "name": "VCSResponseListExecution",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "maxLength": 50
          }
        },
        "created_at": {
          "name": "created_at",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "updated_at": {
          "name": "updated_at",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "created_at",
        "id",
        "updated_at"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseListExecutionScript": {
      "name": "VCSResponseListExecutionScript",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {}
        },
        "template_uuid": {
          "name": "template_uuid",
          "type": "string",
          "format": "uuid",
          "constraints": {}
        }
      },
      "required": [
        "id",
        "name",
        "template_uuid"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseListIntegration": {
      "name": "VCSResponseListIntegration",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "scope": {
          "name": "scope",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "scope_type": {
          "name": "scope_type",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "provider": {
          "name": "provider",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSPlatform",
          "referenceName": "VCSPlatform"
        }
      },
      "required": [
        "id",
        "provider",
        "scope",
        "scope_type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseListPlatform": {
      "name": "VCSResponseListPlatform",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "string",
          "constraints": {
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "installation_url": {
          "name": "installation_url",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "callback_url": {
          "name": "callback_url",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "callback_url",
        "id",
        "installation_url",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseListRepository": {
      "name": "VCSResponseListRepository",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "string",
          "constraints": {}
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {}
        },
        "visibility": {
          "name": "visibility",
          "type": "string",
          "constraints": {}
        },
        "url": {
          "name": "url",
          "type": "string",
          "format": "uri",
          "constraints": {}
        }
      },
      "required": [
        "id",
        "name",
        "url",
        "visibility"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseRetrieveContinuousDeployment": {
      "name": "VCSResponseRetrieveContinuousDeployment",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSContinuousDeployment",
          "referenceName": "VCSContinuousDeployment"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseRetrieveExecutionScript": {
      "name": "VCSResponseRetrieveExecutionScript",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSExecutionScript",
          "referenceName": "VCSExecutionScript"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseRetrieveExecutor": {
      "name": "VCSResponseRetrieveExecutor",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSExecutor",
          "referenceName": "VCSExecutor"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "VCSResponseRetrieveIntegration": {
      "name": "VCSResponseRetrieveIntegration",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/VCSIntegration",
          "referenceName": "VCSIntegration"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSAlgType": {
      "name": "DNSAlgType",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 4294967295
          }
        },
        "slug": {
          "name": "slug",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "\\w"
          }
        }
      },
      "required": [
        "id",
        "slug"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSAlgTypeRequest": {
      "name": "DNSAlgTypeRequest",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "format": "int64",
          "constraints": {
            "minimum": 1,
            "maximum": 4294967295
          }
        },
        "slug": {
          "name": "slug",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "\\w"
          }
        }
      },
      "required": [
        "id",
        "slug"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSDNSSEC": {
      "name": "DNSDNSSEC",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {}
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/DNSStatusEnum"
            }
          ]
        },
        "delegation_signer": {
          "name": "delegation_signer",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/DNSDelegationSigner"
            }
          ]
        }
      },
      "required": [
        "delegation_signer",
        "enabled",
        "status"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle"
          }
        ]
      },
      "examples": []
    },
    "DNSDNSSECRequest": {
      "name": "DNSDNSSECRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "enabled"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle"
          }
        ]
      },
      "examples": []
    },
    "DNSDelegationSigner": {
      "name": "DNSDelegationSigner",
      "type": "object",
      "properties": {
        "algorithm_type": {
          "name": "algorithm_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSAlgType",
          "referenceName": "DNSAlgType"
        },
        "digest": {
          "name": "digest",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "\\w"
          }
        },
        "digest_type": {
          "name": "digest_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSAlgType",
          "referenceName": "DNSAlgType"
        },
        "key_tag": {
          "name": "key_tag",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 65535
          }
        }
      },
      "required": [
        "algorithm_type",
        "digest",
        "digest_type",
        "key_tag"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSDelegationSignerRequest": {
      "name": "DNSDelegationSignerRequest",
      "type": "object",
      "properties": {
        "algorithm_type": {
          "name": "algorithm_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSAlgTypeRequest",
          "referenceName": "DNSAlgTypeRequest"
        },
        "digest": {
          "name": "digest",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 100,
            "pattern": "\\w"
          }
        },
        "digest_type": {
          "name": "digest_type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSAlgTypeRequest",
          "referenceName": "DNSAlgTypeRequest"
        },
        "key_tag": {
          "name": "key_tag",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 65535
          }
        }
      },
      "required": [
        "algorithm_type",
        "digest",
        "digest_type",
        "key_tag"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSJSONAPIErrorObject": {
      "name": "DNSJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/DNSJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "unknown",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSJSONAPIErrorResponse": {
      "name": "DNSJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DNSJSONAPIErrorObject",
            "referenceName": "DNSJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSJSONAPIErrorSource": {
      "name": "DNSJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSPaginatedRecordList": {
      "name": "DNSPaginatedRecordList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DNSRecord",
            "referenceName": "DNSRecord"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSPaginatedZoneList": {
      "name": "DNSPaginatedZoneList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/DNSZone",
            "referenceName": "DNSZone"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSPatchedDNSSECRequest": {
      "name": "DNSPatchedDNSSECRequest",
      "type": "object",
      "properties": {
        "enabled": {
          "name": "enabled",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle"
          }
        ]
      },
      "examples": []
    },
    "DNSPatchedRecordRequest": {
      "name": "DNSPatchedRecordRequest",
      "type": "object",
      "properties": {
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 45,
            "pattern": ".*"
          },
          "default": ""
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"
          }
        },
        "ttl": {
          "name": "ttl",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          },
          "default": 3600
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSTypeEnum",
          "referenceName": "DNSTypeEnum"
        },
        "rdata": {
          "name": "rdata",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rdata_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "policy": {
          "name": "policy",
          "type": "unknown",
          "constraints": {},
          "default": "simple",
          "allOf": [
            {
              "$ref": "#/components/schemas/DNSPolicyEnum"
            }
          ]
        },
        "weight": {
          "name": "weight",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 255
          },
          "default": 255
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSPatchedUpdateZoneRequest": {
      "name": "DNSPatchedUpdateZoneRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSPolicyEnum": {
      "name": "DNSPolicyEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSRecord": {
      "name": "DNSRecord",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 45,
            "pattern": ".*"
          },
          "default": ""
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"
          }
        },
        "ttl": {
          "name": "ttl",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          },
          "default": 3600
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSTypeEnum",
          "referenceName": "DNSTypeEnum"
        },
        "rdata": {
          "name": "rdata",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rdata_item",
            "type": "string",
            "constraints": {}
          }
        },
        "policy": {
          "name": "policy",
          "type": "unknown",
          "constraints": {},
          "default": "simple",
          "allOf": [
            {
              "$ref": "#/components/schemas/DNSPolicyEnum"
            }
          ]
        },
        "weight": {
          "name": "weight",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 255
          },
          "default": 255
        }
      },
      "required": [
        "id",
        "name",
        "rdata",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSRecordRequest": {
      "name": "DNSRecordRequest",
      "type": "object",
      "properties": {
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 45,
            "pattern": ".*"
          },
          "default": ""
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"
          }
        },
        "ttl": {
          "name": "ttl",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          },
          "default": 3600
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSTypeEnum",
          "referenceName": "DNSTypeEnum"
        },
        "rdata": {
          "name": "rdata",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "rdata_item",
            "type": "string",
            "constraints": {
              "minLength": 1
            }
          }
        },
        "policy": {
          "name": "policy",
          "type": "unknown",
          "constraints": {},
          "default": "simple",
          "allOf": [
            {
              "$ref": "#/components/schemas/DNSPolicyEnum"
            }
          ]
        },
        "weight": {
          "name": "weight",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 255
          },
          "default": 255
        }
      },
      "required": [
        "name",
        "rdata",
        "type"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseAsyncDNSSEC": {
      "name": "DNSResponseAsyncDNSSEC",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSDNSSEC",
          "referenceName": "DNSDNSSEC"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseAsyncDeleteRecord": {
      "name": "DNSResponseAsyncDeleteRecord",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseAsyncDeleteZone": {
      "name": "DNSResponseAsyncDeleteZone",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseAsyncRecord": {
      "name": "DNSResponseAsyncRecord",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSRecord",
          "referenceName": "DNSRecord"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseAsyncZone": {
      "name": "DNSResponseAsyncZone",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSZone",
          "referenceName": "DNSZone"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseDNSSEC": {
      "name": "DNSResponseDNSSEC",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSDNSSEC",
          "referenceName": "DNSDNSSEC"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseDeleteRecord": {
      "name": "DNSResponseDeleteRecord",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseDeleteZone": {
      "name": "DNSResponseDeleteZone",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseRecord": {
      "name": "DNSResponseRecord",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSRecord",
          "referenceName": "DNSRecord"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseRetrieveDNSSEC": {
      "name": "DNSResponseRetrieveDNSSEC",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSDNSSEC",
          "referenceName": "DNSDNSSEC"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseRetrieveRecord": {
      "name": "DNSResponseRetrieveRecord",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSRecord",
          "referenceName": "DNSRecord"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseRetrieveZone": {
      "name": "DNSResponseRetrieveZone",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSZone",
          "referenceName": "DNSZone"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSResponseZone": {
      "name": "DNSResponseZone",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/DNSZone",
          "referenceName": "DNSZone"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSStatusEnum": {
      "name": "DNSStatusEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSTypeEnum": {
      "name": "DNSTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSUpdateZoneRequest": {
      "name": "DNSUpdateZoneRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "active",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSZone": {
      "name": "DNSZone",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "domain": {
          "name": "domain",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 200,
            "pattern": "(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\.)+[a-zA-Z]{2,63}$)"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "nameservers": {
          "name": "nameservers",
          "type": "array",
          "constraints": {},
          "readOnly": true,
          "items": {
            "name": "nameservers_item",
            "type": "string",
            "constraints": {}
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        }
      },
      "required": [
        "active",
        "domain",
        "id",
        "name",
        "nameservers",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "DNSZoneRequest": {
      "name": "DNSZoneRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 50,
            "pattern": ".*"
          }
        },
        "domain": {
          "name": "domain",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 200,
            "pattern": "(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\.)+[a-zA-Z]{2,63}$)"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "active",
        "domain",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "BILLINGJSONAPIErrorObject": {
      "name": "BILLINGJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/BILLINGJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "object",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "BILLINGJSONAPIErrorResponse": {
      "name": "BILLINGJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/BILLINGJSONAPIErrorObject",
            "referenceName": "BILLINGJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "BILLINGJSONAPIErrorSource": {
      "name": "BILLINGJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSAuthorityEnum": {
      "name": "TLSAuthorityEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSCertificate": {
      "name": "TLSCertificate",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "certificate": {
          "name": "certificate",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 600000,
            "pattern": ".*"
          }
        },
        "issuer": {
          "name": "issuer",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "subject_name": {
          "name": "subject_name",
          "type": "array",
          "constraints": {},
          "readOnly": true,
          "items": {
            "name": "subject_name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "validity": {
          "name": "validity",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "edge_certificate",
          "description": "The value can't be changed after the certificate creation.\n\n* `edge_certificate` - Edge Certificate\n* `trusted_ca_certificate` - Trusted CA Certificate",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSTypeEnum"
            }
          ]
        },
        "managed": {
          "name": "managed",
          "type": "boolean",
          "constraints": {},
          "default": false,
          "readOnly": true
        },
        "status": {
          "name": "status",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSStatusEnum"
            }
          ]
        },
        "status_detail": {
          "name": "status_detail",
          "type": "string",
          "constraints": {
            "minLength": 0,
            "maxLength": 500,
            "pattern": ".*"
          },
          "default": "",
          "readOnly": true
        },
        "csr": {
          "name": "csr",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "challenge": {
          "name": "challenge",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "oneOf": [
            {
              "$ref": "#/components/schemas/TLSChallengeEnum"
            },
            {
              "$ref": "#/components/schemas/TLSNullEnum"
            }
          ]
        },
        "authority": {
          "name": "authority",
          "type": "unknown",
          "constraints": {},
          "readOnly": true,
          "oneOf": [
            {
              "$ref": "#/components/schemas/TLSAuthorityEnum"
            },
            {
              "$ref": "#/components/schemas/TLSNullEnum"
            }
          ]
        },
        "key_algorithm": {
          "name": "key_algorithm",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Timestamp of the last modification made to the certificate content on the platform.",
          "readOnly": true
        },
        "renewed_at": {
          "name": "renewed_at",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Timestamp indicating when the managed certificate was renewed on our platform.",
          "readOnly": true
        }
      },
      "required": [
        "authority",
        "challenge",
        "csr",
        "id",
        "issuer",
        "key_algorithm",
        "last_editor",
        "last_modified",
        "managed",
        "name",
        "product_version",
        "renewed_at",
        "status",
        "status_detail",
        "subject_name",
        "validity"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSCertificateRequest": {
      "name": "TLSCertificateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "certificate": {
          "name": "certificate",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 600000,
            "pattern": ".*"
          }
        },
        "private_key": {
          "name": "private_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 64000,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "edge_certificate",
          "description": "The value can't be changed after the certificate creation.\n\n* `edge_certificate` - Edge Certificate\n* `trusted_ca_certificate` - Trusted CA Certificate",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSTypeEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSCertificateRequestRequest": {
      "name": "TLSCertificateRequestRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "certificate": {
          "name": "certificate",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 600000,
            "pattern": ".*"
          }
        },
        "private_key": {
          "name": "private_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 64000,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "edge_certificate",
          "description": "The value can't be changed after the certificate creation.\n\n* `edge_certificate` - Edge Certificate\n* `trusted_ca_certificate` - Trusted CA Certificate",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSTypeEnum"
            }
          ]
        },
        "challenge": {
          "name": "challenge",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSChallengeEnum",
          "referenceName": "TLSChallengeEnum"
        },
        "authority": {
          "name": "authority",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSAuthorityEnum",
          "referenceName": "TLSAuthorityEnum"
        },
        "key_algorithm": {
          "name": "key_algorithm",
          "type": "unknown",
          "constraints": {},
          "default": "ecc_384",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSKeyAlgorithmEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "common_name": {
          "name": "common_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^(((\\*\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"
          },
          "writeOnly": true
        },
        "alternative_names": {
          "name": "alternative_names",
          "type": "array",
          "constraints": {},
          "writeOnly": true,
          "items": {
            "name": "alternative_names_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 250,
              "pattern": "^(((\\*\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"
            }
          }
        },
        "source_certificate": {
          "name": "source_certificate",
          "type": "integer",
          "constraints": {
            "minimum": 1,
            "maximum": 2147483647
          },
          "writeOnly": true
        }
      },
      "required": [
        "authority",
        "challenge",
        "common_name",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSCertificateRevocationList": {
      "name": "TLSCertificateRevocationList",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true,
          "description": "Indicates if the certificate revocation list is active. This field cannot be set to false."
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Timestamp of the last modification made to the certificate content on the platform.",
          "readOnly": true
        },
        "product_version": {
          "name": "product_version",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 50,
            "pattern": "\\d+\\.\\d+"
          },
          "readOnly": true
        },
        "issuer": {
          "name": "issuer",
          "type": "string",
          "constraints": {
            "minLength": 1
          },
          "readOnly": true
        },
        "last_update": {
          "name": "last_update",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Timestamp of the last update issued by the certification revocation list issuer.",
          "readOnly": true
        },
        "next_update": {
          "name": "next_update",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "description": "Timestamp of the next scheduled update from the certification revocation list issuer.",
          "readOnly": true
        },
        "crl": {
          "name": "crl",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 30720000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "crl",
        "id",
        "issuer",
        "last_editor",
        "last_modified",
        "last_update",
        "name",
        "next_update",
        "product_version"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSCertificateRevocationListRequest": {
      "name": "TLSCertificateRevocationListRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true,
          "description": "Indicates if the certificate revocation list is active. This field cannot be set to false."
        },
        "crl": {
          "name": "crl",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 30720000,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "crl",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSCertificateSigningRequestRequest": {
      "name": "TLSCertificateSigningRequestRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "certificate": {
          "name": "certificate",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 600000,
            "pattern": ".*"
          }
        },
        "private_key": {
          "name": "private_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 64000,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "edge_certificate",
          "description": "The value can't be changed after the certificate creation.\n\n* `edge_certificate` - Edge Certificate\n* `trusted_ca_certificate` - Trusted CA Certificate",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSTypeEnum"
            }
          ]
        },
        "key_algorithm": {
          "name": "key_algorithm",
          "type": "unknown",
          "constraints": {},
          "default": "rsa_2048",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSKeyAlgorithmEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "common_name": {
          "name": "common_name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^(((\\*\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"
          },
          "writeOnly": true
        },
        "alternative_names": {
          "name": "alternative_names",
          "type": "array",
          "constraints": {},
          "writeOnly": true,
          "items": {
            "name": "alternative_names_item",
            "type": "string",
            "constraints": {
              "minLength": 1,
              "maxLength": 250,
              "pattern": "^(((\\*\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"
            }
          }
        },
        "country": {
          "name": "country",
          "type": "string",
          "constraints": {
            "minLength": 2,
            "maxLength": 2,
            "pattern": "[a-zA-Z]{2}"
          },
          "writeOnly": true
        },
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "locality": {
          "name": "locality",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "organization": {
          "name": "organization",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "organization_unity": {
          "name": "organization_unity",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {
            "minLength": 1
          },
          "writeOnly": true
        }
      },
      "required": [
        "common_name",
        "country",
        "email",
        "locality",
        "name",
        "organization",
        "organization_unity",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSChallengeEnum": {
      "name": "TLSChallengeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSDefaultErrorResponse": {
      "name": "TLSDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSJSONAPIErrorObject": {
      "name": "TLSJSONAPIErrorObject",
      "type": "object",
      "properties": {
        "status": {
          "name": "status",
          "type": "string",
          "constraints": {
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^\\d{3}$"
          },
          "description": "The HTTP status code applicable to this problem"
        },
        "code": {
          "name": "code",
          "type": "string",
          "constraints": {
            "minLength": 5,
            "maxLength": 5,
            "pattern": "^\\d{5}$"
          },
          "description": "An application-specific error code"
        },
        "title": {
          "name": "title",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A short, human-readable summary of the problem"
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "A human-readable explanation specific to this occurrence of the problem"
        },
        "source": {
          "name": "source",
          "type": "unknown",
          "constraints": {},
          "description": "References to the primary source of the error",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSJSONAPIErrorSource"
            }
          ]
        },
        "meta": {
          "name": "meta",
          "type": "unknown",
          "constraints": {},
          "description": "Non-standard meta-information about the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSJSONAPIErrorResponse": {
      "name": "TLSJSONAPIErrorResponse",
      "type": "object",
      "properties": {
        "errors": {
          "name": "errors",
          "type": "array",
          "constraints": {},
          "description": "Array of error objects",
          "items": {
            "name": "errors_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/TLSJSONAPIErrorObject",
            "referenceName": "TLSJSONAPIErrorObject"
          }
        }
      },
      "required": [
        "errors"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSJSONAPIErrorSource": {
      "name": "TLSJSONAPIErrorSource",
      "type": "object",
      "properties": {
        "pointer": {
          "name": "pointer",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^(/[^/]+)+$"
          },
          "description": "JSON Pointer to the value in the request document that caused the error"
        },
        "parameter": {
          "name": "parameter",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "URI query parameter that caused the error"
        },
        "header": {
          "name": "header",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": "^.*$"
          },
          "description": "Request header name that caused the error"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSKeyAlgorithmEnum": {
      "name": "TLSKeyAlgorithmEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSNullEnum": {
      "name": "TLSNullEnum",
      "type": "object",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSPaginatedCertificateList": {
      "name": "TLSPaginatedCertificateList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/TLSCertificate",
            "referenceName": "TLSCertificate"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSPaginatedCertificateRevocationListList": {
      "name": "TLSPaginatedCertificateRevocationListList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/TLSCertificateRevocationList",
            "referenceName": "TLSCertificateRevocationList"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSPatchedCertificateRequest": {
      "name": "TLSPatchedCertificateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "certificate": {
          "name": "certificate",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 600000,
            "pattern": ".*"
          }
        },
        "private_key": {
          "name": "private_key",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 64000,
            "pattern": ".*"
          },
          "writeOnly": true
        },
        "type": {
          "name": "type",
          "type": "unknown",
          "constraints": {},
          "default": "edge_certificate",
          "description": "The value can't be changed after the certificate creation.\n\n* `edge_certificate` - Edge Certificate\n* `trusted_ca_certificate` - Trusted CA Certificate",
          "allOf": [
            {
              "$ref": "#/components/schemas/TLSTypeEnum"
            }
          ]
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSPatchedCertificateRevocationListRequest": {
      "name": "TLSPatchedCertificateRevocationListRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 250,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true,
          "description": "Indicates if the certificate revocation list is active. This field cannot be set to false."
        },
        "crl": {
          "name": "crl",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 30720000,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseAsyncCertificate": {
      "name": "TLSResponseAsyncCertificate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSCertificate",
          "referenceName": "TLSCertificate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseAsyncCertificateRevocationList": {
      "name": "TLSResponseAsyncCertificateRevocationList",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSCertificateRevocationList",
          "referenceName": "TLSCertificateRevocationList"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseAsyncDeleteCertificate": {
      "name": "TLSResponseAsyncDeleteCertificate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseAsyncDeleteCertificateRevocationList": {
      "name": "TLSResponseAsyncDeleteCertificateRevocationList",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "pending"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseBadRequestCertificate": {
      "name": "TLSResponseBadRequestCertificate",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "certificate": {
          "name": "certificate",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "certificate_item",
            "type": "string",
            "constraints": {}
          }
        },
        "private_key": {
          "name": "private_key",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "private_key_item",
            "type": "string",
            "constraints": {}
          }
        },
        "issuer": {
          "name": "issuer",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "issuer_item",
            "type": "string",
            "constraints": {}
          }
        },
        "validity": {
          "name": "validity",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "validity_item",
            "type": "string",
            "constraints": {}
          }
        },
        "subject_name": {
          "name": "subject_name",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "type": {
          "name": "type",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "type_item",
            "type": "string",
            "constraints": {}
          }
        },
        "managed": {
          "name": "managed",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "managed_item",
            "type": "string",
            "constraints": {}
          }
        },
        "status": {
          "name": "status",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "status_item",
            "type": "string",
            "constraints": {}
          }
        },
        "status_detail": {
          "name": "status_detail",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "status_detail_item",
            "type": "string",
            "constraints": {}
          }
        },
        "csr": {
          "name": "csr",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "csr_item",
            "type": "string",
            "constraints": {}
          }
        },
        "key_algorithm": {
          "name": "key_algorithm",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "key_algorithm_item",
            "type": "string",
            "constraints": {}
          }
        },
        "challenge": {
          "name": "challenge",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "challenge_item",
            "type": "string",
            "constraints": {}
          }
        },
        "authority": {
          "name": "authority",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "authority_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "product_version": {
          "name": "product_version",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "product_version_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "renewed_at": {
          "name": "renewed_at",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "renewed_at_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseCertificate": {
      "name": "TLSResponseCertificate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSCertificate",
          "referenceName": "TLSCertificate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseCertificateRevocationList": {
      "name": "TLSResponseCertificateRevocationList",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSCertificateRevocationList",
          "referenceName": "TLSCertificateRevocationList"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseDeleteCertificate": {
      "name": "TLSResponseDeleteCertificate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseDeleteCertificateRevocationList": {
      "name": "TLSResponseDeleteCertificateRevocationList",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 8,
            "pattern": ".*"
          },
          "default": "executed"
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseRetrieveCertificate": {
      "name": "TLSResponseRetrieveCertificate",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSCertificate",
          "referenceName": "TLSCertificate"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSResponseRetrieveCertificateRevocationList": {
      "name": "TLSResponseRetrieveCertificateRevocationList",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/TLSCertificateRevocationList",
          "referenceName": "TLSCertificateRevocationList"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSStatusEnum": {
      "name": "TLSStatusEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "TLSTypeEnum": {
      "name": "TLSTypeEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEDefaultErrorResponse": {
      "name": "MARKETPLACEDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEPublisher": {
      "name": "MARKETPLACEPublisher",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "icon": {
          "name": "icon",
          "type": "string",
          "format": "uri",
          "constraints": {
            "maxLength": 200
          }
        },
        "organization_id": {
          "name": "organization_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {},
          "readOnly": true
        },
        "vendor": {
          "name": "vendor",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "created",
        "icon",
        "id",
        "last_editor",
        "last_modified",
        "organization_id",
        "vendor"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEPublisherRequest": {
      "name": "MARKETPLACEPublisherRequest",
      "type": "object",
      "properties": {
        "icon": {
          "name": "icon",
          "type": "string",
          "format": "uri",
          "constraints": {
            "minLength": 1,
            "maxLength": 200
          }
        }
      },
      "required": [
        "icon"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEResponseBadRequestPublisher": {
      "name": "MARKETPLACEResponseBadRequestPublisher",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEResponsePublisher": {
      "name": "MARKETPLACEResponsePublisher",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/MARKETPLACEStateEnum",
          "referenceName": "MARKETPLACEStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/MARKETPLACEPublisher",
          "referenceName": "MARKETPLACEPublisher"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEResponseRetrievePublisher": {
      "name": "MARKETPLACEResponseRetrievePublisher",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/MARKETPLACEPublisher",
          "referenceName": "MARKETPLACEPublisher"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "MARKETPLACEStateEnum": {
      "name": "MARKETPLACEStateEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYDefaultErrorResponse": {
      "name": "IDENTITYDefaultErrorResponse",
      "type": "object",
      "properties": {
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYFavorite": {
      "name": "IDENTITYFavorite",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "uri": {
          "name": "uri",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^/v\\d/[a-zA-Z0-9_-]+/"
          }
        },
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {},
          "description": "Favorite type",
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "uri"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYFavoriteRequest": {
      "name": "IDENTITYFavoriteRequest",
      "type": "object",
      "properties": {
        "uri": {
          "name": "uri",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^/v\\d/[a-zA-Z0-9_-]+/"
          }
        }
      },
      "required": [
        "uri"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYGrant": {
      "name": "IDENTITYGrant",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "identity": {
          "name": "identity",
          "type": "integer",
          "constraints": {}
        },
        "roles": {
          "name": "roles",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "roles_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "policies": {
          "name": "policies",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "policies_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "owner": {
          "name": "owner",
          "type": "boolean",
          "constraints": {}
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        }
      },
      "required": [
        "account_id",
        "id",
        "owner"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYGrantRequest": {
      "name": "IDENTITYGrantRequest",
      "type": "object",
      "properties": {
        "identity": {
          "name": "identity",
          "type": "integer",
          "constraints": {}
        },
        "roles": {
          "name": "roles",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "roles_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "policies": {
          "name": "policies",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "policies_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "owner": {
          "name": "owner",
          "type": "boolean",
          "constraints": {}
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        }
      },
      "required": [
        "account_id",
        "owner"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYGroup": {
      "name": "IDENTITYGroup",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYGroupMembers": {
      "name": "IDENTITYGroupMembers",
      "type": "object",
      "properties": {
        "members": {
          "name": "members",
          "type": "array",
          "constraints": {},
          "description": "List of the users' IDs.",
          "items": {
            "name": "members_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [
        "members"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYGroupMembersRequest": {
      "name": "IDENTITYGroupMembersRequest",
      "type": "object",
      "properties": {
        "members": {
          "name": "members",
          "type": "array",
          "constraints": {},
          "description": "List of the users' IDs.",
          "items": {
            "name": "members_item",
            "type": "integer",
            "constraints": {}
          }
        }
      },
      "required": [
        "members"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYGroupRequest": {
      "name": "IDENTITYGroupRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPaginatedResponseListFavoriteList": {
      "name": "IDENTITYPaginatedResponseListFavoriteList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/IDENTITYResponseListFavorite",
            "referenceName": "IDENTITYResponseListFavorite"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPaginatedResponseListGrantList": {
      "name": "IDENTITYPaginatedResponseListGrantList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/IDENTITYResponseListGrant",
            "referenceName": "IDENTITYResponseListGrant"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPaginatedResponseListGroupList": {
      "name": "IDENTITYPaginatedResponseListGroupList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/IDENTITYResponseListGroup",
            "referenceName": "IDENTITYResponseListGroup"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPaginatedResponseListServiceTokenList": {
      "name": "IDENTITYPaginatedResponseListServiceTokenList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/IDENTITYResponseListServiceToken",
            "referenceName": "IDENTITYResponseListServiceToken"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPaginatedResponseListUserList": {
      "name": "IDENTITYPaginatedResponseListUserList",
      "type": "object",
      "properties": {
        "count": {
          "name": "count",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        },
        "results": {
          "name": "results",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "results_item",
            "type": "unknown",
            "constraints": {},
            "reference": "#/components/schemas/IDENTITYResponseListUser",
            "referenceName": "IDENTITYResponseListUser"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPatchedGrantRequest": {
      "name": "IDENTITYPatchedGrantRequest",
      "type": "object",
      "properties": {
        "identity": {
          "name": "identity",
          "type": "integer",
          "constraints": {}
        },
        "roles": {
          "name": "roles",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "roles_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "policies": {
          "name": "policies",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "policies_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "owner": {
          "name": "owner",
          "type": "boolean",
          "constraints": {}
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPatchedGroupRequest": {
      "name": "IDENTITYPatchedGroupRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPatchedServiceTokenUpdateRequest": {
      "name": "IDENTITYPatchedServiceTokenUpdateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYPatchedUserRequest": {
      "name": "IDENTITYPatchedUserRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "two_factor_enabled": {
          "name": "two_factor_enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "preferences": {
          "name": "preferences",
          "type": "object",
          "constraints": {},
          "description": "User-specific preferences in JSON format."
        },
        "phone": {
          "name": "phone",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 31,
            "pattern": "^[+\\d()\\-/.\\s]*$"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "IDENTITYResponseBadRequestFavorite": {
      "name": "IDENTITYResponseBadRequestFavorite",
      "type": "object",
      "properties": {
        "uri": {
          "name": "uri",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "uri_item",
            "type": "string",
            "constraints": {}
          }
        },
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestGrant": {
      "name": "IDENTITYResponseBadRequestGrant",
      "type": "object",
      "properties": {
        "identity": {
          "name": "identity",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "identity_item",
            "type": "string",
            "constraints": {}
          }
        },
        "roles": {
          "name": "roles",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "policies": {
          "name": "policies",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "expires": {
          "name": "expires",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "expires_item",
            "type": "string",
            "constraints": {}
          }
        },
        "owner": {
          "name": "owner",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "owner_item",
            "type": "string",
            "constraints": {}
          }
        },
        "account_id": {
          "name": "account_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "account_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestGroup": {
      "name": "IDENTITYResponseBadRequestGroup",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "email": {
          "name": "email",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "email_item",
            "type": "string",
            "constraints": {}
          }
        },
        "created": {
          "name": "created",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "created_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "account_id": {
          "name": "account_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "account_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestGroupMembers": {
      "name": "IDENTITYResponseBadRequestGroupMembers",
      "type": "object",
      "properties": {
        "members": {
          "name": "members",
          "type": "unknown",
          "constraints": {},
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestServiceToken": {
      "name": "IDENTITYResponseBadRequestServiceToken",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "email": {
          "name": "email",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "email_item",
            "type": "string",
            "constraints": {}
          }
        },
        "created": {
          "name": "created",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "created_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "account_id": {
          "name": "account_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "account_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "description": {
          "name": "description",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "description_item",
            "type": "string",
            "constraints": {}
          }
        },
        "expires": {
          "name": "expires",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "expires_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_used": {
          "name": "last_used",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_used_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestServiceTokenRenew": {
      "name": "IDENTITYResponseBadRequestServiceTokenRenew",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "email": {
          "name": "email",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "email_item",
            "type": "string",
            "constraints": {}
          }
        },
        "created": {
          "name": "created",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "created_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "account_id": {
          "name": "account_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "account_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "description": {
          "name": "description",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "description_item",
            "type": "string",
            "constraints": {}
          }
        },
        "expires": {
          "name": "expires",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "expires_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_used": {
          "name": "last_used",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_used_item",
            "type": "string",
            "constraints": {}
          }
        },
        "token": {
          "name": "token",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "token_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestUser": {
      "name": "IDENTITYResponseBadRequestUser",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "name_item",
            "type": "string",
            "constraints": {}
          }
        },
        "email": {
          "name": "email",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "email_item",
            "type": "string",
            "constraints": {}
          }
        },
        "created": {
          "name": "created",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "created_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_editor": {
          "name": "last_editor",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_editor_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_modified": {
          "name": "last_modified",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_modified_item",
            "type": "string",
            "constraints": {}
          }
        },
        "active": {
          "name": "active",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "active_item",
            "type": "string",
            "constraints": {}
          }
        },
        "account_id": {
          "name": "account_id",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "account_id_item",
            "type": "string",
            "constraints": {}
          }
        },
        "last_login": {
          "name": "last_login",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "last_login_item",
            "type": "string",
            "constraints": {}
          }
        },
        "two_factor_enabled": {
          "name": "two_factor_enabled",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "two_factor_enabled_item",
            "type": "string",
            "constraints": {}
          }
        },
        "phone": {
          "name": "phone",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "phone_item",
            "type": "string",
            "constraints": {}
          }
        },
        "info": {
          "name": "info",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "info_item",
            "type": "string",
            "constraints": {}
          }
        },
        "lockout": {
          "name": "lockout",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "lockout_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseBadRequestUserInfo": {
      "name": "IDENTITYResponseBadRequestUserInfo",
      "type": "object",
      "properties": {
        "info": {
          "name": "info",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "info_item",
            "type": "string",
            "constraints": {}
          }
        },
        "detail": {
          "name": "detail",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 4096,
            "pattern": ".*"
          }
        }
      },
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseDeleteFavorite": {
      "name": "IDENTITYResponseDeleteFavorite",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/IDENTITYFavorite"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseDeleteGrant": {
      "name": "IDENTITYResponseDeleteGrant",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/IDENTITYGrant"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseDeleteGroup": {
      "name": "IDENTITYResponseDeleteGroup",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/IDENTITYGroup"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseDeleteServiceToken": {
      "name": "IDENTITYResponseDeleteServiceToken",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/IDENTITYServiceToken"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseDeleteUser": {
      "name": "IDENTITYResponseDeleteUser",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "allOf": [
            {
              "$ref": "#/components/schemas/IDENTITYUser"
            }
          ]
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseFavorite": {
      "name": "IDENTITYResponseFavorite",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYFavorite",
          "referenceName": "IDENTITYFavorite"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseGrant": {
      "name": "IDENTITYResponseGrant",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYGrant",
          "referenceName": "IDENTITYGrant"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseGroup": {
      "name": "IDENTITYResponseGroup",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYGroup",
          "referenceName": "IDENTITYGroup"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseGroupMembers": {
      "name": "IDENTITYResponseGroupMembers",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYGroupMembers",
          "referenceName": "IDENTITYGroupMembers"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseListFavorite": {
      "name": "IDENTITYResponseListFavorite",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "uri": {
          "name": "uri",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^/v\\d/[a-zA-Z0-9_-]+/"
          }
        },
        "type": {
          "name": "type",
          "type": "string",
          "constraints": {},
          "description": "Favorite type",
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "uri"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseListGrant": {
      "name": "IDENTITYResponseListGrant",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "identity": {
          "name": "identity",
          "type": "integer",
          "constraints": {}
        },
        "roles": {
          "name": "roles",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "roles_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "policies": {
          "name": "policies",
          "type": "array",
          "constraints": {},
          "items": {
            "name": "policies_item",
            "type": "integer",
            "constraints": {}
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "owner": {
          "name": "owner",
          "type": "boolean",
          "constraints": {}
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {
            "minimum": 0,
            "maximum": 2147483647
          }
        }
      },
      "required": [
        "account_id",
        "id",
        "owner"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseListGroup": {
      "name": "IDENTITYResponseListGroup",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "id",
        "last_editor",
        "last_modified",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseListServiceToken": {
      "name": "IDENTITYResponseListServiceToken",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "last_used": {
          "name": "last_used",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "expires",
        "id",
        "last_editor",
        "last_modified",
        "last_used",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseListUser": {
      "name": "IDENTITYResponseListUser",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {
            "maxLength": 255
          }
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "last_login": {
          "name": "last_login",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "two_factor_enabled": {
          "name": "two_factor_enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "preferences": {
          "name": "preferences",
          "type": "object",
          "constraints": {},
          "description": "User-specific preferences in JSON format."
        },
        "phone": {
          "name": "phone",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 31,
            "pattern": "^[+\\d()\\-/.\\s]*$"
          }
        },
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {},
          "readOnly": true
        },
        "lockout": {
          "name": "lockout",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "id",
        "info",
        "last_editor",
        "last_login",
        "last_modified",
        "lockout",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "IDENTITYResponseRetrieveGrant": {
      "name": "IDENTITYResponseRetrieveGrant",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYGrant",
          "referenceName": "IDENTITYGrant"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseRetrieveGroup": {
      "name": "IDENTITYResponseRetrieveGroup",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYGroup",
          "referenceName": "IDENTITYGroup"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseRetrieveGroupMembers": {
      "name": "IDENTITYResponseRetrieveGroupMembers",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYGroupMembers",
          "referenceName": "IDENTITYGroupMembers"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseRetrieveServiceToken": {
      "name": "IDENTITYResponseRetrieveServiceToken",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYServiceToken",
          "referenceName": "IDENTITYServiceToken"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseRetrieveUser": {
      "name": "IDENTITYResponseRetrieveUser",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYUser",
          "referenceName": "IDENTITYUser"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseRetrieveUserInfo": {
      "name": "IDENTITYResponseRetrieveUserInfo",
      "type": "object",
      "properties": {
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYUserInfo",
          "referenceName": "IDENTITYUserInfo"
        }
      },
      "required": [
        "data"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseServiceToken": {
      "name": "IDENTITYResponseServiceToken",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYServiceToken",
          "referenceName": "IDENTITYServiceToken"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseServiceTokenCreate": {
      "name": "IDENTITYResponseServiceTokenCreate",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYServiceTokenCreate",
          "referenceName": "IDENTITYServiceTokenCreate"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseServiceTokenRenew": {
      "name": "IDENTITYResponseServiceTokenRenew",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYServiceTokenRenew",
          "referenceName": "IDENTITYServiceTokenRenew"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseUser": {
      "name": "IDENTITYResponseUser",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYUser",
          "referenceName": "IDENTITYUser"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYResponseUserInfo": {
      "name": "IDENTITYResponseUserInfo",
      "type": "object",
      "properties": {
        "state": {
          "name": "state",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYStateEnum",
          "referenceName": "IDENTITYStateEnum"
        },
        "data": {
          "name": "data",
          "type": "unknown",
          "constraints": {},
          "reference": "#/components/schemas/IDENTITYUserInfo",
          "referenceName": "IDENTITYUserInfo"
        }
      },
      "required": [
        "data",
        "state"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYServiceToken": {
      "name": "IDENTITYServiceToken",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "last_used": {
          "name": "last_used",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "expires",
        "id",
        "last_editor",
        "last_modified",
        "last_used",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYServiceTokenCreate": {
      "name": "IDENTITYServiceTokenCreate",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "last_used": {
          "name": "last_used",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "token": {
          "name": "token",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "expires",
        "id",
        "last_editor",
        "last_modified",
        "last_used",
        "name",
        "token"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYServiceTokenCreateRequest": {
      "name": "IDENTITYServiceTokenCreateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "expires",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYServiceTokenRenew": {
      "name": "IDENTITYServiceTokenRenew",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {},
          "readOnly": true
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "readOnly": true
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "pattern": ".*"
          },
          "readOnly": true
        },
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        },
        "last_used": {
          "name": "last_used",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "token": {
          "name": "token",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "active",
        "created",
        "description",
        "email",
        "expires",
        "id",
        "last_editor",
        "last_modified",
        "last_used",
        "name",
        "token"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYServiceTokenRenewRequest": {
      "name": "IDENTITYServiceTokenRenewRequest",
      "type": "object",
      "properties": {
        "expires": {
          "name": "expires",
          "type": "string",
          "format": "date-time",
          "constraints": {}
        }
      },
      "required": [
        "expires"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYServiceTokenUpdateRequest": {
      "name": "IDENTITYServiceTokenUpdateRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {},
          "default": true
        },
        "description": {
          "name": "description",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        }
      },
      "required": [
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYStateEnum": {
      "name": "IDENTITYStateEnum",
      "type": "string",
      "properties": {},
      "required": [],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYUser": {
      "name": "IDENTITYUser",
      "type": "object",
      "properties": {
        "id": {
          "name": "id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {
            "maxLength": 255
          }
        },
        "created": {
          "name": "created",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "last_editor": {
          "name": "last_editor",
          "type": "string",
          "constraints": {
            "pattern": ".*"
          },
          "readOnly": true
        },
        "last_modified": {
          "name": "last_modified",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "account_id": {
          "name": "account_id",
          "type": "integer",
          "constraints": {},
          "readOnly": true
        },
        "last_login": {
          "name": "last_login",
          "type": "string",
          "format": "date-time",
          "constraints": {},
          "readOnly": true
        },
        "two_factor_enabled": {
          "name": "two_factor_enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "preferences": {
          "name": "preferences",
          "type": "object",
          "constraints": {},
          "description": "User-specific preferences in JSON format."
        },
        "phone": {
          "name": "phone",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 31,
            "pattern": "^[+\\d()\\-/.\\s]*$"
          }
        },
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {},
          "readOnly": true
        },
        "lockout": {
          "name": "lockout",
          "type": "string",
          "constraints": {},
          "readOnly": true
        }
      },
      "required": [
        "account_id",
        "created",
        "email",
        "id",
        "info",
        "last_editor",
        "last_login",
        "last_modified",
        "lockout",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    },
    "IDENTITYUserInfo": {
      "name": "IDENTITYUserInfo",
      "type": "object",
      "properties": {
        "info": {
          "name": "info",
          "type": "object",
          "constraints": {}
        }
      },
      "required": [
        "info"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {},
      "examples": []
    },
    "IDENTITYUserRequest": {
      "name": "IDENTITYUserRequest",
      "type": "object",
      "properties": {
        "name": {
          "name": "name",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 255,
            "pattern": ".*"
          }
        },
        "email": {
          "name": "email",
          "type": "string",
          "format": "email",
          "constraints": {
            "minLength": 1,
            "maxLength": 255
          }
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "constraints": {}
        },
        "two_factor_enabled": {
          "name": "two_factor_enabled",
          "type": "boolean",
          "constraints": {},
          "default": false
        },
        "preferences": {
          "name": "preferences",
          "type": "object",
          "constraints": {},
          "description": "User-specific preferences in JSON format."
        },
        "phone": {
          "name": "phone",
          "type": "string",
          "constraints": {
            "minLength": 1,
            "maxLength": 31,
            "pattern": "^[+\\d()\\-/.\\s]*$"
          }
        }
      },
      "required": [
        "email",
        "name"
      ],
      "constraints": {
        "additionalProperties": false
      },
      "relationships": [],
      "conditional_fields": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "examples": []
    }
  },
  "paths": {
    "/workspace/applications": {
      "url": "/workspace/applications",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplications",
          "summary": "List Applications",
          "description": "List all Applications owned by your account.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, last_editor, last_modified, active, debug, product_version)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationList",
                    "referenceName": "EDGEPaginatedApplicationList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplications",
          "summary": "Create an Application",
          "description": "Create a new Application in your account.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationRequest",
                  "referenceName": "EDGEApplicationRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplication",
                    "referenceName": "EDGEResponseApplication"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplication",
                    "referenceName": "EDGEResponseAsyncApplication"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}": {
      "url": "/workspace/applications/{application_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationId",
          "summary": "Retrieve details of an Application",
          "description": "Retrieve details of a specific Application in your account.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "integer",
                "constraints": {}
              },
              "description": "A unique integer value identifying the application."
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveApplication",
                    "referenceName": "EDGEResponseRetrieveApplication"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationId",
          "summary": "Update an Application",
          "description": "Update an existing Application. This replaces the entire Application with the new data provided.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "integer",
                "constraints": {}
              },
              "description": "A unique integer value identifying the application."
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationRequest",
                  "referenceName": "EDGEApplicationRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplication",
                    "referenceName": "EDGEResponseApplication"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplication",
                    "referenceName": "EDGEResponseAsyncApplication"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeApplicationApplicationsApplicationId",
          "summary": "Partially update an Application",
          "description": "Update one or more fields of an existing Application without affecting other fields.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "integer",
                "constraints": {}
              },
              "description": "A unique integer value identifying the application."
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedApplicationRequest",
                  "referenceName": "EDGEPatchedApplicationRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplication",
                    "referenceName": "EDGEResponseApplication"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplication",
                    "referenceName": "EDGEResponseAsyncApplication"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeApplicationApplicationsApplicationId",
          "summary": "Destroy an Application",
          "description": "Destruction of a specific Application in your account.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "integer",
                "constraints": {}
              },
              "description": "A unique integer value identifying the application."
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteApplication",
                    "referenceName": "EDGEResponseDeleteApplication"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteApplication",
                    "referenceName": "EDGEResponseAsyncDeleteApplication"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/clone": {
      "url": "/workspace/applications/{application_id}/clone",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplicationsApplicationIdClone",
          "summary": "Clone an Application",
          "description": "Create a new Application by performing a deep copy of an existing Application, including its Cache Settings, Origins, Error Responses, Function Instances, and Rules Engine.",
          "tags": [
            "Applications"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECloneApplicationRequest",
                  "referenceName": "EDGECloneApplicationRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveApplication",
                    "referenceName": "EDGEResponseRetrieveApplication"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplication",
                    "referenceName": "EDGEResponseAsyncApplication"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestApplication",
                    "referenceName": "EDGEResponseBadRequestApplication"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/cache_settings": {
      "url": "/workspace/applications/{application_id}/cache_settings",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdCacheSettings",
          "summary": "List all Applications Cache Settings",
          "description": "List all Cache Settings owned by your account.",
          "tags": [
            "Applications - Cache Settings"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedResponseListCacheSettingList",
                    "referenceName": "EDGEPaginatedResponseListCacheSettingList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestCacheSetting",
                    "referenceName": "EDGEResponseBadRequestCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplicationsApplicationIdCacheSettings",
          "summary": "Create an Applications Cache Setting",
          "description": "Create a new Cache Setting in your account.",
          "tags": [
            "Applications - Cache Settings"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECacheSettingRequest",
                  "referenceName": "EDGECacheSettingRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCacheSetting",
                    "referenceName": "EDGEResponseAsyncCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCacheSetting",
                    "referenceName": "EDGEResponseAsyncCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestCacheSetting",
                    "referenceName": "EDGEResponseBadRequestCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/cache_settings/{id}": {
      "url": "/workspace/applications/{application_id}/cache_settings/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdCacheSettingsId",
          "summary": "Retrieve details of an Applications Cache Setting",
          "description": "Retrieve details of a specific Cache Setting in your account.",
          "tags": [
            "Applications - Cache Settings"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveCacheSetting",
                    "referenceName": "EDGEResponseRetrieveCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestCacheSetting",
                    "referenceName": "EDGEResponseBadRequestCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdCacheSettingsId",
          "summary": "Update an Applications Cache Setting",
          "description": "Update an existing Cache Setting. This replaces the entire Cache Setting with the new data provided.",
          "tags": [
            "Applications - Cache Settings"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECacheSettingRequest",
                  "referenceName": "EDGECacheSettingRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCacheSetting",
                    "referenceName": "EDGEResponseAsyncCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCacheSetting",
                    "referenceName": "EDGEResponseAsyncCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestCacheSetting",
                    "referenceName": "EDGEResponseBadRequestCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeApplicationApplicationsApplicationIdCacheSettingsId",
          "summary": "Partially update an Applications Cache Setting",
          "description": "Update one or more fields of an existing Cache Setting without affecting other fields.",
          "tags": [
            "Applications - Cache Settings"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedCacheSettingRequest",
                  "referenceName": "EDGEPatchedCacheSettingRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCacheSetting",
                    "referenceName": "EDGEResponseAsyncCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCacheSetting",
                    "referenceName": "EDGEResponseAsyncCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestCacheSetting",
                    "referenceName": "EDGEResponseBadRequestCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeApplicationApplicationsApplicationIdCacheSettingsId",
          "summary": "Destroy an Applications Cache Setting",
          "description": "Destruction of a specific Cache Setting in your account.",
          "tags": [
            "Applications - Cache Settings"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteCacheSetting",
                    "referenceName": "EDGEResponseAsyncDeleteCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteCacheSetting",
                    "referenceName": "EDGEResponseAsyncDeleteCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestCacheSetting",
                    "referenceName": "EDGEResponseBadRequestCacheSetting"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/device_groups": {
      "url": "/workspace/applications/{application_id}/device_groups",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdDeviceGroups",
          "summary": "List Applications Device Groups",
          "description": "List all Device Groups owned by your account.",
          "tags": [
            "Applications - Device Groups"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, user_agent)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationDeviceGroupsList",
                    "referenceName": "EDGEPaginatedApplicationDeviceGroupsList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplicationsApplicationIdDeviceGroups",
          "summary": "Create an Applications Device Group",
          "description": "Create a new Device Group in your account.",
          "tags": [
            "Applications - Device Groups"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationDeviceGroupsRequest",
                  "referenceName": "EDGEApplicationDeviceGroupsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationDeviceGroups",
                    "referenceName": "EDGEResponseApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationDeviceGroups",
                    "referenceName": "EDGEResponseAsyncApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/device_groups/{id}": {
      "url": "/workspace/applications/{application_id}/device_groups/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdDeviceGroupsId",
          "summary": "Retrieve details of a Device Group",
          "description": "Retrieve details of a specific Device Group in your account.",
          "tags": [
            "Applications - Device Groups"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveApplicationDeviceGroups",
                    "referenceName": "EDGEResponseRetrieveApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdDeviceGroupsId",
          "summary": "Update an Applications Device Group",
          "description": "Update an existing Device Group. This replaces the entire Device Group with the new data provided.",
          "tags": [
            "Applications - Device Groups"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationDeviceGroupsRequest",
                  "referenceName": "EDGEApplicationDeviceGroupsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationDeviceGroups",
                    "referenceName": "EDGEResponseApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationDeviceGroups",
                    "referenceName": "EDGEResponseAsyncApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeApplicationApplicationsApplicationIdDeviceGroupsId",
          "summary": "Partially update an Applications Device Group",
          "description": "Update one or more fields of an existing Device Group without affecting other fields.",
          "tags": [
            "Applications - Device Groups"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedApplicationDeviceGroupsRequest",
                  "referenceName": "EDGEPatchedApplicationDeviceGroupsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationDeviceGroups",
                    "referenceName": "EDGEResponseApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationDeviceGroups",
                    "referenceName": "EDGEResponseAsyncApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeApplicationApplicationsApplicationIdDeviceGroupsId",
          "summary": "Destroy an Applications Device Group",
          "description": "Destruction of a specific Device Group in your account.",
          "tags": [
            "Applications - Device Groups"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationDeviceGroups",
                    "referenceName": "EDGEResponseApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteApplicationDeviceGroups",
                    "referenceName": "EDGEResponseAsyncDeleteApplicationDeviceGroups"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/functions": {
      "url": "/workspace/applications/{application_id}/functions",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdFunctions",
          "summary": "List Function Instances",
          "description": "List all Function Instances for a specific Application owned by your account.",
          "tags": [
            "Applications - Function"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, last_editor, last_modified, name, args, azion_form, function, active)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationFunctionInstanceList",
                    "referenceName": "EDGEPaginatedApplicationFunctionInstanceList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplicationsApplicationIdFunctions",
          "summary": "Create an Application Function Instance",
          "description": "Create a new Function Instance for a specific Application in your account.",
          "tags": [
            "Applications - Function"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationFunctionInstanceRequest",
                  "referenceName": "EDGEApplicationFunctionInstanceRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationFunctionInstance",
                    "referenceName": "EDGEResponseApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationFunctionInstance",
                    "referenceName": "EDGEResponseAsyncApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/functions/{function_id}": {
      "url": "/workspace/applications/{application_id}/functions/{function_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdFunctionsFunctionId",
          "summary": "Retrieve details of an Application Function Instance",
          "description": "Retrieve details of a specific Application Function Instance in your account.",
          "tags": [
            "Applications - Function"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "function_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "function_id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveApplicationFunctionInstance",
                    "referenceName": "EDGEResponseRetrieveApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdFunctionsFunctionId",
          "summary": "Update an Edge Application Function Instance",
          "description": "Update an existing Application Function Instance. This replaces the entire Function Instance with the new data provided.",
          "tags": [
            "Applications - Function"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "function_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "function_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationFunctionInstanceRequest",
                  "referenceName": "EDGEApplicationFunctionInstanceRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationFunctionInstance",
                    "referenceName": "EDGEResponseApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationFunctionInstance",
                    "referenceName": "EDGEResponseAsyncApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeApplicationApplicationsApplicationIdFunctionsFunctionId",
          "summary": "Partially update an Application Function Instance",
          "description": "Update one or more fields of an existing Application Function Instance without affecting other fields.",
          "tags": [
            "Applications - Function"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "function_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "function_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedApplicationFunctionInstanceRequest",
                  "referenceName": "EDGEPatchedApplicationFunctionInstanceRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationFunctionInstance",
                    "referenceName": "EDGEResponseApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationFunctionInstance",
                    "referenceName": "EDGEResponseAsyncApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeApplicationApplicationsApplicationIdFunctionsFunctionId",
          "summary": "Destroy an Application Function Instance",
          "description": "Destroy a specific Application Function Instance in your account.",
          "tags": [
            "Applications - Function"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "function_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "function_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteApplicationFunctionInstance",
                    "referenceName": "EDGEResponseDeleteApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteApplicationFunctionInstance",
                    "referenceName": "EDGEResponseAsyncDeleteApplicationFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/request_rules": {
      "url": "/workspace/applications/{application_id}/request_rules",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdRequestRules",
          "summary": "List Application Request Rules",
          "description": "List all Rules for a specific Application owned by your account.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, active, description, order, criteria, last_editor, last_modified, behaviors)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationRequestPhaseRuleEngineList",
                    "referenceName": "EDGEPaginatedApplicationRequestPhaseRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplicationsApplicationIdRequestRules",
          "summary": "Create an Application Request Rule",
          "description": "Create a new Rule for a specific Application in your account.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngineRequest",
                  "referenceName": "EDGEApplicationRequestPhaseRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/request_rules/{id}": {
      "url": "/workspace/applications/{application_id}/request_rules/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdRequestRulesId",
          "summary": "Retrieve details of an Application Request Rule",
          "description": "Retrieve details of a specific Rule in your account.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseRetrieveApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdRequestRulesId",
          "summary": "Update an Application Request Rule",
          "description": "Update an existing Rule. This replaces the entire Rule with the new data provided.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngineRequest",
                  "referenceName": "EDGEApplicationRequestPhaseRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeApplicationApplicationsApplicationIdRequestRulesId",
          "summary": "Partially update an Application Request Rule",
          "description": "Update one or more fields of an existing Application Rule  without affecting other fields.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedApplicationRequestPhaseRuleEngineRequest",
                  "referenceName": "EDGEPatchedApplicationRequestPhaseRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeApplicationApplicationsApplicationIdRequestRulesId",
          "summary": "Destroy an Application Request Rule",
          "description": "Destroy a specific Rule in your account.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseDeleteApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/request_rules/order": {
      "url": "/workspace/applications/{application_id}/request_rules/order",
      "operations": {
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdRequestRulesOrder",
          "summary": "Ordering Application Request Rules",
          "description": "Reoder all Rules for a specific Application owned by your account.",
          "tags": [
            "Applications - Request Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: order)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "Number of results to return per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationRequestPhaseRuleEngineOrderRequest",
                  "referenceName": "EDGEApplicationRequestPhaseRuleEngineOrderRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationRequestPhaseRuleEngineList",
                    "referenceName": "EDGEPaginatedApplicationRequestPhaseRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationRequestPhaseRuleEngineList",
                    "referenceName": "EDGEPaginatedApplicationRequestPhaseRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/response_rules": {
      "url": "/workspace/applications/{application_id}/response_rules",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdResponseRules",
          "summary": "List Application Response Rules",
          "description": "List all Rules for a specific Application owned by your account.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, active, description, order, criteria, last_editor, last_modified, behaviors)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationResponsePhaseRuleEngineList",
                    "referenceName": "EDGEPaginatedApplicationResponsePhaseRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeApplicationApplicationsApplicationIdResponseRules",
          "summary": "Create an Application Response Rule",
          "description": "Create a new Rule for a specific Application in your account.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationResponsePhaseRuleEngineRequest",
                  "referenceName": "EDGEApplicationResponsePhaseRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/response_rules/{id}": {
      "url": "/workspace/applications/{application_id}/response_rules/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeApplicationApplicationsApplicationIdResponseRulesId",
          "summary": "Retrieve details of an Application Response Rule",
          "description": "Retrieve details of a specific Rule in your account.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveApplicationRequestPhaseRuleEngine",
                    "referenceName": "EDGEResponseRetrieveApplicationRequestPhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdResponseRulesId",
          "summary": "Update an Application Response Rule",
          "description": "Update an existing Rule. This replaces the entire Rule with the new data provided.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationResponsePhaseRuleEngineRequest",
                  "referenceName": "EDGEApplicationResponsePhaseRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeApplicationApplicationsApplicationIdResponseRulesId",
          "summary": "Partially update an Application Response Rule",
          "description": "Update one or more fields of an existing Application Rule  without affecting other fields.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedApplicationResponsePhaseRuleEngineRequest",
                  "referenceName": "EDGEPatchedApplicationResponsePhaseRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeApplicationApplicationsApplicationIdResponseRulesId",
          "summary": "Destroy an Application Response Rule",
          "description": "Destroy a specific Rule in your account.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseDeleteApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine",
                    "referenceName": "EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/applications/{application_id}/response_rules/order": {
      "url": "/workspace/applications/{application_id}/response_rules/order",
      "operations": {
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeApplicationApplicationsApplicationIdResponseRulesOrder",
          "summary": "Ordering Application Response Rules",
          "description": "Reoder all Rules for a specific Application owned by your account.",
          "tags": [
            "Applications - Response Rules"
          ],
          "parameters": [
            {
              "name": "application_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "application_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: order)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "Number of results to return per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEApplicationResponsePhaseRuleEngineOrderRequest",
                  "referenceName": "EDGEApplicationResponsePhaseRuleEngineOrderRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationResponsePhaseRuleEngineList",
                    "referenceName": "EDGEPaginatedApplicationResponsePhaseRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedApplicationResponsePhaseRuleEngineList",
                    "referenceName": "EDGEPaginatedApplicationResponsePhaseRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/account/auth/login": {
      "url": "/account/auth/login",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostAuthLogin",
          "summary": "User Login – Generate JWT Tokens",
          "description": "This endpoint performs user authentication and issues the user’s JWT tokens.The response depends on whether multi-factor authentication (MFA) is enabled for the user:\n - If the user does not have MFA enabled, the API returns a TokenPair object containing the access_token and refresh_token, allowing immediate authentication.\n - If the user has MFA enabled, the response returns an MFAToken object.This temporary token must be used in the MFA verification endpoint to complete authentication.After successful verification of the second factor, the TokenPair is issued.",
          "tags": [
            "Auth - Login"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/AUTHLoginRequest",
                  "referenceName": "AUTHLoginRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseLogin",
                    "referenceName": "AUTHResponseLogin"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseAsyncLogin",
                    "referenceName": "AUTHResponseAsyncLogin"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized - Authentication credentials were not provided.",
              "content": {}
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden - User is not allowed to access this resource.",
              "content": {}
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": []
        }
      },
      "parameters": [],
      "context": "account"
    },
    "/account/auth/login/method": {
      "url": "/account/auth/login/method",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetAuthLoginMethod",
          "summary": "Check User Authentication Method",
          "description": "Returns the login type configured for the user. This indicates whether the user authenticates directly via Azion credentials (login) or via a federated Identity Provider (federated) linked to their account.\nThis endpoint allows clients to determine whether to proceed with Azion's native login flow or redirect the user to the Identity Provider (IdP) for authentication.",
          "tags": [
            "Auth - Login"
          ],
          "parameters": [
            {
              "name": "email",
              "in": "query",
              "required": false,
              "schema": {
                "name": "email",
                "type": "string",
                "format": "email",
                "constraints": {}
              },
              "description": "Email address of the user"
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHuser_login_method_response",
                    "referenceName": "AUTHuser_login_method_response"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": []
        }
      },
      "parameters": [],
      "context": "account"
    },
    "/account/auth/mfa/totp": {
      "url": "/account/auth/mfa/totp",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetAuthMfaTotp",
          "summary": "List of TOTP devices",
          "description": "List all totp devices for user account and descendant accounts.",
          "tags": [
            "Auth - MFA TOTP Device"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, user_id, confirmed, id)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHPaginatedTOTPDeviceListList",
                    "referenceName": "AUTHPaginatedTOTPDeviceListList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostAuthMfaTotp",
          "summary": "Create a TOTP device",
          "description": "Create a new TOTP device for your account.",
          "tags": [
            "Auth - MFA TOTP Device"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseTOTPDeviceCreate",
                    "referenceName": "AUTHResponseTOTPDeviceCreate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseAsyncTOTPDeviceCreate",
                    "referenceName": "AUTHResponseAsyncTOTPDeviceCreate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "JWT MFA Authentication": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "account"
    },
    "/account/auth/mfa/totp/{totp_id}": {
      "url": "/account/auth/mfa/totp/{totp_id}",
      "operations": {
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteAuthMfaTotpId",
          "summary": "Destroy a TOTP device",
          "description": "Destruction of a specific TOTP device from your account or descendant account.",
          "tags": [
            "Auth - MFA TOTP Device"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseDeleteTOTPDeviceCreate",
                    "referenceName": "AUTHResponseDeleteTOTPDeviceCreate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseAsyncDeleteTOTPDeviceCreate",
                    "referenceName": "AUTHResponseAsyncDeleteTOTPDeviceCreate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "account"
    },
    "/account/auth/token": {
      "url": "/account/auth/token",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostAuthToken",
          "summary": "Refresh user JWT access token",
          "description": "Refresh JWT access token, via a POST request.",
          "tags": [
            "Auth - Refresh Access Token"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/AUTHTokenRequest",
                  "referenceName": "AUTHTokenRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseToken",
                    "referenceName": "AUTHResponseToken"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHResponseAsyncToken",
                    "referenceName": "AUTHResponseAsyncToken"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "JWT Refresh Authentication": []
            },
            {}
          ]
        }
      },
      "parameters": [],
      "context": "account"
    },
    "/account/auth/revoke": {
      "url": "/account/auth/revoke",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostAuthRevoke",
          "summary": "Revoke user JWT refresh token",
          "description": "Revoke refresh token via a POST request.",
          "tags": [
            "Auth - Revoke"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Revoke successfully executed.",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHStateExecutedResponse",
                    "referenceName": "AUTHStateExecutedResponse"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Revoke request accepted, processing pending.",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHStatePendingResponse",
                    "referenceName": "AUTHStatePendingResponse"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized - Authentication credentials were not provided.",
              "content": {}
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden - User is not allowed to access this resource.",
              "content": {}
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/AUTHJSONAPIErrorResponse",
                    "referenceName": "AUTHJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "JWT Refresh Authentication": []
            },
            {}
          ]
        }
      },
      "parameters": [],
      "context": "account"
    },
    "/workspace/connectors": {
      "url": "/workspace/connectors",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeConnectorConnectors",
          "summary": "List Connectors",
          "description": "List all Connectors owned by your account.",
          "tags": [
            "Connectors"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: )"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedConnectorPolymorphicList",
                    "referenceName": "EDGEPaginatedConnectorPolymorphicList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeConnectorConnectors",
          "summary": "Create an Connector",
          "description": "Create a new Connector in your account.",
          "tags": [
            "Connectors"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEConnectorPolymorphicRequest",
                  "referenceName": "EDGEConnectorPolymorphicRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseConnectorPolymorphic",
                    "referenceName": "EDGEResponseConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncConnectorPolymorphic",
                    "referenceName": "EDGEResponseAsyncConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/connectors/{connector_id}": {
      "url": "/workspace/connectors/{connector_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeConnectorConnectorsId",
          "summary": "Retrieve details of an Connector",
          "description": "Retrieve details of a specific Connector in your account.",
          "tags": [
            "Connectors"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveConnectorPolymorphic",
                    "referenceName": "EDGEResponseRetrieveConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeConnectorConnectorsId",
          "summary": "Update an Connector",
          "description": "Update an existing Connector. This replaces the entire Connector with the new data provided.",
          "tags": [
            "Connectors"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEConnectorPolymorphicRequest",
                  "referenceName": "EDGEConnectorPolymorphicRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseConnectorPolymorphic",
                    "referenceName": "EDGEResponseConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncConnectorPolymorphic",
                    "referenceName": "EDGEResponseAsyncConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeConnectorConnectorsId",
          "summary": "Partially update an Connector",
          "description": "Update one or more fields of an existing Connector without affecting other fields.",
          "tags": [
            "Connectors"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedConnectorPolymorphicRequest",
                  "referenceName": "EDGEPatchedConnectorPolymorphicRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseConnectorPolymorphic",
                    "referenceName": "EDGEResponseConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncConnectorPolymorphic",
                    "referenceName": "EDGEResponseAsyncConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeConnectorConnectorsId",
          "summary": "Destroy an Connector",
          "description": "Destruction of a specific Connector in your account.",
          "tags": [
            "Connectors"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteConnectorPolymorphic",
                    "referenceName": "EDGEResponseDeleteConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteConnectorPolymorphic",
                    "referenceName": "EDGEResponseAsyncDeleteConnectorPolymorphic"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/custom_pages": {
      "url": "/workspace/custom_pages",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceCustomPages",
          "summary": "List Custom Pages",
          "description": "List all Custom Pages owned by your account.",
          "tags": [
            "Custom Pages"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, last_editor, last_modified, active, product_version, pages)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedCustomPageList",
                    "referenceName": "EDGEPaginatedCustomPageList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostWorkspaceCustomPages",
          "summary": "Create a Custom Page",
          "description": "Create a new Custom Page in your account.",
          "tags": [
            "Custom Pages"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECustomPageRequest",
                  "referenceName": "EDGECustomPageRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseCustomPage",
                    "referenceName": "EDGEResponseCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCustomPage",
                    "referenceName": "EDGEResponseAsyncCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/custom_pages/{id}": {
      "url": "/workspace/custom_pages/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceCustomPagesId",
          "summary": "Retrieve details of a Custom Page",
          "description": "Retrieve details of a specific Custom Page in your account.",
          "tags": [
            "Custom Pages"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveCustomPage",
                    "referenceName": "EDGEResponseRetrieveCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutWorkspaceCustomPagesId",
          "summary": "Update a Custom Page",
          "description": "Update an existing Custom Page. This replaces the entire Custom Page with the new data provided.",
          "tags": [
            "Custom Pages"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECustomPageRequest",
                  "referenceName": "EDGECustomPageRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseCustomPage",
                    "referenceName": "EDGEResponseCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCustomPage",
                    "referenceName": "EDGEResponseAsyncCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchWorkspaceCustomPagesId",
          "summary": "Partially update a Custom Page",
          "description": "Update one or more fields of an existing Custom Page without affecting other fields.",
          "tags": [
            "Custom Pages"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedCustomPageRequest",
                  "referenceName": "EDGEPatchedCustomPageRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseCustomPage",
                    "referenceName": "EDGEResponseCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncCustomPage",
                    "referenceName": "EDGEResponseAsyncCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteWorkspaceCustomPagesId",
          "summary": "Destroy a Custom Page",
          "description": "Destruction of a specific Custom Page in your account.",
          "tags": [
            "Custom Pages"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteCustomPage",
                    "referenceName": "EDGEResponseDeleteCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteCustomPage",
                    "referenceName": "EDGEResponseAsyncDeleteCustomPage"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/dns/zones/{zone_id}/dnssec": {
      "url": "/workspace/dns/zones/{zone_id}/dnssec",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeDnsZonesZoneidDnssec",
          "summary": "Retrieve details of a DNSSEC",
          "description": "Retrieve details of a specific DNSSEC from a DNS Zone in your account.",
          "tags": [
            "DNS - DNSSEC"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "integer",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseRetrieveDNSSEC",
                    "referenceName": "DNSResponseRetrieveDNSSEC"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeDnsZonesZoneidDnssec",
          "summary": "Update a DNSSEC",
          "description": "Update an existing a DNSSEC. This replaces the entire DNSSEC with the new data provided.",
          "tags": [
            "DNS - DNSSEC"
          ],
          "parameters": [
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSDNSSECRequest",
                  "referenceName": "DNSDNSSECRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseDNSSEC",
                    "referenceName": "DNSResponseDNSSEC"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncDNSSEC",
                    "referenceName": "DNSResponseAsyncDNSSEC"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeDnsZonesZoneidDnssec",
          "summary": "Partially update a DNSSEC",
          "description": "Update one or more fields of an existing DNSSEC without affecting other fields.",
          "tags": [
            "DNS - DNSSEC"
          ],
          "parameters": [
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSPatchedDNSSECRequest",
                  "referenceName": "DNSPatchedDNSSECRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseDNSSEC",
                    "referenceName": "DNSResponseDNSSEC"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncDNSSEC",
                    "referenceName": "DNSResponseAsyncDNSSEC"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/dns/zones/{zone_id}/records": {
      "url": "/workspace/dns/zones/{zone_id}/records",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeDnsZonesZoneidRecords",
          "summary": "List DNS Records",
          "description": "List all DNS Records from a DNS Zone owned by your account.",
          "tags": [
            "DNS - Records"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, weight)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSPaginatedRecordList",
                    "referenceName": "DNSPaginatedRecordList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeDnsZonesZoneidRecords",
          "summary": "Create a DNS Record",
          "description": "Create a new DNS Record in a DNS Zone for your account.",
          "tags": [
            "DNS - Records"
          ],
          "parameters": [
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSRecordRequest",
                  "referenceName": "DNSRecordRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseRecord",
                    "referenceName": "DNSResponseRecord"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncRecord",
                    "referenceName": "DNSResponseAsyncRecord"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/dns/zones/{zone_id}/records/{record_id}": {
      "url": "/workspace/dns/zones/{zone_id}/records/{record_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeDnsZonesZoneidRecordsRecordid",
          "summary": "Retrieve details of a DNS Record",
          "description": "Retrieve details of a specific DNS Record from a DNS Zone in your account.",
          "tags": [
            "DNS - Records"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "recordId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "recordId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseRetrieveRecord",
                    "referenceName": "DNSResponseRetrieveRecord"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeDnsZonesZoneidRecordsRecordid",
          "summary": "Update a DNS Record",
          "description": "Update an existing a DNS Record. This replaces the entire DNS Record with the new data provided.",
          "tags": [
            "DNS - Records"
          ],
          "parameters": [
            {
              "name": "recordId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "recordId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSRecordRequest",
                  "referenceName": "DNSRecordRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseRecord",
                    "referenceName": "DNSResponseRecord"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncRecord",
                    "referenceName": "DNSResponseAsyncRecord"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeDnsZonesZoneidRecordsRecordid",
          "summary": "Partially update a DNS Record",
          "description": "Update one or more fields of an existing DNS Record without affecting other fields.",
          "tags": [
            "DNS - Records"
          ],
          "parameters": [
            {
              "name": "recordId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "recordId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSPatchedRecordRequest",
                  "referenceName": "DNSPatchedRecordRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseRecord",
                    "referenceName": "DNSResponseRecord"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncRecord",
                    "referenceName": "DNSResponseAsyncRecord"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeDnsZonesZoneidRecordsRecordid",
          "summary": "Destroy a DNS Record",
          "description": "Destruction of a specific a DNS Record from a DNS Zone in your account.",
          "tags": [
            "DNS - Records"
          ],
          "parameters": [
            {
              "name": "recordId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "recordId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseDeleteRecord",
                    "referenceName": "DNSResponseDeleteRecord"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncDeleteRecord",
                    "referenceName": "DNSResponseAsyncDeleteRecord"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/dns/zones": {
      "url": "/workspace/dns/zones",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeDnsZones",
          "summary": "List DNS Zones",
          "description": "List all DNS Zones owned by your account.",
          "tags": [
            "DNS - Zones"
          ],
          "parameters": [
            {
              "name": "active",
              "in": "query",
              "required": false,
              "schema": {
                "name": "active",
                "type": "string",
                "constraints": {}
              },
              "description": "Search by active"
            },
            {
              "name": "domain",
              "in": "query",
              "required": false,
              "schema": {
                "name": "domain",
                "type": "string",
                "constraints": {}
              },
              "description": "Search by domain"
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "name",
              "in": "query",
              "required": false,
              "schema": {
                "name": "name",
                "type": "string",
                "constraints": {}
              },
              "description": "Search by name"
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, domain, active)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSPaginatedZoneList",
                    "referenceName": "DNSPaginatedZoneList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeDnsZones",
          "summary": "Create a DNS Zone",
          "description": "Create a new DNS Zone for your account.",
          "tags": [
            "DNS - Zones"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSZoneRequest",
                  "referenceName": "DNSZoneRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseZone",
                    "referenceName": "DNSResponseZone"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncZone",
                    "referenceName": "DNSResponseAsyncZone"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/dns/zones/{zone_id}": {
      "url": "/workspace/dns/zones/{zone_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeDnsZonesZoneid",
          "summary": "Retrieve details of a DNS Zone",
          "description": "Retrieve details of a specific DNS Zone in your account.",
          "tags": [
            "DNS - Zones"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseRetrieveZone",
                    "referenceName": "DNSResponseRetrieveZone"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeDnsZonesZoneid",
          "summary": "Update a DNS Zone",
          "description": "Update an existing a DNS Zone. This replaces the entire DNS Zone with the new data provided.",
          "tags": [
            "DNS - Zones"
          ],
          "parameters": [
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSUpdateZoneRequest",
                  "referenceName": "DNSUpdateZoneRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseZone",
                    "referenceName": "DNSResponseZone"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncZone",
                    "referenceName": "DNSResponseAsyncZone"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeDnsZonesZoneid",
          "summary": "Partially update a DNS Zone",
          "description": "Update one or more fields of an existing DNS Zone without affecting other fields.",
          "tags": [
            "DNS - Zones"
          ],
          "parameters": [
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DNSPatchedUpdateZoneRequest",
                  "referenceName": "DNSPatchedUpdateZoneRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseZone",
                    "referenceName": "DNSResponseZone"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncZone",
                    "referenceName": "DNSResponseAsyncZone"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeDnsZonesZoneid",
          "summary": "Destroy a DNS Zone",
          "description": "Destruction of a specific a DNS Zone in your account.",
          "tags": [
            "DNS - Zones"
          ],
          "parameters": [
            {
              "name": "zoneId",
              "in": "path",
              "required": true,
              "schema": {
                "name": "zoneId",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseDeleteZone",
                    "referenceName": "DNSResponseDeleteZone"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSResponseAsyncDeleteZone",
                    "referenceName": "DNSResponseAsyncDeleteZone"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DNSJSONAPIErrorResponse",
                    "referenceName": "DNSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/stream/data_sources": {
      "url": "/workspace/stream/data_sources",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDataStreamDataSources",
          "summary": "List of Data Sources",
          "description": "List all Data Sources.",
          "tags": [
            "Data Stream - Data Sources"
          ],
          "parameters": [
            {
              "name": "active",
              "in": "query",
              "required": false,
              "schema": {
                "name": "active",
                "type": "boolean",
                "constraints": {}
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "name",
              "in": "query",
              "required": false,
              "schema": {
                "name": "name",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results."
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "slug",
              "in": "query",
              "required": false,
              "schema": {
                "name": "slug",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAPaginatedResponseListDataSourceList",
                    "referenceName": "DATAPaginatedResponseListDataSourceList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/stream/streams": {
      "url": "/workspace/stream/streams",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDataStreamStreams",
          "summary": "List Data Streams",
          "description": "List all Data Streams owned by your account.",
          "tags": [
            "Data Stream - Streams"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results."
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAPaginatedResponseListDataStreamList",
                    "referenceName": "DATAPaginatedResponseListDataStreamList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostDataStreamStreams",
          "summary": "Create a Data Stream",
          "description": "Create a new Data Stream in your account.",
          "tags": [
            "Data Stream - Streams"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DATADataStreamRequest",
                  "referenceName": "DATADataStreamRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseDataStream",
                    "referenceName": "DATAResponseDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncDataStream",
                    "referenceName": "DATAResponseAsyncDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/stream/streams/{stream_id}": {
      "url": "/workspace/stream/streams/{stream_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDataStreamStreamsId",
          "summary": "Retrieve details of a Data Stream",
          "description": "Retrieve details from a specific Data Stream in your account.",
          "tags": [
            "Data Stream - Streams"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseRetrieveDataStream",
                    "referenceName": "DATAResponseRetrieveDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutDataStreamStreamsId",
          "summary": "Update a Data Stream",
          "description": "Update an existing Data Stream.",
          "tags": [
            "Data Stream - Streams"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DATADataStreamRequest",
                  "referenceName": "DATADataStreamRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseDataStream",
                    "referenceName": "DATAResponseDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncDataStream",
                    "referenceName": "DATAResponseAsyncDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchDataStreamStreamsId",
          "summary": "Partially update a Data Stream",
          "description": "Update one or more fields of an existing Data Stream.",
          "tags": [
            "Data Stream - Streams"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DATAPatchedDataStreamRequest",
                  "referenceName": "DATAPatchedDataStreamRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseDataStream",
                    "referenceName": "DATAResponseDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncDataStream",
                    "referenceName": "DATAResponseAsyncDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteDataStreamStreamsId",
          "summary": "Destroy a Data Stream",
          "description": "Destruction of a specific Data Stream in your account.",
          "tags": [
            "Data Stream - Streams"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseDeleteDataStream",
                    "referenceName": "DATAResponseDeleteDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncDeleteDataStream",
                    "referenceName": "DATAResponseAsyncDeleteDataStream"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/stream/templates": {
      "url": "/workspace/stream/templates",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDataStreamTemplates",
          "summary": "List Templates",
          "description": "List all Templates owned by your account.",
          "tags": [
            "Data Stream - Templates"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results."
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAPaginatedResponseListTemplateList",
                    "referenceName": "DATAPaginatedResponseListTemplateList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostDataStreamTemplates",
          "summary": "Create a Template",
          "description": "Create a new custom Template in your account.",
          "tags": [
            "Data Stream - Templates"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DATATemplateRequest",
                  "referenceName": "DATATemplateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseTemplate",
                    "referenceName": "DATAResponseTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncTemplate",
                    "referenceName": "DATAResponseAsyncTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/stream/templates/{template_id}": {
      "url": "/workspace/stream/templates/{template_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDataStreamTemplatesId",
          "summary": "Retrieve details of a Template",
          "description": "Retrieve details from a specific Template in your account.",
          "tags": [
            "Data Stream - Templates"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseRetrieveTemplate",
                    "referenceName": "DATAResponseRetrieveTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutDataStreamTemplatesId",
          "summary": "Update a Template",
          "description": "Update an existing custom Template.",
          "tags": [
            "Data Stream - Templates"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DATATemplateRequest",
                  "referenceName": "DATATemplateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseTemplate",
                    "referenceName": "DATAResponseTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncTemplate",
                    "referenceName": "DATAResponseAsyncTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchDataStreamTemplatesId",
          "summary": "Partially update a Template",
          "description": "Update one or more fields of an existing custom Template.",
          "tags": [
            "Data Stream - Templates"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/DATAPatchedTemplateRequest",
                  "referenceName": "DATAPatchedTemplateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseTemplate",
                    "referenceName": "DATAResponseTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncTemplate",
                    "referenceName": "DATAResponseAsyncTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteDataStreamTemplatesId",
          "summary": "Destroy a Template",
          "description": "Destruction of a specific custom Template in your account.",
          "tags": [
            "Data Stream - Templates"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseDeleteTemplate",
                    "referenceName": "DATAResponseDeleteTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAResponseAsyncDeleteTemplate",
                    "referenceName": "DATAResponseAsyncDeleteTemplate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/DATAJSONAPIErrorResponse",
                    "referenceName": "DATAJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/tls/crls": {
      "url": "/workspace/tls/crls",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDigitalCertificatesCrls",
          "summary": "List certificate revocation lists (CRL)",
          "description": "List all certificate revocation lists (CRL) owned by your account.",
          "tags": [
            "Digital Certificates - Certificate Revocation Lists"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, active, last_editor, last_modified, product_version, issuer, last_update, next_update, crl)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSPaginatedCertificateRevocationListList",
                    "referenceName": "TLSPaginatedCertificateRevocationListList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostDigitalCertificatesCrls",
          "summary": "Create a certificate revocation lists (CRL)",
          "description": "Create a new certificate revocation lists (CRL) for your account.",
          "tags": [
            "Digital Certificates - Certificate Revocation Lists"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSCertificateRevocationListRequest",
                  "referenceName": "TLSCertificateRevocationListRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseCertificateRevocationList",
                    "referenceName": "TLSResponseCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificateRevocationList",
                    "referenceName": "TLSResponseAsyncCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/tls/crls/{crl_id}": {
      "url": "/workspace/tls/crls/{crl_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDigitalCertificatesCrlsId",
          "summary": "Retrieve details from a certificate revocation lists (CRL)",
          "description": "Retrieve details from a specific certificate revocation lists (CRL) in your account.",
          "tags": [
            "Digital Certificates - Certificate Revocation Lists"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseRetrieveCertificateRevocationList",
                    "referenceName": "TLSResponseRetrieveCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutDigitalCertificatesCrlsId",
          "summary": "Update a certificate revocation lists (CRL)",
          "description": "Update an existing certificate revocation lists (CRL).  This replaces the entire certificate with the new data provided.",
          "tags": [
            "Digital Certificates - Certificate Revocation Lists"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSCertificateRevocationListRequest",
                  "referenceName": "TLSCertificateRevocationListRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseCertificateRevocationList",
                    "referenceName": "TLSResponseCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificateRevocationList",
                    "referenceName": "TLSResponseAsyncCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchDigitalCertificatesCrlsId",
          "summary": "Update a certificate revocation lists (CRL)",
          "description": "Update one or more fields of an existing certificate revocation lists (CRL) without affecting other fields.",
          "tags": [
            "Digital Certificates - Certificate Revocation Lists"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSPatchedCertificateRevocationListRequest",
                  "referenceName": "TLSPatchedCertificateRevocationListRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseCertificateRevocationList",
                    "referenceName": "TLSResponseCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificateRevocationList",
                    "referenceName": "TLSResponseAsyncCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteDigitalCertificatesCrlsId",
          "summary": "Destroy a certificate revocation lists (CRL)",
          "description": "Destruction of a specific certificate revocation lists (CRL) in your account.",
          "tags": [
            "Digital Certificates - Certificate Revocation Lists"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseDeleteCertificateRevocationList",
                    "referenceName": "TLSResponseDeleteCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncDeleteCertificateRevocationList",
                    "referenceName": "TLSResponseAsyncDeleteCertificateRevocationList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/tls/csr": {
      "url": "/workspace/tls/csr",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostDigitalCertificatesCsr",
          "summary": "Create a certificate signing request (CSR)",
          "description": "Create a new certificate signing request (CSR) for your account.",
          "tags": [
            "Digital Certificates - Certificate Signing Requests"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSCertificateSigningRequestRequest",
                  "referenceName": "TLSCertificateSigningRequestRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseCertificate",
                    "referenceName": "TLSResponseCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/tls/certificates": {
      "url": "/workspace/tls/certificates",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDigitalCertificatesCertificates",
          "summary": "List certificates",
          "description": "List all certificates owned by your account.",
          "tags": [
            "Digital Certificates - Certificates"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, certificate, issuer, validity, subject_name, type, managed, status, status_detail, csr, key_algorithm, challenge, authority, active, product_version, last_editor, last_modified, renewed_at)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSPaginatedCertificateList",
                    "referenceName": "TLSPaginatedCertificateList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostDigitalCertificatesCertificates",
          "summary": "Create a certificate",
          "description": "Create a new certificate for your account.",
          "tags": [
            "Digital Certificates - Certificates"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSCertificateRequest",
                  "referenceName": "TLSCertificateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseCertificate",
                    "referenceName": "TLSResponseCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificate",
                    "referenceName": "TLSResponseAsyncCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/tls/certificates/{certificate_id}": {
      "url": "/workspace/tls/certificates/{certificate_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetDigitalCertificatesCertificatesId",
          "summary": "Retrieve details from a certificate",
          "description": "Retrieve details from a specific certificate in your account.",
          "tags": [
            "Digital Certificates - Certificates"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9][0-9]*$"
                }
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseRetrieveCertificate",
                    "referenceName": "TLSResponseRetrieveCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutDigitalCertificatesCertificatesId",
          "summary": "Update a certificate",
          "description": "Update an existing certificate. This replaces the entire certificate with the new data provided.",
          "tags": [
            "Digital Certificates - Certificates"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9][0-9]*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSCertificateRequest",
                  "referenceName": "TLSCertificateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificate",
                    "referenceName": "TLSResponseAsyncCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificate",
                    "referenceName": "TLSResponseAsyncCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseBadRequestCertificate",
                    "referenceName": "TLSResponseBadRequestCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchDigitalCertificatesCertificatesId",
          "summary": "Partially update a certificate",
          "description": "Update one or more fields of an existing certificate without affecting other fields.",
          "tags": [
            "Digital Certificates - Certificates"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9][0-9]*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSPatchedCertificateRequest",
                  "referenceName": "TLSPatchedCertificateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificate",
                    "referenceName": "TLSResponseAsyncCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncCertificate",
                    "referenceName": "TLSResponseAsyncCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseBadRequestCertificate",
                    "referenceName": "TLSResponseBadRequestCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSDefaultErrorResponse",
                    "referenceName": "TLSDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteDigitalCertificatesCertificatesId",
          "summary": "Destroy a certificate",
          "description": "Destruction of a specific certificate in your account.",
          "tags": [
            "Digital Certificates - Certificates"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9][0-9]*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseDeleteCertificate",
                    "referenceName": "TLSResponseDeleteCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseAsyncDeleteCertificate",
                    "referenceName": "TLSResponseAsyncDeleteCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/tls/certificates/request": {
      "url": "/workspace/tls/certificates/request",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostDigitalCertificatesCertificatesRequest",
          "summary": "Request a certificate",
          "description": "Request a new certificate for your account.",
          "tags": [
            "Digital Certificates - Request a Certificate"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/TLSCertificateRequestRequest",
                  "referenceName": "TLSCertificateRequestRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSResponseCertificate",
                    "referenceName": "TLSResponseCertificate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/TLSJSONAPIErrorResponse",
                    "referenceName": "TLSJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/sql/databases": {
      "url": "/workspace/sql/databases",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeSqlDatabases",
          "summary": "List databases",
          "description": "List all databases owned by your account.",
          "tags": [
            "Edge SQL"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, status, active, last_modified)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLPaginatedOpenAPISchemaList",
                    "referenceName": "EDGESQLPaginatedOpenAPISchemaList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeSqlDatabases",
          "summary": "Create a database",
          "description": "Create a new database for your account.",
          "tags": [
            "Edge SQL"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGESQLDatabaseRequest",
                  "referenceName": "EDGESQLDatabaseRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseOpenAPISchema",
                    "referenceName": "EDGESQLResponseOpenAPISchema"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseAsyncOpenAPISchema",
                    "referenceName": "EDGESQLResponseAsyncOpenAPISchema"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "422": {
              "statusCode": "422",
              "description": "Unprocessable Entity",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/sql/databases/{id}": {
      "url": "/workspace/sql/databases/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeSqlDatabasesId",
          "summary": "Retrieve details from a database",
          "description": "Retrieve details from a specific database in your account.",
          "tags": [
            "Edge SQL"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseRetrieveOpenAPISchema",
                    "referenceName": "EDGESQLResponseRetrieveOpenAPISchema"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeSqlDatabasesId",
          "summary": "Destroy a database",
          "description": "Schedule the destruction of a specific database in your account.",
          "tags": [
            "Edge SQL"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseDeleteOpenAPISchema",
                    "referenceName": "EDGESQLResponseDeleteOpenAPISchema"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseAsyncDeleteOpenAPISchema",
                    "referenceName": "EDGESQLResponseAsyncDeleteOpenAPISchema"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/sql/databases/{id}/query": {
      "url": "/workspace/sql/databases/{id}/query",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostEdgeSqlDatabasesIdQuery",
          "summary": "Execute a query into a database",
          "description": "Execute a query into a database for your account.",
          "tags": [
            "Edge SQL"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGESQLSQLStatementsRequest",
                  "referenceName": "EDGESQLSQLStatementsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseSQLResult",
                    "referenceName": "EDGESQLResponseSQLResult"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLResponseAsyncSQLResult",
                    "referenceName": "EDGESQLResponseAsyncSQLResult"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "422": {
              "statusCode": "422",
              "description": "Unprocessable Entity",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGESQLJSONAPIErrorResponse",
                    "referenceName": "EDGESQLJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls": {
      "url": "/workspace/firewalls",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallFirewalls",
          "summary": "List Firewalls",
          "description": "List all Firewalls owned by your account.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, debug, active, last_editor, last_modified, product_version)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedFirewallList",
                    "referenceName": "EDGEPaginatedFirewallList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallFirewalls",
          "summary": "Create an Firewall",
          "description": "Create a new Firewall for your account.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallRequest",
                  "referenceName": "EDGEFirewallRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewall",
                    "referenceName": "EDGEResponseFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewall",
                    "referenceName": "EDGEResponseAsyncFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{id}": {
      "url": "/workspace/firewalls/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallFirewallsId",
          "summary": "Retrieve details from an Firewall",
          "description": "Retrieve details from a specific Firewall in your account.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveFirewall",
                    "referenceName": "EDGEResponseRetrieveFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFirewallFirewallsId",
          "summary": "Update an Firewall",
          "description": "Update an existing Firewall. This replaces the entire Firewall with the new data provided.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallRequest",
                  "referenceName": "EDGEFirewallRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewall",
                    "referenceName": "EDGEResponseFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewall",
                    "referenceName": "EDGEResponseAsyncFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeFirewallFirewallsId",
          "summary": "Partially update an Firewall",
          "description": "Update one or more fields of an existing Firewall without affecting other fields.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedFirewallRequest",
                  "referenceName": "EDGEPatchedFirewallRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewall",
                    "referenceName": "EDGEResponseFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewall",
                    "referenceName": "EDGEResponseAsyncFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeFirewallFirewallsId",
          "summary": "Destroy an Firewall",
          "description": "Destruction of a specific Firewall in your account.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteFirewall",
                    "referenceName": "EDGEResponseDeleteFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteFirewall",
                    "referenceName": "EDGEResponseAsyncDeleteFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{id}/clone": {
      "url": "/workspace/firewalls/{id}/clone",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallFirewallsIdClone",
          "summary": "Clone an Firewall",
          "description": "Create a new Firewall by performing a deep copy of an existing Firewall, including its Function Instances and Rules Engine.",
          "tags": [
            "Firewalls"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECloneFirewallRequest",
                  "referenceName": "EDGECloneFirewallRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewall",
                    "referenceName": "EDGEResponseFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewall",
                    "referenceName": "EDGEResponseAsyncFirewall"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{edge_firewall_id}/functions": {
      "url": "/workspace/firewalls/{edge_firewall_id}/functions",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallFirewallsEdgeFirewallIdFunctions",
          "summary": "List Firewall Function",
          "description": "List all Function Instances for a specific Firewall owned by your account.",
          "tags": [
            "Firewalls - Function"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, last_editor, last_modified, name, args, azion_form, function, active)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedFirewallFunctionInstanceList",
                    "referenceName": "EDGEPaginatedFirewallFunctionInstanceList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallFirewallsEdgeFirewallIdFunctions",
          "summary": "Create an Firewall Function",
          "description": "Create a new Function Instance for a specific Firewall in your account.",
          "tags": [
            "Firewalls - Function"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallFunctionInstanceRequest",
                  "referenceName": "EDGEFirewallFunctionInstanceRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewallFunctionInstance",
                    "referenceName": "EDGEResponseFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewallFunctionInstance",
                    "referenceName": "EDGEResponseAsyncFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{edge_firewall_id}/functions/{id}": {
      "url": "/workspace/firewalls/{edge_firewall_id}/functions/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallFirewallsEdgeFirewallIdFunctionsId",
          "summary": "Retrieve details of an Firewall Function",
          "description": "Retrieve details of a specific Firewall Function Instance in your account.",
          "tags": [
            "Firewalls - Function"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveFirewallFunctionInstance",
                    "referenceName": "EDGEResponseRetrieveFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFirewallFirewallsEdgeFirewallIdFunctionsId",
          "summary": "Update an Firewall Function",
          "description": "Update an existing Firewall Function Instance. This replaces the entire Function Instance with the new data provided.",
          "tags": [
            "Firewalls - Function"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallFunctionInstanceRequest",
                  "referenceName": "EDGEFirewallFunctionInstanceRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewallFunctionInstance",
                    "referenceName": "EDGEResponseFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewallFunctionInstance",
                    "referenceName": "EDGEResponseAsyncFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeFirewallFirewallsEdgeFirewallIdFunctionsId",
          "summary": "Partially update an Firewall Function",
          "description": "Update one or more fields of an existing Firewall Function Instance without affecting other fields.",
          "tags": [
            "Firewalls - Function"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedFirewallFunctionInstanceRequest",
                  "referenceName": "EDGEPatchedFirewallFunctionInstanceRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewallFunctionInstance",
                    "referenceName": "EDGEResponseFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewallFunctionInstance",
                    "referenceName": "EDGEResponseAsyncFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeFirewallFirewallsEdgeFirewallIdFunctionsId",
          "summary": "Destroy an Firewall Function",
          "description": "Destroy a specific Firewall Function Instance in your account.",
          "tags": [
            "Firewalls - Function"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteFirewallFunctionInstance",
                    "referenceName": "EDGEResponseDeleteFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteFirewallFunctionInstance",
                    "referenceName": "EDGEResponseAsyncDeleteFirewallFunctionInstance"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{edge_firewall_id}/request_rules": {
      "url": "/workspace/firewalls/{edge_firewall_id}/request_rules",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallFirewallsEdgeFirewallIdRequestRules",
          "summary": "List Firewall Rules",
          "description": "List all Rules for a specific Firewall owned by your account.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, last_editor, last_modified, active, description, order, behaviors, criteria)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedFirewallRuleEngineList",
                    "referenceName": "EDGEPaginatedFirewallRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallFirewallsEdgeFirewallIdRequestRules",
          "summary": "Create an Firewall Rule",
          "description": "Create a new Rule for a specific Firewall in your account.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallRuleEngineRequest",
                  "referenceName": "EDGEFirewallRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewallRuleEngine",
                    "referenceName": "EDGEResponseFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewallRuleEngine",
                    "referenceName": "EDGEResponseAsyncFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{edge_firewall_id}/request_rules/{id}": {
      "url": "/workspace/firewalls/{edge_firewall_id}/request_rules/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallFirewallsEdgeFirewallIdRequestRulesId",
          "summary": "Retrieve details of an Firewall Rule",
          "description": "Retrieve details of a specific Rule in your account.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveFirewallRuleEngine",
                    "referenceName": "EDGEResponseRetrieveFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFirewallFirewallsEdgeFirewallIdRequestRulesId",
          "summary": "Update an Firewall Rule",
          "description": "Update an existing Rule. This replaces the entire Rule with the new data provided.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallRuleEngineRequest",
                  "referenceName": "EDGEFirewallRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewallRuleEngine",
                    "referenceName": "EDGEResponseFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewallRuleEngine",
                    "referenceName": "EDGEResponseAsyncFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeFirewallFirewallsEdgeFirewallIdRequestRulesId",
          "summary": "Partially update an Firewall Rule",
          "description": "Update one or more fields of an existing Firewall Rule without affecting other fields.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedFirewallRuleEngineRequest",
                  "referenceName": "EDGEPatchedFirewallRuleEngineRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFirewallRuleEngine",
                    "referenceName": "EDGEResponseFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFirewallRuleEngine",
                    "referenceName": "EDGEResponseAsyncFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeFirewallFirewallsEdgeFirewallIdRequestRulesId",
          "summary": "Destroy an Firewall Rule",
          "description": "Destroy a specific Rule in your account.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteFirewallRuleEngine",
                    "referenceName": "EDGEResponseDeleteFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteFirewallRuleEngine",
                    "referenceName": "EDGEResponseAsyncDeleteFirewallRuleEngine"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/firewalls/{edge_firewall_id}/request_rules/order": {
      "url": "/workspace/firewalls/{edge_firewall_id}/request_rules/order",
      "operations": {
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFirewallFirewallsEdgeFirewallIdRequestRulesOrder",
          "summary": "Ordering Firewall Rules",
          "description": "Reoder all Rules for a specific Firewall owned by your account.",
          "tags": [
            "Firewalls - Rules Engine"
          ],
          "parameters": [
            {
              "name": "edge_firewall_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "edge_firewall_id",
                "type": "string",
                "constraints": {
                  "pattern": "^[1-9]\\d*$"
                }
              }
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: order)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "Number of results to return per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEFirewallRuleEngineOrderRequest",
                  "referenceName": "EDGEFirewallRuleEngineOrderRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedFirewallRuleEngineList",
                    "referenceName": "EDGEPaginatedFirewallRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedFirewallRuleEngineList",
                    "referenceName": "EDGEPaginatedFirewallRuleEngineList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/functions": {
      "url": "/workspace/functions",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFunctionsFunctions",
          "summary": "List Functions",
          "description": "List all Functions owned by your account.",
          "tags": [
            "Functions"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, language, json_args, runtime_environment, active, last_editor, last_modified, product_version)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedEdgeFunctionsList",
                    "referenceName": "EDGEPaginatedEdgeFunctionsList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFunctionsFunctions",
          "summary": "Create an Function",
          "description": "Create a new Function in your account.",
          "tags": [
            "Functions"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEEdgeFunctionsRequest",
                  "referenceName": "EDGEEdgeFunctionsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFunctionsDoc",
                    "referenceName": "EDGEResponseFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFunctionsDoc",
                    "referenceName": "EDGEResponseAsyncFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/functions/{function_id}": {
      "url": "/workspace/functions/{function_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFunctionsFunctionsId",
          "summary": "Retrieve details of an Function",
          "description": "Retrieve details of a specific Function in your account.",
          "tags": [
            "Functions"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveFunctionsDoc",
                    "referenceName": "EDGEResponseRetrieveFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFunctionsFunctionsId",
          "summary": "Update an Function",
          "description": "Update an existing Function. This replaces the entire Function with the new data provided.",
          "tags": [
            "Functions"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEEdgeFunctionsRequest",
                  "referenceName": "EDGEEdgeFunctionsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFunctionsDoc",
                    "referenceName": "EDGEResponseFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFunctionsDoc",
                    "referenceName": "EDGEResponseAsyncFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeFunctionsFunctionsId",
          "summary": "Partially update an Function",
          "description": "Update one or more fields of an existing Function without affecting other fields.",
          "tags": [
            "Functions"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedEdgeFunctionsRequest",
                  "referenceName": "EDGEPatchedEdgeFunctionsRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseFunctionsDoc",
                    "referenceName": "EDGEResponseFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncFunctionsDoc",
                    "referenceName": "EDGEResponseAsyncFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeFunctionsFunctionsId",
          "summary": "Destroy an Function",
          "description": "Destroy a specific Function in your account.",
          "tags": [
            "Functions"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteFunctionsDoc",
                    "referenceName": "EDGEResponseDeleteFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteFunctionsDoc",
                    "referenceName": "EDGEResponseAsyncDeleteFunctionsDoc"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/network_lists": {
      "url": "/workspace/network_lists",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceNetworkLists",
          "summary": "List Network Lists",
          "description": "List all Network Lists owned by your account.",
          "tags": [
            "Network Lists"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, type, last_editor, last_modified, active)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedNetworkListList",
                    "referenceName": "EDGEPaginatedNetworkListList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostWorkspaceNetworkLists",
          "summary": "Create a Network List",
          "description": "Create a new Network List in your account.",
          "tags": [
            "Network Lists"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGENetworkListDetailRequest",
                  "referenceName": "EDGENetworkListDetailRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseNetworkListDetail",
                    "referenceName": "EDGEResponseNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncNetworkListDetail",
                    "referenceName": "EDGEResponseAsyncNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/network_lists/{id}": {
      "url": "/workspace/network_lists/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceNetworkListsId",
          "summary": "Retrieve details of a Network List",
          "description": "Retrieve details of a specific Network List in your account.",
          "tags": [
            "Network Lists"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "ipv4",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ipv4",
                "type": "boolean",
                "constraints": {}
              },
              "description": "Filter by IPv4. Only applicable for network lists of type 'ip_cidr'."
            },
            {
              "name": "ipv6",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ipv6",
                "type": "boolean",
                "constraints": {}
              },
              "description": "Filter by IPv6. Only applicable for network lists of type 'ip_cidr'."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveNetworkListDetail",
                    "referenceName": "EDGEResponseRetrieveNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutWorkspaceNetworkListsId",
          "summary": "Update a Network List",
          "description": "Update an existing Network List. This replaces the entire Network List with the new data provided.",
          "tags": [
            "Network Lists"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGENetworkListDetailRequest",
                  "referenceName": "EDGENetworkListDetailRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseNetworkListDetail",
                    "referenceName": "EDGEResponseNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncNetworkListDetail",
                    "referenceName": "EDGEResponseAsyncNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchWorkspaceNetworkListsId",
          "summary": "Partially update a Network List",
          "description": "Update one or more fields of an existing Network List without affecting other fields.",
          "tags": [
            "Network Lists"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedNetworkListDetailRequest",
                  "referenceName": "EDGEPatchedNetworkListDetailRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseNetworkListDetail",
                    "referenceName": "EDGEResponseNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncNetworkListDetail",
                    "referenceName": "EDGEResponseAsyncNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteWorkspaceNetworkListsId",
          "summary": "Destroy a Network List",
          "description": "Destroy a specific Network List in your account.",
          "tags": [
            "Network Lists"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteNetworkListDetail",
                    "referenceName": "EDGEResponseDeleteNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteNetworkListDetail",
                    "referenceName": "EDGEResponseAsyncDeleteNetworkListDetail"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/purge/{purge_type}": {
      "url": "/workspace/purge/{purge_type}",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostWorkspacePurgePurgeType",
          "summary": "Create a Purge Request",
          "description": "Create a new Purge Request in your account.",
          "tags": [
            "Purge"
          ],
          "parameters": [
            {
              "name": "purge_type",
              "in": "path",
              "required": true,
              "schema": {
                "name": "purge_type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "cachekey",
                  "url",
                  "wildcard"
                ]
              },
              "description": "type of purge: URL, Wildcard or Cachekey"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPurgeInputRequest",
                  "referenceName": "EDGEPurgeInputRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponsePurgeInput",
                    "referenceName": "EDGEResponsePurgeInput"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncPurgeInput",
                    "referenceName": "EDGEResponseAsyncPurgeInput"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/storage/buckets": {
      "url": "/workspace/storage/buckets",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeStorageBuckets",
          "summary": "List buckets",
          "description": "List all buckets.",
          "tags": [
            "Storage - Buckets"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results."
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEPaginatedBucketList",
                    "referenceName": "STORAGEPaginatedBucketList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeStorageBuckets",
          "summary": "Create a new bucket",
          "description": "Create a new bucket.",
          "tags": [
            "Storage - Buckets"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/STORAGEBucketCreateRequest",
                  "referenceName": "STORAGEBucketCreateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBucketCreate",
                    "referenceName": "STORAGEResponseBucketCreate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncBucketCreate",
                    "referenceName": "STORAGEResponseAsyncBucketCreate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/storage/buckets/{name}": {
      "url": "/workspace/storage/buckets/{name}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeStorageBucketsName",
          "summary": "Retrieve details from a bucket",
          "description": "Retrieve details from a specific bucket.",
          "tags": [
            "Storage - Buckets"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "name": "name",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseRetrieveBucket",
                    "referenceName": "STORAGEResponseRetrieveBucket"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBadRequestBucket",
                    "referenceName": "STORAGEResponseBadRequestBucket"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeStorageBucketsName",
          "summary": "Update bucket info",
          "description": "Update bucket information (bucket name cannot be changed)",
          "tags": [
            "Storage - Buckets"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "name": "name",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/STORAGEPatchedBucketRequest",
                  "referenceName": "STORAGEPatchedBucketRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBucketCreate",
                    "referenceName": "STORAGEResponseBucketCreate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncBucketCreate",
                    "referenceName": "STORAGEResponseAsyncBucketCreate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeStorageBucketsName",
          "summary": "Delete a bucket",
          "description": "Delete a specific bucket.",
          "tags": [
            "Storage - Buckets"
          ],
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "name": "name",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseDeleteBucketCreate",
                    "referenceName": "STORAGEResponseDeleteBucketCreate"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncDeleteBucketCreate",
                    "referenceName": "STORAGEResponseAsyncDeleteBucketCreate"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/storage/credentials": {
      "url": "/workspace/storage/credentials",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeStorageCredentials",
          "summary": "List credentials",
          "description": "List all credentials.",
          "tags": [
            "Storage - Credentials"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results."
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEPaginatedResponseListCredentialList",
                    "referenceName": "STORAGEPaginatedResponseListCredentialList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBadRequestCredential",
                    "referenceName": "STORAGEResponseBadRequestCredential"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeStorageCredentials",
          "summary": "Create a new credential",
          "description": "Create a new credential.",
          "tags": [
            "Storage - Credentials"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/STORAGECredentialCreateRequest",
                  "referenceName": "STORAGECredentialCreateRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseCredential",
                    "referenceName": "STORAGEResponseCredential"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncCredential",
                    "referenceName": "STORAGEResponseAsyncCredential"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/storage/credentials/{id}": {
      "url": "/workspace/storage/credentials/{id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeStorageCredentialsId",
          "summary": "Retrieve details from a credential",
          "description": "Retrieve details from a specific credential.",
          "tags": [
            "Storage - Credentials"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseRetrieveCredential",
                    "referenceName": "STORAGEResponseRetrieveCredential"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBadRequestCredential",
                    "referenceName": "STORAGEResponseBadRequestCredential"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeStorageCredentialsId",
          "summary": "Delete a credential",
          "description": "Delete a specific credential.",
          "tags": [
            "Storage - Credentials"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncDeleteCredential",
                    "referenceName": "STORAGEResponseAsyncDeleteCredential"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncDeleteCredential",
                    "referenceName": "STORAGEResponseAsyncDeleteCredential"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBadRequestCredential",
                    "referenceName": "STORAGEResponseBadRequestCredential"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEDefaultErrorResponse",
                    "referenceName": "STORAGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/storage/buckets/{bucketName}/objects": {
      "url": "/workspace/storage/buckets/{bucketName}/objects",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeStorageBucketsBucketnameObjects",
          "summary": "List objects from bucket",
          "description": "List objects from bucket",
          "tags": [
            "Storage - Objects"
          ],
          "parameters": [
            {
              "name": "all_levels",
              "in": "query",
              "required": false,
              "schema": {
                "name": "all_levels",
                "type": "boolean",
                "constraints": {},
                "default": true
              },
              "description": "If true, lists objects recursively. If false, lists only the first level using Delimiter='/' (default: true)."
            },
            {
              "name": "bucketName",
              "in": "path",
              "required": true,
              "schema": {
                "name": "bucketName",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "continuation_token",
              "in": "query",
              "required": false,
              "schema": {
                "name": "continuation_token",
                "type": "string",
                "constraints": {}
              },
              "description": "A continuation token for the next page of records."
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "max_object_count",
              "in": "query",
              "required": false,
              "schema": {
                "name": "max_object_count",
                "type": "integer",
                "constraints": {}
              },
              "description": "Number of results to be returned on the page. Limited to 1000 objects."
            },
            {
              "name": "prefix",
              "in": "query",
              "required": false,
              "schema": {
                "name": "prefix",
                "type": "string",
                "constraints": {},
                "default": ""
              },
              "description": "Filter objects by key prefix. If empty, lists from the bucket root (default: empty)."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseBucketObject",
                    "referenceName": "STORAGEResponseBucketObject"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/storage/buckets/{bucketName}/objects/{objectKey}": {
      "url": "/workspace/storage/buckets/{bucketName}/objects/{objectKey}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeStorageBucketsBucketnameObjectsObjectkey",
          "summary": "Download object",
          "description": "Download the object key from bucket.",
          "tags": [
            "Storage - Objects"
          ],
          "parameters": [
            {
              "name": "bucketName",
              "in": "path",
              "required": true,
              "schema": {
                "name": "bucketName",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "objectKey",
              "in": "path",
              "required": true,
              "schema": {
                "name": "objectKey",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "name": "inline_schema",
                    "type": "string",
                    "format": "binary",
                    "constraints": {}
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeStorageBucketsBucketnameObjectsObjectkey",
          "summary": "Create new object key.",
          "description": "Create a new object key in the bucket. The object's Content-Type is defined by the Content-Type header. If this header is not included, the Content-Type will be automatically detected.",
          "tags": [
            "Storage - Objects"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": false,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {}
              },
              "description": "The content type of the file (Example: application/octet-stream)."
            },
            {
              "name": "bucketName",
              "in": "path",
              "required": true,
              "schema": {
                "name": "bucketName",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "objectKey",
              "in": "path",
              "required": true,
              "schema": {
                "name": "objectKey",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/octet-stream"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "name": "inline_schema",
                  "type": "string",
                  "format": "binary",
                  "constraints": {}
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGESuccessObjectOperation",
                    "referenceName": "STORAGESuccessObjectOperation"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGESuccessObjectOperationAsync",
                    "referenceName": "STORAGESuccessObjectOperationAsync"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeStorageBucketsBucketnameObjectsObjectkey",
          "summary": "Update the object key.",
          "description": "Update the object key from bucket. The object's Content-Type is defined by the Content-Type header. If this header is not included, the Content-Type will be automatically detected.",
          "tags": [
            "Storage - Objects"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": false,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {}
              },
              "description": "The content type of the file (Example: application/octet-stream)."
            },
            {
              "name": "bucketName",
              "in": "path",
              "required": true,
              "schema": {
                "name": "bucketName",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "objectKey",
              "in": "path",
              "required": true,
              "schema": {
                "name": "objectKey",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/octet-stream"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/octet-stream": {
                "schema": {
                  "name": "inline_schema",
                  "type": "string",
                  "format": "binary",
                  "constraints": {}
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGESuccessObjectOperation",
                    "referenceName": "STORAGESuccessObjectOperation"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGESuccessObjectOperationAsync",
                    "referenceName": "STORAGESuccessObjectOperationAsync"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeStorageBucketsBucketnameObjectsObjectkey",
          "summary": "Delete object key",
          "description": "Upon a successful deletion request, the object will be permanentlydeleted after a 24-hour grace period.",
          "tags": [
            "Storage - Objects"
          ],
          "parameters": [
            {
              "name": "bucketName",
              "in": "path",
              "required": true,
              "schema": {
                "name": "bucketName",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "objectKey",
              "in": "path",
              "required": true,
              "schema": {
                "name": "objectKey",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseDeleteBucketObject",
                    "referenceName": "STORAGEResponseDeleteBucketObject"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEResponseAsyncDeleteBucketObject",
                    "referenceName": "STORAGEResponseAsyncDeleteBucketObject"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/STORAGEJSONAPIErrorResponse",
                    "referenceName": "STORAGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/wafs": {
      "url": "/workspace/wafs",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallWafs",
          "summary": "List Web Application Firewalls (WAFs)",
          "description": "List all WAFs owned by your account.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: name, id, active, last_editor, last_modified, product_version)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedWAFList",
                    "referenceName": "EDGEPaginatedWAFList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallWafs",
          "summary": "Create a Web Application Firewall (WAF)",
          "description": "Create a new WAF for your account.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWAFRequest",
                  "referenceName": "EDGEWAFRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAF",
                    "referenceName": "EDGEResponseWAF"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAF",
                    "referenceName": "EDGEResponseAsyncWAF"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/wafs/{waf_id}": {
      "url": "/workspace/wafs/{waf_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallWafsWafId",
          "summary": "Retrieve details from a Web Application Firewall (WAF)",
          "description": "Retrieve details from a specific WAF in your account.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveWAF",
                    "referenceName": "EDGEResponseRetrieveWAF"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFirewallWafsWafId",
          "summary": "Update a Web Application Firewall (WAF)",
          "description": "Update an existing WAF. This replaces the entire WAF with the new data provided.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWAFRequest",
                  "referenceName": "EDGEWAFRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAF",
                    "referenceName": "EDGEResponseWAF"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAF",
                    "referenceName": "EDGEResponseAsyncWAF"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeFirewallWafsWafId",
          "summary": "Partially update a Web Application Firewall (WAF)",
          "description": "Update one or more fields of an existing WAF without affecting other fields.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedWAFRequest",
                  "referenceName": "EDGEPatchedWAFRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAF",
                    "referenceName": "EDGEResponseWAF"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAF",
                    "referenceName": "EDGEResponseAsyncWAF"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeFirewallWafsWafId",
          "summary": "Destroy a Web Application Firewall (WAF)",
          "description": "Destruction of a specific WAF in your account.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteWAF",
                    "referenceName": "EDGEResponseDeleteWAF"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteWAF",
                    "referenceName": "EDGEResponseAsyncDeleteWAF"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/wafs/{waf_id}/clone": {
      "url": "/workspace/wafs/{waf_id}/clone",
      "operations": {
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallWafsWafIdClone",
          "summary": "Clone a Web Application Firewall (WAF)",
          "description": "Create a new WAF by performing a deep copy of an existing WAF, including its Exceptions.",
          "tags": [
            "WAFs"
          ],
          "parameters": [
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGECloneWAFRequest",
                  "referenceName": "EDGECloneWAFRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAF",
                    "referenceName": "EDGEResponseWAF"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAF",
                    "referenceName": "EDGEResponseAsyncWAF"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/wafs/{waf_id}/exceptions": {
      "url": "/workspace/wafs/{waf_id}/exceptions",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallWafsWafIdExceptions",
          "summary": "List Exceptions for a Web Application Firewall (WAF)",
          "description": "List all Exceptions associated with a specific WAF owned by your account.",
          "tags": [
            "WAFs - Exceptions"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: rule_id, name, path, conditions, operator, active, last_editor, last_modified)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedWAFRuleList",
                    "referenceName": "EDGEPaginatedWAFRuleList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostEdgeFirewallWafsWafIdExceptions",
          "summary": "Create an Exception for a Web Application Firewall (WAF)",
          "description": "Create a new Exception for a specific WAF in your account.",
          "tags": [
            "WAFs - Exceptions"
          ],
          "parameters": [
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWAFRuleRequest",
                  "referenceName": "EDGEWAFRuleRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAFRule",
                    "referenceName": "EDGEResponseWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAFRule",
                    "referenceName": "EDGEResponseAsyncWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/wafs/{waf_id}/exceptions/{exception_id}": {
      "url": "/workspace/wafs/{waf_id}/exceptions/{exception_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetEdgeFirewallWafsWafIdExceptionsExceptionId",
          "summary": "Retrieve details of an Exception from a Web Application Firewall (WAF)",
          "description": "Retrieve details of a specific Exception from a WAF in your account.",
          "tags": [
            "WAFs - Exceptions"
          ],
          "parameters": [
            {
              "name": "exception_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "exception_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveWAFRule",
                    "referenceName": "EDGEResponseRetrieveWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutEdgeFirewallWafsWafIdExceptionsExceptionId",
          "summary": "Update an Exception for a Web Application Firewall (WAF)",
          "description": "Update an existing Exception for a WAF. This replaces the entire rule with the new data provided.",
          "tags": [
            "WAFs - Exceptions"
          ],
          "parameters": [
            {
              "name": "exception_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "exception_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWAFRuleRequest",
                  "referenceName": "EDGEWAFRuleRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAFRule",
                    "referenceName": "EDGEResponseWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAFRule",
                    "referenceName": "EDGEResponseAsyncWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchEdgeFirewallWafsWafIdExceptionsExceptionId",
          "summary": "Partially update an Exception for a Web Application Firewall (WAF)",
          "description": "Update one or more fields of an existing exception for a WAF without affecting other fields.",
          "tags": [
            "WAFs - Exceptions"
          ],
          "parameters": [
            {
              "name": "exception_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "exception_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedWAFRuleRequest",
                  "referenceName": "EDGEPatchedWAFRuleRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWAFRule",
                    "referenceName": "EDGEResponseWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWAFRule",
                    "referenceName": "EDGEResponseAsyncWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteEdgeFirewallWafsWafIdExceptionsExceptionId",
          "summary": "Destroy an Exception from a Web Application Firewall (WAF)",
          "description": "Remove a specific Exception from a WAF in your account.",
          "tags": [
            "WAFs - Exceptions"
          ],
          "parameters": [
            {
              "name": "exception_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "exception_id",
                "type": "string",
                "constraints": {}
              }
            },
            {
              "name": "waf_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "waf_id",
                "type": "string",
                "constraints": {
                  "pattern": "^\\d+$"
                }
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseDeleteWAFRule",
                    "referenceName": "EDGEResponseDeleteWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteWAFRule",
                    "referenceName": "EDGEResponseAsyncDeleteWAFRule"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/workloads/{workload_id}/deployments": {
      "url": "/workspace/workloads/{workload_id}/deployments",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceWorkloadsWorkloadIdDeployments",
          "summary": "List Workload Deployments",
          "description": "List all Workload Deployments related to your account's Workloads.",
          "tags": [
            "Workload Deployments"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, active, last_editor, last_modified, current)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            },
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedWorkloadDeploymentList",
                    "referenceName": "EDGEPaginatedWorkloadDeploymentList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostWorkspaceWorkloadsWorkloadIdDeployments",
          "summary": "Create a Workload Deployment",
          "description": "Create a new Workload Deployment in your account.",
          "tags": [
            "Workload Deployments"
          ],
          "parameters": [
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWorkloadDeploymentRequest",
                  "referenceName": "EDGEWorkloadDeploymentRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkloadDeployment",
                    "referenceName": "EDGEResponseAsyncWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkloadDeployment",
                    "referenceName": "EDGEResponseAsyncWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestWorkloadDeployment",
                    "referenceName": "EDGEResponseBadRequestWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/workloads/{workload_id}/deployments/{deployment_id}": {
      "url": "/workspace/workloads/{workload_id}/deployments/{deployment_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceWorkloadsWorkloadIdDeploymentsDeploymentId",
          "summary": "Retrieve details of a Workload Deployment",
          "description": "Retrieve details of a specific Workload Deployment in your account.",
          "tags": [
            "Workload Deployments"
          ],
          "parameters": [
            {
              "name": "deployment_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "deployment_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveWorkloadDeployment",
                    "referenceName": "EDGEResponseRetrieveWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutWorkspaceWorkloadsWorkloadIdDeploymentsDeploymentId",
          "summary": "Update a Workload Deployment",
          "description": "Update an existing Workload Deployment. This replaces the entire Workload Deployment with the new data provided.",
          "tags": [
            "Workload Deployments"
          ],
          "parameters": [
            {
              "name": "deployment_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "deployment_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWorkloadDeploymentRequest",
                  "referenceName": "EDGEWorkloadDeploymentRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWorkloadDeployment",
                    "referenceName": "EDGEResponseWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkloadDeployment",
                    "referenceName": "EDGEResponseAsyncWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchWorkspaceWorkloadsWorkloadIdDeploymentsDeploymentId",
          "summary": "Partially update a Workload Deployment",
          "description": "Update one or more fields of an existing Workload Deployment without affecting other fields.",
          "tags": [
            "Workload Deployments"
          ],
          "parameters": [
            {
              "name": "deployment_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "deployment_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedWorkloadDeploymentRequest",
                  "referenceName": "EDGEPatchedWorkloadDeploymentRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWorkloadDeployment",
                    "referenceName": "EDGEResponseWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkloadDeployment",
                    "referenceName": "EDGEResponseAsyncWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteWorkspaceWorkloadsWorkloadIdDeploymentsDeploymentId",
          "summary": "Destroy a Workload Deployment",
          "description": "Destruction of a specific Workload Deployment in your account.",
          "tags": [
            "Workload Deployments"
          ],
          "parameters": [
            {
              "name": "deployment_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "deployment_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteWorkloadDeployment",
                    "referenceName": "EDGEResponseAsyncDeleteWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteWorkloadDeployment",
                    "referenceName": "EDGEResponseAsyncDeleteWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseBadRequestWorkloadDeployment",
                    "referenceName": "EDGEResponseBadRequestWorkloadDeployment"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {}
            },
            "405": {
              "statusCode": "405",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Too Many Requests",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEDefaultErrorResponse",
                    "referenceName": "EDGEDefaultErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/workloads": {
      "url": "/workspace/workloads",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceWorkloads",
          "summary": "List Workloads",
          "description": "List all Workloads owned by your account.",
          "tags": [
            "Workloads"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "ordering",
              "in": "query",
              "required": false,
              "schema": {
                "name": "ordering",
                "type": "string",
                "constraints": {}
              },
              "description": "Which field to use when ordering the results.\n(Valid fields: id, name, last_editor, last_modified, active, workload_domain_allow_access, workload_domain, infrastructure, domains, product_version)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page",
                "type": "integer",
                "constraints": {}
              },
              "description": "A page number within the paginated result set."
            },
            {
              "name": "page_size",
              "in": "query",
              "required": false,
              "schema": {
                "name": "page_size",
                "type": "integer",
                "constraints": {}
              },
              "description": "A numeric value that indicates the number of items per page."
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "name": "search",
                "type": "string",
                "constraints": {}
              },
              "description": "A search term."
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEPaginatedWorkloadList",
                    "referenceName": "EDGEPaginatedWorkloadList"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "post": {
          "method": "POST",
          "operationId": "PostWorkspaceWorkloads",
          "summary": "Create an Workload",
          "description": "Create a new Workload in your account.",
          "tags": [
            "Workloads"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWorkloadRequest",
                  "referenceName": "EDGEWorkloadRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "201": {
              "statusCode": "201",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWorkload",
                    "referenceName": "EDGEResponseWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkload",
                    "referenceName": "EDGEResponseAsyncWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    },
    "/workspace/workloads/{workload_id}": {
      "url": "/workspace/workloads/{workload_id}",
      "operations": {
        "get": {
          "method": "GET",
          "operationId": "GetWorkspaceWorkloadsWorkloadId",
          "summary": "Retrieve details of an Workload",
          "description": "Retrieve details of a specific Workload in your account.",
          "tags": [
            "Workloads"
          ],
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "required": false,
              "schema": {
                "name": "fields",
                "type": "string",
                "constraints": {}
              },
              "description": "Comma-separated list of field names to include in the response."
            },
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            }
          ],
          "requestBody": null,
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseRetrieveWorkload",
                    "referenceName": "EDGEResponseRetrieveWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "put": {
          "method": "PUT",
          "operationId": "PutWorkspaceWorkloadsWorkloadId",
          "summary": "Update an Workload",
          "description": "Update an existing Workload. This replaces the entire Workload with the new data provided.",
          "tags": [
            "Workloads"
          ],
          "parameters": [
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEWorkloadRequest",
                  "referenceName": "EDGEWorkloadRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWorkload",
                    "referenceName": "EDGEResponseWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkload",
                    "referenceName": "EDGEResponseAsyncWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "patch": {
          "method": "PATCH",
          "operationId": "PatchWorkspaceWorkloadsWorkloadId",
          "summary": "Partially update an Workload",
          "description": "Update one or more fields of an existing Workload without affecting other fields.",
          "tags": [
            "Workloads"
          ],
          "parameters": [
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "reference": "#/components/schemas/EDGEPatchedWorkloadRequest",
                  "referenceName": "EDGEPatchedWorkloadRequest"
                },
                "examples": {}
              }
            }
          },
          "responses": {
            "200": {
              "statusCode": "200",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseWorkload",
                    "referenceName": "EDGEResponseWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncWorkload",
                    "referenceName": "EDGEResponseAsyncWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "operationId": "DeleteWorkspaceWorkloadsWorkloadId",
          "summary": "Destroy an Workload",
          "description": "Destruction of a specific Workload in your account.",
          "tags": [
            "Workloads"
          ],
          "parameters": [
            {
              "name": "workload_id",
              "in": "path",
              "required": true,
              "schema": {
                "name": "workload_id",
                "type": "integer",
                "constraints": {}
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "required": true,
              "schema": {
                "name": "Content-Type",
                "type": "string",
                "constraints": {},
                "enum": [
                  "application/json"
                ]
              },
              "description": "Content type of the request"
            }
          ],
          "requestBody": null,
          "responses": {
            "202": {
              "statusCode": "202",
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEResponseAsyncDeleteWorkload",
                    "referenceName": "EDGEResponseAsyncDeleteWorkload"
                  },
                  "examples": {}
                }
              }
            },
            "400": {
              "statusCode": "400",
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "401": {
              "statusCode": "401",
              "description": "Authentication Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "403": {
              "statusCode": "403",
              "description": "Permission Denied",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "404": {
              "statusCode": "404",
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "405": {
              "statusCode": "405",
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "406": {
              "statusCode": "406",
              "description": "Not Acceptable",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            },
            "429": {
              "statusCode": "429",
              "description": "Throttled",
              "content": {
                "application/json": {
                  "schema": {
                    "reference": "#/components/schemas/EDGEJSONAPIErrorResponse",
                    "referenceName": "EDGEJSONAPIErrorResponse"
                  },
                  "examples": {}
                }
              }
            }
          },
          "security": [
            {
              "TokenAuth": []
            },
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "parameters": [],
      "context": "workspace"
    }
  },
  "relationships": {
    "references": {
      "USERSDefaultErrorResponse": [],
      "AUTHDefaultErrorResponse": [],
      "AUTHEffectEnum": [],
      "AUTHJSONAPIErrorObject": [],
      "AUTHJSONAPIErrorResponse": [],
      "AUTHJSONAPIErrorSource": [],
      "AUTHLockoutPolicy": [],
      "AUTHLockoutPolicyRequest": [],
      "AUTHLoginRequest": [],
      "AUTHLoginResponse": [],
      "AUTHMFAToken": [],
      "AUTHPaginatedPolicyList": [],
      "AUTHPaginatedTOTPDeviceListList": [],
      "AUTHPatchedPolicyRequest": [],
      "AUTHPolicy": [],
      "AUTHPolicyRequest": [],
      "AUTHPolicyRule": [
        {
          "property": "effect",
          "references": "AUTHEffectEnum"
        },
        {
          "property": "condition",
          "references": "AUTHPolicyRuleCondition"
        }
      ],
      "AUTHPolicyRuleCondition": [],
      "AUTHPolicyRuleConditionRequest": [],
      "AUTHPolicyRuleRequest": [
        {
          "property": "effect",
          "references": "AUTHEffectEnum"
        },
        {
          "property": "condition",
          "references": "AUTHPolicyRuleConditionRequest"
        }
      ],
      "AUTHResponseAsyncDeletePolicy": [],
      "AUTHResponseAsyncDeleteTOTPDeviceCreate": [],
      "AUTHResponseAsyncLockoutPolicy": [
        {
          "property": "data",
          "references": "AUTHLockoutPolicy"
        }
      ],
      "AUTHResponseAsyncLogin": [
        {
          "property": "data",
          "references": "AUTHLoginResponse"
        }
      ],
      "AUTHResponseAsyncPolicy": [
        {
          "property": "data",
          "references": "AUTHPolicy"
        }
      ],
      "AUTHResponseAsyncSessionTimeoutPolicy": [
        {
          "property": "data",
          "references": "AUTHSessionTimeoutPolicy"
        }
      ],
      "AUTHResponseAsyncTOTPDeviceCreate": [
        {
          "property": "data",
          "references": "AUTHTOTPDeviceCreate"
        }
      ],
      "AUTHResponseAsyncToken": [
        {
          "property": "data",
          "references": "AUTHToken"
        }
      ],
      "AUTHResponseAsyncTokenPair": [
        {
          "property": "data",
          "references": "AUTHTokenPair"
        }
      ],
      "AUTHResponseBadRequestPolicy": [],
      "AUTHResponseDeletePolicy": [],
      "AUTHResponseDeleteTOTPDeviceCreate": [],
      "AUTHResponseLockoutPolicy": [
        {
          "property": "data",
          "references": "AUTHLockoutPolicy"
        }
      ],
      "AUTHResponseLogin": [
        {
          "property": "data",
          "references": "AUTHLoginResponse"
        }
      ],
      "AUTHResponsePolicy": [
        {
          "property": "data",
          "references": "AUTHPolicy"
        }
      ],
      "AUTHResponseRetrieveLockoutPolicy": [
        {
          "property": "data",
          "references": "AUTHLockoutPolicy"
        }
      ],
      "AUTHResponseRetrievePolicy": [
        {
          "property": "data",
          "references": "AUTHPolicy"
        }
      ],
      "AUTHResponseRetrieveSessionTimeoutPolicy": [
        {
          "property": "data",
          "references": "AUTHSessionTimeoutPolicy"
        }
      ],
      "AUTHResponseSessionTimeoutPolicy": [
        {
          "property": "data",
          "references": "AUTHSessionTimeoutPolicy"
        }
      ],
      "AUTHResponseTOTPDeviceCreate": [
        {
          "property": "data",
          "references": "AUTHTOTPDeviceCreate"
        }
      ],
      "AUTHResponseToken": [
        {
          "property": "data",
          "references": "AUTHToken"
        }
      ],
      "AUTHResponseTokenPair": [
        {
          "property": "data",
          "references": "AUTHTokenPair"
        }
      ],
      "AUTHSessionTimeoutPolicy": [],
      "AUTHSessionTimeoutPolicyRequest": [],
      "AUTHStateExecutedResponse": [],
      "AUTHStatePendingResponse": [],
      "AUTHTOTPDeviceCreate": [],
      "AUTHTOTPDeviceList": [],
      "AUTHTOTPVerificationRequest": [],
      "AUTHToken": [],
      "AUTHTokenPair": [],
      "AUTHTokenRequest": [],
      "AUTHuser_login_method_response": [],
      "EDGEAWS4HMAC": [
        {
          "property": "type",
          "references": "EDGEAWS4HMACTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEAWS4HMACAttributes"
        }
      ],
      "EDGEAWS4HMACAttributes": [],
      "EDGEAWS4HMACAttributesRequest": [],
      "EDGEAWS4HMACRequest": [
        {
          "property": "type",
          "references": "EDGEAWS4HMACTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEAWS4HMACAttributesRequest"
        }
      ],
      "EDGEAWS4HMACTypeEnum": [],
      "EDGEAddress": [],
      "EDGEAddressLoadBalancerModule": [],
      "EDGEAddressLoadBalancerModuleRequest": [],
      "EDGEAddressModules": [
        {
          "property": "load_balancer",
          "references": "EDGEAddressLoadBalancerModule"
        }
      ],
      "EDGEAddressModulesRequest": [
        {
          "property": "load_balancer",
          "references": "EDGEAddressLoadBalancerModuleRequest"
        }
      ],
      "EDGEAddressRequest": [],
      "EDGEApplication": [
        {
          "property": "modules",
          "references": "EDGEApplicationModules"
        }
      ],
      "EDGEApplicationAcceleratorModule": [],
      "EDGEApplicationAcceleratorModuleRequest": [],
      "EDGEApplicationDeviceGroups": [],
      "EDGEApplicationDeviceGroupsRequest": [],
      "EDGEApplicationFunctionInstance": [],
      "EDGEApplicationFunctionInstanceRequest": [],
      "EDGEApplicationModules": [],
      "EDGEApplicationModulesRequest": [],
      "EDGEApplicationRequest": [
        {
          "property": "modules",
          "references": "EDGEApplicationModulesRequest"
        }
      ],
      "EDGEApplicationRequestPhaseRuleEngine": [],
      "EDGEApplicationRequestPhaseRuleEngineOrderRequest": [],
      "EDGEApplicationRequestPhaseRuleEngineRequest": [],
      "EDGEApplicationResponsePhaseRuleEngine": [],
      "EDGEApplicationResponsePhaseRuleEngineOrderRequest": [],
      "EDGEApplicationResponsePhaseRuleEngineRequest": [],
      "EDGEApplicationRuleEngineAddHeader": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineAddHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineAddHeaderAttributes"
        }
      ],
      "EDGEApplicationRuleEngineAddHeaderAttributes": [],
      "EDGEApplicationRuleEngineAddHeaderAttributesRequest": [],
      "EDGEApplicationRuleEngineAddHeaderRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineAddHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineAddHeaderAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineAddHeaderTypeEnum": [],
      "EDGEApplicationRuleEngineAddRequestCookie": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineAddRequestCookieTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineAddRequestCookieAttributes"
        }
      ],
      "EDGEApplicationRuleEngineAddRequestCookieAttributes": [],
      "EDGEApplicationRuleEngineAddRequestCookieAttributesRequest": [],
      "EDGEApplicationRuleEngineAddRequestCookieRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineAddRequestCookieTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineAddRequestCookieAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineAddRequestCookieTypeEnum": [],
      "EDGEApplicationRuleEngineAddResponseHeader": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineAddResponseHeaderAttributes"
        }
      ],
      "EDGEApplicationRuleEngineAddResponseHeaderAttributes": [],
      "EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest": [],
      "EDGEApplicationRuleEngineAddResponseHeaderRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum": [],
      "EDGEApplicationRuleEngineCaptureMatchGroups": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineCaptureMatchGroupsAttributes"
        }
      ],
      "EDGEApplicationRuleEngineCaptureMatchGroupsAttributes": [],
      "EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest": [],
      "EDGEApplicationRuleEngineCaptureMatchGroupsRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum": [],
      "EDGEApplicationRuleEngineFilterHeader": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineFilterHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineFilterHeaderAttributes"
        }
      ],
      "EDGEApplicationRuleEngineFilterHeaderAttributes": [],
      "EDGEApplicationRuleEngineFilterHeaderAttributesRequest": [],
      "EDGEApplicationRuleEngineFilterHeaderRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineFilterHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineFilterHeaderAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineFilterHeaderTypeEnum": [],
      "EDGEApplicationRuleEngineFilterRequestCookie": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineFilterRequestCookieAttributes"
        }
      ],
      "EDGEApplicationRuleEngineFilterRequestCookieAttributes": [],
      "EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest": [],
      "EDGEApplicationRuleEngineFilterRequestCookieRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum": [],
      "EDGEApplicationRuleEngineFilterResponseHeader": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineFilterResponseHeaderAttributes"
        }
      ],
      "EDGEApplicationRuleEngineFilterResponseHeaderAttributes": [],
      "EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest": [],
      "EDGEApplicationRuleEngineFilterResponseHeaderRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum": [],
      "EDGEApplicationRuleEngineNoArgs": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineNoArgsTypeEnum"
        }
      ],
      "EDGEApplicationRuleEngineNoArgsRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineNoArgsTypeEnum"
        }
      ],
      "EDGEApplicationRuleEngineNoArgsTypeEnum": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviors": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest": [],
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsShared": [],
      "EDGEApplicationRuleEngineResponseNoArgs": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineResponseNoArgsTypeEnum"
        }
      ],
      "EDGEApplicationRuleEngineResponseNoArgsRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineResponseNoArgsTypeEnum"
        }
      ],
      "EDGEApplicationRuleEngineResponseNoArgsTypeEnum": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviors": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest": [],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsShared": [],
      "EDGEApplicationRuleEngineResponseString": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineResponseStringTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineResponseStringAttributes"
        }
      ],
      "EDGEApplicationRuleEngineResponseStringAttributes": [],
      "EDGEApplicationRuleEngineResponseStringAttributesRequest": [],
      "EDGEApplicationRuleEngineResponseStringRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineResponseStringTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineResponseStringAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineResponseStringTypeEnum": [],
      "EDGEApplicationRuleEngineRewriteRequest": [
        {
          "property": "type",
          "references": "EDGETypeF11Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineRewriteRequestAttributes"
        }
      ],
      "EDGEApplicationRuleEngineRewriteRequestAttributes": [],
      "EDGEApplicationRuleEngineRewriteRequestAttributesRequest": [],
      "EDGEApplicationRuleEngineRewriteRequestRequest": [
        {
          "property": "type",
          "references": "EDGETypeF11Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineRewriteRequestAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineRunFunction": [
        {
          "property": "type",
          "references": "EDGEType689Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineRunFunctionAttributes"
        }
      ],
      "EDGEApplicationRuleEngineRunFunctionAttributes": [],
      "EDGEApplicationRuleEngineRunFunctionAttributesRequest": [],
      "EDGEApplicationRuleEngineRunFunctionRequest": [
        {
          "property": "type",
          "references": "EDGEType689Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineRunFunctionAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineRunFunctionResponse": [
        {
          "property": "type",
          "references": "EDGEType689Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineRunFunctionResponseAttributes"
        }
      ],
      "EDGEApplicationRuleEngineRunFunctionResponseAttributes": [],
      "EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest": [],
      "EDGEApplicationRuleEngineRunFunctionResponseRequest": [
        {
          "property": "type",
          "references": "EDGEType689Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineSetCachePolicy": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetCachePolicyTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetCachePolicyAttributes"
        }
      ],
      "EDGEApplicationRuleEngineSetCachePolicyAttributes": [],
      "EDGEApplicationRuleEngineSetCachePolicyAttributesRequest": [],
      "EDGEApplicationRuleEngineSetCachePolicyRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetCachePolicyTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetCachePolicyAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineSetCachePolicyTypeEnum": [],
      "EDGEApplicationRuleEngineSetConnector": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetConnectorTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetConnectorAttributes"
        }
      ],
      "EDGEApplicationRuleEngineSetConnectorAttributes": [],
      "EDGEApplicationRuleEngineSetConnectorAttributesRequest": [],
      "EDGEApplicationRuleEngineSetConnectorRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetConnectorTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetConnectorAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineSetConnectorTypeEnum": [],
      "EDGEApplicationRuleEngineSetCookie": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetCookieTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetCookieAttributes"
        }
      ],
      "EDGEApplicationRuleEngineSetCookieAttributes": [],
      "EDGEApplicationRuleEngineSetCookieAttributesRequest": [],
      "EDGEApplicationRuleEngineSetCookieRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetCookieTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetCookieAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineSetCookieTypeEnum": [],
      "EDGEApplicationRuleEngineSetOrigin": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetOriginTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetOriginAttributes"
        }
      ],
      "EDGEApplicationRuleEngineSetOriginAttributes": [],
      "EDGEApplicationRuleEngineSetOriginAttributesRequest": [],
      "EDGEApplicationRuleEngineSetOriginRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineSetOriginTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineSetOriginAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineSetOriginTypeEnum": [],
      "EDGEApplicationRuleEngineString": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineStringTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineStringAttributes"
        }
      ],
      "EDGEApplicationRuleEngineStringAttributes": [],
      "EDGEApplicationRuleEngineStringAttributesRequest": [],
      "EDGEApplicationRuleEngineStringRequest": [
        {
          "property": "type",
          "references": "EDGEApplicationRuleEngineStringTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEApplicationRuleEngineStringAttributesRequest"
        }
      ],
      "EDGEApplicationRuleEngineStringTypeEnum": [],
      "EDGEBehaviorA69Enum": [],
      "EDGEBlankEnum": [],
      "EDGEBrowserCacheModule": [],
      "EDGEBrowserCacheModuleBehaviorEnum": [],
      "EDGEBrowserCacheModuleRequest": [],
      "EDGECacheModule": [],
      "EDGECacheModuleRequest": [],
      "EDGECacheSetting": [
        {
          "property": "browser_cache",
          "references": "EDGEBrowserCacheModule"
        },
        {
          "property": "modules",
          "references": "EDGECacheSettingsModules"
        }
      ],
      "EDGECacheSettingRequest": [
        {
          "property": "browser_cache",
          "references": "EDGEBrowserCacheModuleRequest"
        },
        {
          "property": "modules",
          "references": "EDGECacheSettingsModulesRequest"
        }
      ],
      "EDGECacheSettingsApplicationAcceleratorModule": [
        {
          "property": "cache_vary_by_querystring",
          "references": "EDGECacheVaryByQuerystringModule"
        },
        {
          "property": "cache_vary_by_cookies",
          "references": "EDGECacheVaryByCookiesModule"
        },
        {
          "property": "cache_vary_by_devices",
          "references": "EDGECacheVaryByDevicesModule"
        }
      ],
      "EDGECacheSettingsApplicationAcceleratorModuleRequest": [
        {
          "property": "cache_vary_by_querystring",
          "references": "EDGECacheVaryByQuerystringModuleRequest"
        },
        {
          "property": "cache_vary_by_cookies",
          "references": "EDGECacheVaryByCookiesModuleRequest"
        },
        {
          "property": "cache_vary_by_devices",
          "references": "EDGECacheVaryByDevicesModuleRequest"
        }
      ],
      "EDGECacheSettingsEdgeCacheModule": [
        {
          "property": "stale_cache",
          "references": "EDGEStateCacheModule"
        },
        {
          "property": "large_file_cache",
          "references": "EDGELargeFileCacheModule"
        }
      ],
      "EDGECacheSettingsEdgeCacheModuleBehaviorEnum": [],
      "EDGECacheSettingsEdgeCacheModuleRequest": [
        {
          "property": "stale_cache",
          "references": "EDGEStateCacheModuleRequest"
        },
        {
          "property": "large_file_cache",
          "references": "EDGELargeFileCacheModuleRequest"
        }
      ],
      "EDGECacheSettingsModules": [
        {
          "property": "edge_cache",
          "references": "EDGECacheSettingsEdgeCacheModule"
        },
        {
          "property": "application_accelerator",
          "references": "EDGECacheSettingsApplicationAcceleratorModule"
        }
      ],
      "EDGECacheSettingsModulesRequest": [
        {
          "property": "edge_cache",
          "references": "EDGECacheSettingsEdgeCacheModuleRequest"
        },
        {
          "property": "application_accelerator",
          "references": "EDGECacheSettingsApplicationAcceleratorModuleRequest"
        }
      ],
      "EDGECacheSettingsTieredCacheModule": [
        {
          "property": "topology",
          "references": "EDGETopologyEnum"
        }
      ],
      "EDGECacheSettingsTieredCacheModuleBehaviorEnum": [],
      "EDGECacheSettingsTieredCacheModuleRequest": [
        {
          "property": "topology",
          "references": "EDGETopologyEnum"
        }
      ],
      "EDGECacheVaryByCookiesModule": [],
      "EDGECacheVaryByCookiesModuleRequest": [],
      "EDGECacheVaryByDevicesModule": [],
      "EDGECacheVaryByDevicesModuleBehaviorEnum": [],
      "EDGECacheVaryByDevicesModuleRequest": [],
      "EDGECacheVaryByMethodEnum": [],
      "EDGECacheVaryByQuerystringModule": [],
      "EDGECacheVaryByQuerystringModuleRequest": [],
      "EDGECiphersEnum": [],
      "EDGECloneApplicationRequest": [],
      "EDGECloneFirewallRequest": [],
      "EDGECloneWAFRequest": [],
      "EDGECodeEnum": [],
      "EDGEConditionalEnum": [],
      "EDGEConnectorHTTP": [
        {
          "property": "attributes",
          "references": "EDGEConnectorHTTPAttributes"
        }
      ],
      "EDGEConnectorHTTPAttributes": [],
      "EDGEConnectorHTTPAttributesRequest": [],
      "EDGEConnectorHTTPRequest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorHTTPAttributesRequest"
        }
      ],
      "EDGEConnectorLiveIngest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorLiveIngestAttributes"
        }
      ],
      "EDGEConnectorLiveIngestAttributes": [
        {
          "property": "region",
          "references": "EDGERegionEnum"
        }
      ],
      "EDGEConnectorLiveIngestAttributesRequest": [
        {
          "property": "region",
          "references": "EDGERegionEnum"
        }
      ],
      "EDGEConnectorLiveIngestRequest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorLiveIngestAttributesRequest"
        }
      ],
      "EDGEConnectorPolymorphic": [],
      "EDGEConnectorPolymorphicRequest": [],
      "EDGEConnectorStorage": [
        {
          "property": "attributes",
          "references": "EDGEConnectorStorageAttributes"
        }
      ],
      "EDGEConnectorStorageAttributes": [],
      "EDGEConnectorStorageAttributesRequest": [],
      "EDGEConnectorStorageRequest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorStorageAttributesRequest"
        }
      ],
      "EDGECustomPage": [],
      "EDGECustomPageRequest": [],
      "EDGEDefaultDeploymentStrategy": [
        {
          "property": "attributes",
          "references": "EDGEDefaultDeploymentStrategyAttrs"
        }
      ],
      "EDGEDefaultDeploymentStrategyAttrs": [],
      "EDGEDefaultDeploymentStrategyAttrsRequest": [],
      "EDGEDefaultDeploymentStrategyRequest": [
        {
          "property": "attributes",
          "references": "EDGEDefaultDeploymentStrategyAttrsRequest"
        }
      ],
      "EDGEDefaultErrorResponse": [],
      "EDGEDeploymentStrategy": [],
      "EDGEDeploymentStrategyDefaultDeploymentStrategy": [],
      "EDGEDeploymentStrategyDefaultDeploymentStrategyRequest": [],
      "EDGEDeploymentStrategyRequest": [],
      "EDGEDeploymentStrategyShared": [],
      "EDGEDnsResolutionEnum": [],
      "EDGEEdgeApplicationCriterionField": [
        {
          "property": "conditional",
          "references": "EDGEConditionalEnum"
        },
        {
          "property": "variable",
          "references": "EDGEEdgeApplicationCriterionFieldVariableEnum"
        },
        {
          "property": "operator",
          "references": "EDGEOperator565Enum"
        }
      ],
      "EDGEEdgeApplicationCriterionFieldRequest": [
        {
          "property": "conditional",
          "references": "EDGEConditionalEnum"
        },
        {
          "property": "variable",
          "references": "EDGEEdgeApplicationCriterionFieldVariableEnum"
        },
        {
          "property": "operator",
          "references": "EDGEOperator565Enum"
        }
      ],
      "EDGEEdgeApplicationCriterionFieldVariableEnum": [],
      "EDGEEdgeApplicationCriterionPolymorphicArgument": [],
      "EDGEEdgeApplicationCriterionPolymorphicArgumentRequest": [],
      "EDGEEdgeFirewallCriterionField": [
        {
          "property": "conditional",
          "references": "EDGEConditionalEnum"
        },
        {
          "property": "variable",
          "references": "EDGEEdgeFirewallCriterionFieldVariableEnum"
        },
        {
          "property": "operator",
          "references": "EDGEOperator565Enum"
        }
      ],
      "EDGEEdgeFirewallCriterionFieldRequest": [
        {
          "property": "conditional",
          "references": "EDGEConditionalEnum"
        },
        {
          "property": "variable",
          "references": "EDGEEdgeFirewallCriterionFieldVariableEnum"
        },
        {
          "property": "operator",
          "references": "EDGEOperator565Enum"
        }
      ],
      "EDGEEdgeFirewallCriterionFieldVariableEnum": [],
      "EDGEEdgeFirewallCriterionPolymorphicArgument": [],
      "EDGEEdgeFirewallCriterionPolymorphicArgumentRequest": [],
      "EDGEEdgeFunctionModule": [],
      "EDGEEdgeFunctionModuleRequest": [],
      "EDGEEdgeFunctions": [],
      "EDGEEdgeFunctionsRequest": [],
      "EDGEEngineVersionEnum": [],
      "EDGEExecutionEnvironmentEnum": [],
      "EDGEFirewall": [
        {
          "property": "modules",
          "references": "EDGEFirewallModules"
        }
      ],
      "EDGEFirewallBehaviorNoArguments": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorNoArgumentsTypeEnum"
        }
      ],
      "EDGEFirewallBehaviorNoArgumentsRequest": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorNoArgumentsTypeEnum"
        }
      ],
      "EDGEFirewallBehaviorNoArgumentsTypeEnum": [],
      "EDGEFirewallBehaviorRunFunction": [
        {
          "property": "type",
          "references": "EDGEType689Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorRunFunctionAttributes"
        }
      ],
      "EDGEFirewallBehaviorRunFunctionAttributes": [],
      "EDGEFirewallBehaviorRunFunctionAttributesRequest": [],
      "EDGEFirewallBehaviorRunFunctionRequest": [
        {
          "property": "type",
          "references": "EDGEType689Enum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorRunFunctionAttributesRequest"
        }
      ],
      "EDGEFirewallBehaviorSetCustomResponse": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorSetCustomResponseTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorSetCustomResponseAttributes"
        }
      ],
      "EDGEFirewallBehaviorSetCustomResponseAttributes": [],
      "EDGEFirewallBehaviorSetCustomResponseAttributesRequest": [],
      "EDGEFirewallBehaviorSetCustomResponseRequest": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorSetCustomResponseTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorSetCustomResponseAttributesRequest"
        }
      ],
      "EDGEFirewallBehaviorSetCustomResponseTypeEnum": [],
      "EDGEFirewallBehaviorSetRateLimit": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorSetRateLimitTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorSetRateLimitAttributes"
        }
      ],
      "EDGEFirewallBehaviorSetRateLimitAttributes": [
        {
          "property": "limit_by",
          "references": "EDGELimitByEnum"
        }
      ],
      "EDGEFirewallBehaviorSetRateLimitAttributesRequest": [
        {
          "property": "limit_by",
          "references": "EDGELimitByEnum"
        }
      ],
      "EDGEFirewallBehaviorSetRateLimitAttributesTypeEnum": [],
      "EDGEFirewallBehaviorSetRateLimitRequest": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorSetRateLimitTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorSetRateLimitAttributesRequest"
        }
      ],
      "EDGEFirewallBehaviorSetRateLimitTypeEnum": [],
      "EDGEFirewallBehaviorSetWaf": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorSetWafTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorSetWafAttributes"
        }
      ],
      "EDGEFirewallBehaviorSetWafAttributes": [
        {
          "property": "mode",
          "references": "EDGEModeEnum"
        }
      ],
      "EDGEFirewallBehaviorSetWafAttributesRequest": [
        {
          "property": "mode",
          "references": "EDGEModeEnum"
        }
      ],
      "EDGEFirewallBehaviorSetWafRequest": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorSetWafTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorSetWafAttributesRequest"
        }
      ],
      "EDGEFirewallBehaviorSetWafTypeEnum": [],
      "EDGEFirewallBehaviorTagEvent": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorTagEventTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorTagEventAttributes"
        }
      ],
      "EDGEFirewallBehaviorTagEventAttributes": [],
      "EDGEFirewallBehaviorTagEventAttributesRequest": [],
      "EDGEFirewallBehaviorTagEventRequest": [
        {
          "property": "type",
          "references": "EDGEFirewallBehaviorTagEventTypeEnum"
        },
        {
          "property": "attributes",
          "references": "EDGEFirewallBehaviorTagEventAttributesRequest"
        }
      ],
      "EDGEFirewallBehaviorTagEventTypeEnum": [],
      "EDGEFirewallBehaviors": [],
      "EDGEFirewallBehaviorsFirewallBehaviorNoArguments": [],
      "EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest": [],
      "EDGEFirewallBehaviorsFirewallBehaviorRunFunction": [],
      "EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest": [],
      "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse": [],
      "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest": [],
      "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit": [],
      "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest": [],
      "EDGEFirewallBehaviorsFirewallBehaviorSetWaf": [],
      "EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest": [],
      "EDGEFirewallBehaviorsFirewallBehaviorTagEvent": [],
      "EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest": [],
      "EDGEFirewallBehaviorsRequest": [],
      "EDGEFirewallBehaviorsShared": [],
      "EDGEFirewallFunctionInstance": [],
      "EDGEFirewallFunctionInstanceRequest": [],
      "EDGEFirewallModule": [],
      "EDGEFirewallModuleRequest": [],
      "EDGEFirewallModules": [],
      "EDGEFirewallModulesRequest": [],
      "EDGEFirewallRequest": [
        {
          "property": "modules",
          "references": "EDGEFirewallModulesRequest"
        }
      ],
      "EDGEFirewallRuleEngine": [],
      "EDGEFirewallRuleEngineOrderRequest": [],
      "EDGEFirewallRuleEngineRequest": [],
      "EDGEHMAC": [],
      "EDGEHMACPolymorphic": [],
      "EDGEHMACPolymorphicRequest": [],
      "EDGEHMACRequest": [],
      "EDGEHTTPConnectionOptions": [],
      "EDGEHTTPConnectionOptionsRequest": [],
      "EDGEHTTPModules": [],
      "EDGEHTTPModulesRequest": [],
      "EDGEHttpProtocol": [],
      "EDGEHttpProtocolRequest": [],
      "EDGEHttpVersionPolicyEnum": [],
      "EDGEImageProcessorModule": [],
      "EDGEImageProcessorModuleRequest": [],
      "EDGEInfrastructureEnum": [],
      "EDGEJSONAPIErrorObject": [],
      "EDGEJSONAPIErrorResponse": [],
      "EDGEJSONAPIErrorSource": [],
      "EDGELargeFileCacheModule": [],
      "EDGELargeFileCacheModuleRequest": [],
      "EDGELayerEnum": [],
      "EDGELimitByEnum": [],
      "EDGELoadBalancerModule": [],
      "EDGELoadBalancerModuleConfig": [],
      "EDGELoadBalancerModuleConfigRequest": [],
      "EDGELoadBalancerModuleRequest": [],
      "EDGEMTLS": [],
      "EDGEMTLSRequest": [],
      "EDGEMethodEnum": [],
      "EDGEMinimumVersionEnum": [],
      "EDGEModeEnum": [],
      "EDGENetworkList": [
        {
          "property": "type",
          "references": "EDGEType528Enum"
        }
      ],
      "EDGENetworkListDetail": [
        {
          "property": "type",
          "references": "EDGEType528Enum"
        }
      ],
      "EDGENetworkListDetailRequest": [
        {
          "property": "type",
          "references": "EDGEType528Enum"
        }
      ],
      "EDGENullEnum": [],
      "EDGEOperator565Enum": [],
      "EDGEOriginIPACL": [],
      "EDGEOriginIPACLRequest": [],
      "EDGEOriginShieldConfig": [
        {
          "property": "origin_ip_acl",
          "references": "EDGEOriginIPACL"
        },
        {
          "property": "hmac",
          "references": "EDGEHMAC"
        }
      ],
      "EDGEOriginShieldConfigRequest": [
        {
          "property": "origin_ip_acl",
          "references": "EDGEOriginIPACLRequest"
        },
        {
          "property": "hmac",
          "references": "EDGEHMACRequest"
        }
      ],
      "EDGEOriginShieldModule": [],
      "EDGEOriginShieldModuleRequest": [],
      "EDGEPage": [
        {
          "property": "code",
          "references": "EDGECodeEnum"
        },
        {
          "property": "page",
          "references": "EDGEPagePolymorphic"
        }
      ],
      "EDGEPageConnector": [
        {
          "property": "attributes",
          "references": "EDGEPageConnectorAttributes"
        }
      ],
      "EDGEPageConnectorAttributes": [],
      "EDGEPageConnectorAttributesRequest": [],
      "EDGEPageConnectorRequest": [
        {
          "property": "attributes",
          "references": "EDGEPageConnectorAttributesRequest"
        }
      ],
      "EDGEPagePolymorphic": [],
      "EDGEPagePolymorphicRequest": [],
      "EDGEPageRequest": [
        {
          "property": "code",
          "references": "EDGECodeEnum"
        },
        {
          "property": "page",
          "references": "EDGEPagePolymorphicRequest"
        }
      ],
      "EDGEPaginatedApplicationDeviceGroupsList": [],
      "EDGEPaginatedApplicationFunctionInstanceList": [],
      "EDGEPaginatedApplicationList": [],
      "EDGEPaginatedApplicationRequestPhaseRuleEngineList": [],
      "EDGEPaginatedApplicationResponsePhaseRuleEngineList": [],
      "EDGEPaginatedConnectorPolymorphicList": [],
      "EDGEPaginatedCustomPageList": [],
      "EDGEPaginatedEdgeFunctionsList": [],
      "EDGEPaginatedFirewallFunctionInstanceList": [],
      "EDGEPaginatedFirewallList": [],
      "EDGEPaginatedFirewallRuleEngineList": [],
      "EDGEPaginatedNetworkListList": [],
      "EDGEPaginatedResponseListCacheSettingList": [],
      "EDGEPaginatedWAFList": [],
      "EDGEPaginatedWAFRuleList": [],
      "EDGEPaginatedWorkloadDeploymentList": [],
      "EDGEPaginatedWorkloadList": [],
      "EDGEPatchedApplicationDeviceGroupsRequest": [],
      "EDGEPatchedApplicationFunctionInstanceRequest": [],
      "EDGEPatchedApplicationRequest": [
        {
          "property": "modules",
          "references": "EDGEApplicationModulesRequest"
        }
      ],
      "EDGEPatchedApplicationRequestPhaseRuleEngineRequest": [],
      "EDGEPatchedApplicationResponsePhaseRuleEngineRequest": [],
      "EDGEPatchedCacheSettingRequest": [
        {
          "property": "browser_cache",
          "references": "EDGEBrowserCacheModuleRequest"
        },
        {
          "property": "modules",
          "references": "EDGECacheSettingsModulesRequest"
        }
      ],
      "EDGEPatchedConnectorHTTPRequest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorHTTPAttributesRequest"
        }
      ],
      "EDGEPatchedConnectorLiveIngestRequest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorLiveIngestAttributesRequest"
        }
      ],
      "EDGEPatchedConnectorPolymorphicRequest": [],
      "EDGEPatchedConnectorStorageRequest": [
        {
          "property": "attributes",
          "references": "EDGEConnectorStorageAttributesRequest"
        }
      ],
      "EDGEPatchedCustomPageRequest": [],
      "EDGEPatchedEdgeFunctionsRequest": [],
      "EDGEPatchedFirewallFunctionInstanceRequest": [],
      "EDGEPatchedFirewallRequest": [
        {
          "property": "modules",
          "references": "EDGEFirewallModulesRequest"
        }
      ],
      "EDGEPatchedFirewallRuleEngineRequest": [],
      "EDGEPatchedNetworkListDetailRequest": [
        {
          "property": "type",
          "references": "EDGEType528Enum"
        }
      ],
      "EDGEPatchedWAFRequest": [
        {
          "property": "engine_settings",
          "references": "EDGEWAFEngineSettingsFieldRequest"
        }
      ],
      "EDGEPatchedWAFRuleRequest": [],
      "EDGEPatchedWorkloadDeploymentRequest": [
        {
          "property": "strategy",
          "references": "EDGEDeploymentStrategyRequest"
        }
      ],
      "EDGEPatchedWorkloadRequest": [
        {
          "property": "mtls",
          "references": "EDGEMTLSRequest"
        }
      ],
      "EDGEProtocols": [],
      "EDGEProtocolsRequest": [],
      "EDGEPurgeInput": [],
      "EDGEPurgeInputRequest": [],
      "EDGERegionEnum": [],
      "EDGEResponseApplication": [
        {
          "property": "data",
          "references": "EDGEApplication"
        }
      ],
      "EDGEResponseApplicationDeviceGroups": [
        {
          "property": "data",
          "references": "EDGEApplicationDeviceGroups"
        }
      ],
      "EDGEResponseApplicationFunctionInstance": [
        {
          "property": "data",
          "references": "EDGEApplicationFunctionInstance"
        }
      ],
      "EDGEResponseApplicationRequestPhaseRuleEngine": [
        {
          "property": "data",
          "references": "EDGEApplicationRequestPhaseRuleEngine"
        }
      ],
      "EDGEResponseApplicationResponsePhaseRuleEngine": [
        {
          "property": "data",
          "references": "EDGEApplicationResponsePhaseRuleEngine"
        }
      ],
      "EDGEResponseAsyncApplication": [
        {
          "property": "data",
          "references": "EDGEApplication"
        }
      ],
      "EDGEResponseAsyncApplicationDeviceGroups": [
        {
          "property": "data",
          "references": "EDGEApplicationDeviceGroups"
        }
      ],
      "EDGEResponseAsyncApplicationFunctionInstance": [
        {
          "property": "data",
          "references": "EDGEApplicationFunctionInstance"
        }
      ],
      "EDGEResponseAsyncApplicationRequestPhaseRuleEngine": [
        {
          "property": "data",
          "references": "EDGEApplicationRequestPhaseRuleEngine"
        }
      ],
      "EDGEResponseAsyncApplicationResponsePhaseRuleEngine": [
        {
          "property": "data",
          "references": "EDGEApplicationResponsePhaseRuleEngine"
        }
      ],
      "EDGEResponseAsyncCacheSetting": [
        {
          "property": "data",
          "references": "EDGECacheSetting"
        }
      ],
      "EDGEResponseAsyncConnectorPolymorphic": [
        {
          "property": "data",
          "references": "EDGEConnectorPolymorphic"
        }
      ],
      "EDGEResponseAsyncCustomPage": [
        {
          "property": "data",
          "references": "EDGECustomPage"
        }
      ],
      "EDGEResponseAsyncDeleteApplication": [],
      "EDGEResponseAsyncDeleteApplicationDeviceGroups": [],
      "EDGEResponseAsyncDeleteApplicationFunctionInstance": [],
      "EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine": [],
      "EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine": [],
      "EDGEResponseAsyncDeleteCacheSetting": [],
      "EDGEResponseAsyncDeleteConnectorPolymorphic": [],
      "EDGEResponseAsyncDeleteCustomPage": [],
      "EDGEResponseAsyncDeleteFirewall": [],
      "EDGEResponseAsyncDeleteFirewallFunctionInstance": [],
      "EDGEResponseAsyncDeleteFirewallRuleEngine": [],
      "EDGEResponseAsyncDeleteFunctionsDoc": [],
      "EDGEResponseAsyncDeleteNetworkListDetail": [],
      "EDGEResponseAsyncDeleteWAF": [],
      "EDGEResponseAsyncDeleteWAFRule": [],
      "EDGEResponseAsyncDeleteWorkload": [],
      "EDGEResponseAsyncDeleteWorkloadDeployment": [],
      "EDGEResponseAsyncFirewall": [
        {
          "property": "data",
          "references": "EDGEFirewall"
        }
      ],
      "EDGEResponseAsyncFirewallFunctionInstance": [
        {
          "property": "data",
          "references": "EDGEFirewallFunctionInstance"
        }
      ],
      "EDGEResponseAsyncFirewallRuleEngine": [
        {
          "property": "data",
          "references": "EDGEFirewallRuleEngine"
        }
      ],
      "EDGEResponseAsyncFunctionsDoc": [
        {
          "property": "data",
          "references": "EDGEEdgeFunctions"
        }
      ],
      "EDGEResponseAsyncNetworkListDetail": [
        {
          "property": "data",
          "references": "EDGENetworkListDetail"
        }
      ],
      "EDGEResponseAsyncPurgeInput": [
        {
          "property": "data",
          "references": "EDGEPurgeInput"
        }
      ],
      "EDGEResponseAsyncWAF": [
        {
          "property": "data",
          "references": "EDGEWAF"
        }
      ],
      "EDGEResponseAsyncWAFRule": [
        {
          "property": "data",
          "references": "EDGEWAFRule"
        }
      ],
      "EDGEResponseAsyncWorkload": [
        {
          "property": "data",
          "references": "EDGEWorkload"
        }
      ],
      "EDGEResponseAsyncWorkloadDeployment": [
        {
          "property": "data",
          "references": "EDGEWorkloadDeployment"
        }
      ],
      "EDGEResponseBadRequestApplication": [
        {
          "property": "modules",
          "references": "EDGEResponseBadRequestSerializerMetaclassModulesField"
        }
      ],
      "EDGEResponseBadRequestCacheSetting": [
        {
          "property": "browser_cache",
          "references": "EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField"
        },
        {
          "property": "modules",
          "references": "EDGEResponseBadRequestSerializerMetaclassModulesField"
        }
      ],
      "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField": [],
      "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField": [],
      "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField": [],
      "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField": [],
      "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField": [],
      "EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField": [
        {
          "property": "cache_vary_by_querystring",
          "references": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField"
        },
        {
          "property": "cache_vary_by_cookies",
          "references": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField"
        },
        {
          "property": "cache_vary_by_devices",
          "references": "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField"
        }
      ],
      "EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField": [
        {
          "property": "stale_cache",
          "references": "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField"
        },
        {
          "property": "large_file_cache",
          "references": "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField"
        }
      ],
      "EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField": [],
      "EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField": [],
      "EDGEResponseBadRequestSerializerMetaclassModulesField": [
        {
          "property": "edge_cache",
          "references": "EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField"
        },
        {
          "property": "tiered_cache",
          "references": "EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField"
        },
        {
          "property": "application_accelerator",
          "references": "EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField"
        }
      ],
      "EDGEResponseBadRequestSerializerMetaclassStrategyField": [],
      "EDGEResponseBadRequestWorkloadDeployment": [
        {
          "property": "strategy",
          "references": "EDGEResponseBadRequestSerializerMetaclassStrategyField"
        }
      ],
      "EDGEResponseConnectorPolymorphic": [
        {
          "property": "data",
          "references": "EDGEConnectorPolymorphic"
        }
      ],
      "EDGEResponseCustomPage": [
        {
          "property": "data",
          "references": "EDGECustomPage"
        }
      ],
      "EDGEResponseDeleteApplication": [],
      "EDGEResponseDeleteApplicationFunctionInstance": [],
      "EDGEResponseDeleteApplicationRequestPhaseRuleEngine": [],
      "EDGEResponseDeleteApplicationResponsePhaseRuleEngine": [],
      "EDGEResponseDeleteConnectorPolymorphic": [],
      "EDGEResponseDeleteCustomPage": [],
      "EDGEResponseDeleteFirewall": [],
      "EDGEResponseDeleteFirewallFunctionInstance": [],
      "EDGEResponseDeleteFirewallRuleEngine": [],
      "EDGEResponseDeleteFunctionsDoc": [],
      "EDGEResponseDeleteNetworkListDetail": [],
      "EDGEResponseDeleteWAF": [],
      "EDGEResponseDeleteWAFRule": [],
      "EDGEResponseFirewall": [
        {
          "property": "data",
          "references": "EDGEFirewall"
        }
      ],
      "EDGEResponseFirewallFunctionInstance": [
        {
          "property": "data",
          "references": "EDGEFirewallFunctionInstance"
        }
      ],
      "EDGEResponseFirewallRuleEngine": [
        {
          "property": "data",
          "references": "EDGEFirewallRuleEngine"
        }
      ],
      "EDGEResponseFunctionsDoc": [
        {
          "property": "data",
          "references": "EDGEEdgeFunctions"
        }
      ],
      "EDGEResponseListCacheSetting": [
        {
          "property": "browser_cache",
          "references": "EDGEBrowserCacheModule"
        },
        {
          "property": "modules",
          "references": "EDGECacheSettingsModules"
        }
      ],
      "EDGEResponseNetworkListDetail": [
        {
          "property": "data",
          "references": "EDGENetworkListDetail"
        }
      ],
      "EDGEResponsePurgeInput": [
        {
          "property": "data",
          "references": "EDGEPurgeInput"
        }
      ],
      "EDGEResponseRetrieveApplication": [
        {
          "property": "data",
          "references": "EDGEApplication"
        }
      ],
      "EDGEResponseRetrieveApplicationDeviceGroups": [
        {
          "property": "data",
          "references": "EDGEApplicationDeviceGroups"
        }
      ],
      "EDGEResponseRetrieveApplicationFunctionInstance": [
        {
          "property": "data",
          "references": "EDGEApplicationFunctionInstance"
        }
      ],
      "EDGEResponseRetrieveApplicationRequestPhaseRuleEngine": [
        {
          "property": "data",
          "references": "EDGEApplicationRequestPhaseRuleEngine"
        }
      ],
      "EDGEResponseRetrieveCacheSetting": [
        {
          "property": "data",
          "references": "EDGECacheSetting"
        }
      ],
      "EDGEResponseRetrieveConnectorPolymorphic": [
        {
          "property": "data",
          "references": "EDGEConnectorPolymorphic"
        }
      ],
      "EDGEResponseRetrieveCustomPage": [
        {
          "property": "data",
          "references": "EDGECustomPage"
        }
      ],
      "EDGEResponseRetrieveFirewall": [
        {
          "property": "data",
          "references": "EDGEFirewall"
        }
      ],
      "EDGEResponseRetrieveFirewallFunctionInstance": [
        {
          "property": "data",
          "references": "EDGEFirewallFunctionInstance"
        }
      ],
      "EDGEResponseRetrieveFirewallRuleEngine": [
        {
          "property": "data",
          "references": "EDGEFirewallRuleEngine"
        }
      ],
      "EDGEResponseRetrieveFunctionsDoc": [
        {
          "property": "data",
          "references": "EDGEEdgeFunctions"
        }
      ],
      "EDGEResponseRetrieveNetworkListDetail": [
        {
          "property": "data",
          "references": "EDGENetworkListDetail"
        }
      ],
      "EDGEResponseRetrieveWAF": [
        {
          "property": "data",
          "references": "EDGEWAF"
        }
      ],
      "EDGEResponseRetrieveWAFRule": [
        {
          "property": "data",
          "references": "EDGEWAFRule"
        }
      ],
      "EDGEResponseRetrieveWorkload": [
        {
          "property": "data",
          "references": "EDGEWorkload"
        }
      ],
      "EDGEResponseRetrieveWorkloadDeployment": [
        {
          "property": "data",
          "references": "EDGEWorkloadDeployment"
        }
      ],
      "EDGEResponseWAF": [
        {
          "property": "data",
          "references": "EDGEWAF"
        }
      ],
      "EDGEResponseWAFRule": [
        {
          "property": "data",
          "references": "EDGEWAFRule"
        }
      ],
      "EDGEResponseWorkload": [
        {
          "property": "data",
          "references": "EDGEWorkload"
        }
      ],
      "EDGEResponseWorkloadDeployment": [
        {
          "property": "data",
          "references": "EDGEWorkloadDeployment"
        }
      ],
      "EDGERuleIdEnum": [],
      "EDGERulesetsEnum": [],
      "EDGERuntimeEnum": [],
      "EDGESensitivityEnum": [],
      "EDGEServerRoleEnum": [],
      "EDGEStateCacheModule": [],
      "EDGEStateCacheModuleRequest": [],
      "EDGETLSWorkload": [],
      "EDGETLSWorkloadRequest": [],
      "EDGEThreatEnum": [],
      "EDGEThresholdsConfigField": [
        {
          "property": "threat",
          "references": "EDGEThreatEnum"
        }
      ],
      "EDGEThresholdsConfigFieldRequest": [
        {
          "property": "threat",
          "references": "EDGEThreatEnum"
        }
      ],
      "EDGETieredCacheModule": [],
      "EDGETieredCacheModuleRequest": [],
      "EDGETopologyEnum": [],
      "EDGETransportPolicyEnum": [],
      "EDGEType15cEnum": [],
      "EDGEType528Enum": [],
      "EDGEType689Enum": [],
      "EDGETypeF11Enum": [],
      "EDGEVerificationEnum": [],
      "EDGEWAF": [
        {
          "property": "engine_settings",
          "references": "EDGEWAFEngineSettingsField"
        }
      ],
      "EDGEWAFEngineSettingsAttributesField": [],
      "EDGEWAFEngineSettingsAttributesFieldRequest": [],
      "EDGEWAFEngineSettingsField": [
        {
          "property": "attributes",
          "references": "EDGEWAFEngineSettingsAttributesField"
        }
      ],
      "EDGEWAFEngineSettingsFieldRequest": [
        {
          "property": "attributes",
          "references": "EDGEWAFEngineSettingsAttributesFieldRequest"
        }
      ],
      "EDGEWAFEngineSettingsFieldTypeEnum": [],
      "EDGEWAFExceptionGenericCondition": [
        {
          "property": "match",
          "references": "EDGEWAFExceptionGenericConditionMatchEnum"
        }
      ],
      "EDGEWAFExceptionGenericConditionMatchEnum": [],
      "EDGEWAFExceptionGenericConditionRequest": [
        {
          "property": "match",
          "references": "EDGEWAFExceptionGenericConditionMatchEnum"
        }
      ],
      "EDGEWAFExceptionPolymorphicCondition": [],
      "EDGEWAFExceptionPolymorphicConditionRequest": [],
      "EDGEWAFExceptionSpecificConditionOnName": [
        {
          "property": "match",
          "references": "EDGEWAFExceptionSpecificConditionOnNameMatchEnum"
        }
      ],
      "EDGEWAFExceptionSpecificConditionOnNameMatchEnum": [],
      "EDGEWAFExceptionSpecificConditionOnNameRequest": [
        {
          "property": "match",
          "references": "EDGEWAFExceptionSpecificConditionOnNameMatchEnum"
        }
      ],
      "EDGEWAFExceptionSpecificConditionOnValue": [
        {
          "property": "match",
          "references": "EDGEWAFExceptionSpecificConditionOnValueMatchEnum"
        }
      ],
      "EDGEWAFExceptionSpecificConditionOnValueMatchEnum": [],
      "EDGEWAFExceptionSpecificConditionOnValueRequest": [
        {
          "property": "match",
          "references": "EDGEWAFExceptionSpecificConditionOnValueMatchEnum"
        }
      ],
      "EDGEWAFRequest": [
        {
          "property": "engine_settings",
          "references": "EDGEWAFEngineSettingsFieldRequest"
        }
      ],
      "EDGEWAFRule": [],
      "EDGEWAFRuleOperatorEnum": [],
      "EDGEWAFRuleRequest": [],
      "EDGEWorkload": [
        {
          "property": "mtls",
          "references": "EDGEMTLS"
        }
      ],
      "EDGEWorkloadDeployment": [
        {
          "property": "strategy",
          "references": "EDGEDeploymentStrategy"
        }
      ],
      "EDGEWorkloadDeploymentRequest": [
        {
          "property": "strategy",
          "references": "EDGEDeploymentStrategyRequest"
        }
      ],
      "EDGEWorkloadRequest": [
        {
          "property": "mtls",
          "references": "EDGEMTLSRequest"
        }
      ],
      "METRICSAggregatedField": [],
      "METRICSAggregatedFieldRequest": [],
      "METRICSAggregationTypeEnum": [],
      "METRICSBaseQuery": [
        {
          "property": "order_direction",
          "references": "METRICSOrderDirectionEnum"
        }
      ],
      "METRICSBaseQueryRequest": [
        {
          "property": "order_direction",
          "references": "METRICSOrderDirectionEnum"
        }
      ],
      "METRICSComparisonTypeEnum": [],
      "METRICSDashboard": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSDashboardRequest": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSDataUnitEnum": [],
      "METRICSFolder": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSFolderRequest": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSJSONAPIErrorObject": [],
      "METRICSJSONAPIErrorResponse": [],
      "METRICSJSONAPIErrorSource": [],
      "METRICSLibraryReportRequest": [
        {
          "property": "type",
          "references": "METRICSTypeEnum"
        },
        {
          "property": "aggregation_type",
          "references": "METRICSAggregationTypeEnum"
        },
        {
          "property": "data_unit",
          "references": "METRICSDataUnitEnum"
        },
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        },
        {
          "property": "comparison_type",
          "references": "METRICSComparisonTypeEnum"
        }
      ],
      "METRICSOrder": [],
      "METRICSOrderDirectionEnum": [],
      "METRICSOrderRequest": [],
      "METRICSPaginatedResponseListDashboardList": [],
      "METRICSPaginatedResponseListFolderList": [],
      "METRICSPaginatedResponseListReportList": [],
      "METRICSPaginatedResponseListRowList": [],
      "METRICSPatchedDashboardRequest": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSPatchedFolderRequest": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSRecommendationRequest": [],
      "METRICSReport": [
        {
          "property": "type",
          "references": "METRICSTypeEnum"
        },
        {
          "property": "aggregation_type",
          "references": "METRICSAggregationTypeEnum"
        },
        {
          "property": "data_unit",
          "references": "METRICSDataUnitEnum"
        },
        {
          "property": "comparison_type",
          "references": "METRICSComparisonTypeEnum"
        }
      ],
      "METRICSReportRequest": [
        {
          "property": "type",
          "references": "METRICSTypeEnum"
        },
        {
          "property": "aggregation_type",
          "references": "METRICSAggregationTypeEnum"
        },
        {
          "property": "data_unit",
          "references": "METRICSDataUnitEnum"
        },
        {
          "property": "comparison_type",
          "references": "METRICSComparisonTypeEnum"
        }
      ],
      "METRICSResponseAsyncDashboard": [
        {
          "property": "data",
          "references": "METRICSDashboard"
        }
      ],
      "METRICSResponseAsyncDeleteDashboard": [],
      "METRICSResponseAsyncDeleteFolder": [],
      "METRICSResponseAsyncDeleteReport": [],
      "METRICSResponseAsyncDeleteRow": [],
      "METRICSResponseAsyncFolder": [
        {
          "property": "data",
          "references": "METRICSFolder"
        }
      ],
      "METRICSResponseAsyncOrder": [
        {
          "property": "data",
          "references": "METRICSOrder"
        }
      ],
      "METRICSResponseAsyncReport": [
        {
          "property": "data",
          "references": "METRICSReport"
        }
      ],
      "METRICSResponseAsyncRow": [
        {
          "property": "data",
          "references": "METRICSRow"
        }
      ],
      "METRICSResponseDashboard": [
        {
          "property": "data",
          "references": "METRICSDashboard"
        }
      ],
      "METRICSResponseDeleteDashboard": [],
      "METRICSResponseDeleteFolder": [],
      "METRICSResponseDeleteReport": [],
      "METRICSResponseDeleteRow": [],
      "METRICSResponseFolder": [
        {
          "property": "data",
          "references": "METRICSFolder"
        }
      ],
      "METRICSResponseListDashboard": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSResponseListFolder": [
        {
          "property": "scope",
          "references": "METRICSScopeEnum"
        }
      ],
      "METRICSResponseListReport": [
        {
          "property": "type",
          "references": "METRICSTypeEnum"
        },
        {
          "property": "aggregation_type",
          "references": "METRICSAggregationTypeEnum"
        },
        {
          "property": "data_unit",
          "references": "METRICSDataUnitEnum"
        },
        {
          "property": "comparison_type",
          "references": "METRICSComparisonTypeEnum"
        }
      ],
      "METRICSResponseListRow": [],
      "METRICSResponseOrder": [
        {
          "property": "data",
          "references": "METRICSOrder"
        }
      ],
      "METRICSResponseReport": [
        {
          "property": "data",
          "references": "METRICSReport"
        }
      ],
      "METRICSResponseRetrieveDashboard": [
        {
          "property": "data",
          "references": "METRICSDashboard"
        }
      ],
      "METRICSResponseRetrieveFolder": [
        {
          "property": "data",
          "references": "METRICSFolder"
        }
      ],
      "METRICSResponseRetrieveReport": [
        {
          "property": "data",
          "references": "METRICSReport"
        }
      ],
      "METRICSResponseRetrieveRow": [
        {
          "property": "data",
          "references": "METRICSRow"
        }
      ],
      "METRICSResponseRow": [
        {
          "property": "data",
          "references": "METRICSRow"
        }
      ],
      "METRICSRow": [],
      "METRICSRowRequest": [],
      "METRICSScopeEnum": [],
      "METRICSTypeEnum": [],
      "EDGESQLDatabaseRequest": [],
      "EDGESQLJSONAPIErrorObject": [],
      "EDGESQLJSONAPIErrorResponse": [],
      "EDGESQLJSONAPIErrorSource": [],
      "EDGESQLOpenAPISchema": [],
      "EDGESQLPaginatedOpenAPISchemaList": [],
      "EDGESQLResponseAsyncDeleteOpenAPISchema": [],
      "EDGESQLResponseAsyncOpenAPISchema": [
        {
          "property": "data",
          "references": "EDGESQLOpenAPISchema"
        }
      ],
      "EDGESQLResponseAsyncSQLResult": [
        {
          "property": "data",
          "references": "EDGESQLSQLResult"
        }
      ],
      "EDGESQLResponseDeleteOpenAPISchema": [],
      "EDGESQLResponseOpenAPISchema": [
        {
          "property": "data",
          "references": "EDGESQLOpenAPISchema"
        }
      ],
      "EDGESQLResponseRetrieveOpenAPISchema": [
        {
          "property": "data",
          "references": "EDGESQLOpenAPISchema"
        }
      ],
      "EDGESQLResponseSQLResult": [
        {
          "property": "data",
          "references": "EDGESQLSQLResult"
        }
      ],
      "EDGESQLSQLResult": [],
      "EDGESQLSQLStatementsRequest": [],
      "EDGESQLStatusEnum": [],
      "PAYMENTSCredit": [],
      "PAYMENTSCreditRequest": [],
      "PAYMENTSJSONAPIErrorObject": [],
      "PAYMENTSJSONAPIErrorResponse": [],
      "PAYMENTSJSONAPIErrorSource": [],
      "PAYMENTSPaginatedPaymentHistoryList": [],
      "PAYMENTSPaginatedResponsePaymentMethodList": [],
      "PAYMENTSPatchedPartialUpdateRequest": [],
      "PAYMENTSPaymentHistory": [],
      "PAYMENTSPaymentMethod": [],
      "PAYMENTSPaymentMethodRequest": [],
      "PAYMENTSResponseAsyncCredit": [
        {
          "property": "data",
          "references": "PAYMENTSCredit"
        }
      ],
      "PAYMENTSResponseAsyncDeletePaymentMethod": [],
      "PAYMENTSResponseAsyncPaymentMethod": [
        {
          "property": "data",
          "references": "PAYMENTSPaymentMethod"
        }
      ],
      "PAYMENTSResponseCredit": [
        {
          "property": "data",
          "references": "PAYMENTSCredit"
        }
      ],
      "PAYMENTSResponseDeletePaymentMethod": [],
      "PAYMENTSResponsePaymentMethod": [
        {
          "property": "data",
          "references": "PAYMENTSPaymentMethod"
        }
      ],
      "ACCOUNTSAccount": [],
      "ACCOUNTSAccountInfo": [],
      "ACCOUNTSAccountRequest": [],
      "ACCOUNTSBrand": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSBrandRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSCreateAccountRequest": [],
      "ACCOUNTSCreateBrandRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSCreateOrganizationRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSCreateResellerRequest": [
        {
          "property": "currency_iso_code",
          "references": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSCreateWorkspaceRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSCurrencyIsoCodeEnum": [],
      "ACCOUNTSJSONAPIErrorObject": [],
      "ACCOUNTSJSONAPIErrorResponse": [],
      "ACCOUNTSJSONAPIErrorSource": [],
      "ACCOUNTSOrganization": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSOrganizationRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSPaginatedResponseListAccountList": [],
      "ACCOUNTSPatchedAccountRequest": [],
      "ACCOUNTSPatchedBrandRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSPatchedOrganizationRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSPatchedResellerRequest": [
        {
          "property": "currency_iso_code",
          "references": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSPatchedWorkspaceRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSReasonEnum": [],
      "ACCOUNTSReseller": [
        {
          "property": "currency_iso_code",
          "references": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSResellerRequest": [
        {
          "property": "currency_iso_code",
          "references": "ACCOUNTSCurrencyIsoCodeEnum"
        },
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSResponseAccount": [
        {
          "property": "data",
          "references": "ACCOUNTSAccount"
        }
      ],
      "ACCOUNTSResponseAccountInfo": [
        {
          "property": "data",
          "references": "ACCOUNTSAccountInfo"
        }
      ],
      "ACCOUNTSResponseAsyncAccount": [
        {
          "property": "data",
          "references": "ACCOUNTSAccount"
        }
      ],
      "ACCOUNTSResponseAsyncAccountInfo": [
        {
          "property": "data",
          "references": "ACCOUNTSAccountInfo"
        }
      ],
      "ACCOUNTSResponseListAccount": [],
      "ACCOUNTSResponseRetrieveAccount": [
        {
          "property": "data",
          "references": "ACCOUNTSAccount"
        }
      ],
      "ACCOUNTSResponseRetrieveAccountInfo": [
        {
          "property": "data",
          "references": "ACCOUNTSAccountInfo"
        }
      ],
      "ACCOUNTSStatusEnum": [],
      "ACCOUNTSTypeEnum": [],
      "ACCOUNTSWorkspace": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "ACCOUNTSWorkspaceRequest": [
        {
          "property": "type",
          "references": "ACCOUNTSTypeEnum"
        }
      ],
      "STORAGEBucket": [
        {
          "property": "edge_access",
          "references": "STORAGEEdgeAccessEnum"
        }
      ],
      "STORAGEBucketCreate": [
        {
          "property": "edge_access",
          "references": "STORAGEEdgeAccessEnum"
        }
      ],
      "STORAGEBucketCreateRequest": [
        {
          "property": "edge_access",
          "references": "STORAGEEdgeAccessEnum"
        }
      ],
      "STORAGEBucketObject": [],
      "STORAGECapabilitiesEnum": [],
      "STORAGECredential": [],
      "STORAGECredentialCreateRequest": [],
      "STORAGEDefaultErrorResponse": [],
      "STORAGEEdgeAccessEnum": [],
      "STORAGEJSONAPIErrorObject": [],
      "STORAGEJSONAPIErrorResponse": [],
      "STORAGEJSONAPIErrorSource": [],
      "STORAGEObjectResponseAsyncData": [],
      "STORAGEObjectResponseData": [],
      "STORAGEPaginatedBucketList": [],
      "STORAGEPaginatedResponseListCredentialList": [],
      "STORAGEPatchedBucketRequest": [
        {
          "property": "edge_access",
          "references": "STORAGEEdgeAccessEnum"
        }
      ],
      "STORAGEResponseAsyncBucketCreate": [
        {
          "property": "data",
          "references": "STORAGEBucketCreate"
        }
      ],
      "STORAGEResponseAsyncCredential": [
        {
          "property": "data",
          "references": "STORAGECredential"
        }
      ],
      "STORAGEResponseAsyncDeleteBucketCreate": [],
      "STORAGEResponseAsyncDeleteBucketObject": [],
      "STORAGEResponseAsyncDeleteCredential": [],
      "STORAGEResponseBadRequestBucket": [],
      "STORAGEResponseBadRequestCredential": [],
      "STORAGEResponseBucketCreate": [
        {
          "property": "data",
          "references": "STORAGEBucketCreate"
        }
      ],
      "STORAGEResponseBucketObject": [],
      "STORAGEResponseCredential": [
        {
          "property": "data",
          "references": "STORAGECredential"
        }
      ],
      "STORAGEResponseDeleteBucketCreate": [],
      "STORAGEResponseDeleteBucketObject": [],
      "STORAGEResponseListCredential": [],
      "STORAGEResponseRetrieveBucket": [
        {
          "property": "data",
          "references": "STORAGEBucket"
        }
      ],
      "STORAGEResponseRetrieveCredential": [
        {
          "property": "data",
          "references": "STORAGECredential"
        }
      ],
      "STORAGESuccessObjectOperation": [
        {
          "property": "data",
          "references": "STORAGEObjectResponseData"
        }
      ],
      "STORAGESuccessObjectOperationAsync": [
        {
          "property": "data",
          "references": "STORAGEObjectResponseAsyncData"
        }
      ],
      "DATAAWSKinesisFirehoseEndpoint": [],
      "DATAAWSKinesisFirehoseEndpointRequest": [],
      "DATAAzureBlobStorageEndpoint": [],
      "DATAAzureBlobStorageEndpointRequest": [],
      "DATAAzureMonitorEndpoint": [],
      "DATAAzureMonitorEndpointRequest": [],
      "DATABigQueryEndpoint": [],
      "DATABigQueryEndpointRequest": [],
      "DATAContentTypeEnum": [],
      "DATADataSourceEnum": [],
      "DATADataStream": [],
      "DATADataStreamRequest": [],
      "DATADatadogEndpoint": [],
      "DATADatadogEndpointRequest": [],
      "DATAElasticsearchEndpoint": [],
      "DATAElasticsearchEndpointRequest": [],
      "DATAHttpPostEndpoint": [],
      "DATAHttpPostEndpointRequest": [],
      "DATAInputDataSource": [
        {
          "property": "data_source",
          "references": "DATADataSourceEnum"
        }
      ],
      "DATAInputDataSourceAttributes": [
        {
          "property": "type",
          "references": "DATAInputDataSourceAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATAInputDataSource"
        }
      ],
      "DATAInputDataSourceAttributesRequest": [
        {
          "property": "type",
          "references": "DATAInputDataSourceAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATAInputDataSourceRequest"
        }
      ],
      "DATAInputDataSourceAttributesTypeEnum": [],
      "DATAInputDataSourceRequest": [
        {
          "property": "data_source",
          "references": "DATADataSourceEnum"
        }
      ],
      "DATAInputPolymorphic": [],
      "DATAInputPolymorphicInputDataSourceAttributes": [],
      "DATAInputPolymorphicInputDataSourceAttributesRequest": [],
      "DATAInputPolymorphicRequest": [],
      "DATAInputPolymorphicShared": [],
      "DATAJSONAPIErrorObject": [],
      "DATAJSONAPIErrorResponse": [],
      "DATAJSONAPIErrorSource": [],
      "DATAKafkaEndpoint": [],
      "DATAKafkaEndpointRequest": [],
      "DATAOutput": [
        {
          "property": "type",
          "references": "DATAOutputTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATAOutputPolymorphic"
        }
      ],
      "DATAOutputPolymorphic": [],
      "DATAOutputPolymorphicRequest": [],
      "DATAOutputRequest": [
        {
          "property": "type",
          "references": "DATAOutputTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATAOutputPolymorphicRequest"
        }
      ],
      "DATAOutputTypeEnum": [],
      "DATAPaginatedResponseListDataSourceList": [],
      "DATAPaginatedResponseListDataStreamList": [],
      "DATAPaginatedResponseListTemplateList": [],
      "DATAPatchedDataStreamRequest": [],
      "DATAPatchedTemplateRequest": [],
      "DATAQRadarEndpoint": [],
      "DATAQRadarEndpointRequest": [],
      "DATAResponseAsyncDataStream": [
        {
          "property": "data",
          "references": "DATADataStream"
        }
      ],
      "DATAResponseAsyncDeleteDataStream": [],
      "DATAResponseAsyncDeleteTemplate": [],
      "DATAResponseAsyncTemplate": [
        {
          "property": "data",
          "references": "DATATemplate"
        }
      ],
      "DATAResponseDataStream": [
        {
          "property": "data",
          "references": "DATADataStream"
        }
      ],
      "DATAResponseDeleteDataStream": [],
      "DATAResponseDeleteTemplate": [],
      "DATAResponseListDataSource": [],
      "DATAResponseListDataStream": [],
      "DATAResponseListTemplate": [],
      "DATAResponseRetrieveDataStream": [
        {
          "property": "data",
          "references": "DATADataStream"
        }
      ],
      "DATAResponseRetrieveTemplate": [
        {
          "property": "data",
          "references": "DATATemplate"
        }
      ],
      "DATAResponseTemplate": [
        {
          "property": "data",
          "references": "DATATemplate"
        }
      ],
      "DATAS3Endpoint": [
        {
          "property": "content_type",
          "references": "DATAContentTypeEnum"
        }
      ],
      "DATAS3EndpointRequest": [
        {
          "property": "content_type",
          "references": "DATAContentTypeEnum"
        }
      ],
      "DATASplunkEndpoint": [],
      "DATASplunkEndpointRequest": [],
      "DATATemplate": [],
      "DATATemplateRequest": [],
      "DATATransformFilterWorkloads": [],
      "DATATransformFilterWorkloadsAttributes": [
        {
          "property": "type",
          "references": "DATATransformFilterWorkloadsAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATATransformFilterWorkloads"
        }
      ],
      "DATATransformFilterWorkloadsAttributesRequest": [
        {
          "property": "type",
          "references": "DATATransformFilterWorkloadsAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATATransformFilterWorkloadsRequest"
        }
      ],
      "DATATransformFilterWorkloadsAttributesTypeEnum": [],
      "DATATransformFilterWorkloadsRequest": [],
      "DATATransformPolymorphic": [],
      "DATATransformPolymorphicRequest": [],
      "DATATransformPolymorphicShared": [],
      "DATATransformPolymorphicTransformFilterWorkloadsAttributes": [],
      "DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest": [],
      "DATATransformPolymorphicTransformRenderTemplateAttributes": [],
      "DATATransformPolymorphicTransformRenderTemplateAttributesRequest": [],
      "DATATransformPolymorphicTransformSamplingAttributes": [],
      "DATATransformPolymorphicTransformSamplingAttributesRequest": [],
      "DATATransformRenderTemplate": [],
      "DATATransformRenderTemplateAttributes": [
        {
          "property": "type",
          "references": "DATATransformRenderTemplateAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATATransformRenderTemplate"
        }
      ],
      "DATATransformRenderTemplateAttributesRequest": [
        {
          "property": "type",
          "references": "DATATransformRenderTemplateAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATATransformRenderTemplateRequest"
        }
      ],
      "DATATransformRenderTemplateAttributesTypeEnum": [],
      "DATATransformRenderTemplateRequest": [],
      "DATATransformSampling": [],
      "DATATransformSamplingAttributes": [
        {
          "property": "type",
          "references": "DATATransformSamplingAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATATransformSampling"
        }
      ],
      "DATATransformSamplingAttributesRequest": [
        {
          "property": "type",
          "references": "DATATransformSamplingAttributesTypeEnum"
        },
        {
          "property": "attributes",
          "references": "DATATransformSamplingRequest"
        }
      ],
      "DATATransformSamplingAttributesTypeEnum": [],
      "DATATransformSamplingRequest": [],
      "DATAType4f5Enum": [],
      "ORCHESTRATORBlankEnum": [],
      "ORCHESTRATORContent": [],
      "ORCHESTRATORContentRequest": [],
      "ORCHESTRATORDefaultErrorResponse": [],
      "ORCHESTRATORNodeGroups": [],
      "ORCHESTRATORNodeGroupsById": [],
      "ORCHESTRATORNodeGroupsByIdRequest": [],
      "ORCHESTRATORNodeGroupsRequest": [],
      "ORCHESTRATORNodeServiceBind": [],
      "ORCHESTRATORNodeServices": [],
      "ORCHESTRATORNodeServicesRequest": [],
      "ORCHESTRATORNodes": [
        {
          "property": "status",
          "references": "ORCHESTRATORStatusEnum"
        }
      ],
      "ORCHESTRATORNodesRequest": [
        {
          "property": "status",
          "references": "ORCHESTRATORStatusEnum"
        }
      ],
      "ORCHESTRATORPaginatedNodeGroupsList": [],
      "ORCHESTRATORPaginatedResponseListNodeGroupsByIdList": [],
      "ORCHESTRATORPaginatedResponseListNodeServicesList": [],
      "ORCHESTRATORPaginatedResponseListNodesList": [],
      "ORCHESTRATORPaginatedResponseListServicesList": [],
      "ORCHESTRATORPaginatedServiceResourceList": [],
      "ORCHESTRATORPatchedNodesRequest": [
        {
          "property": "status",
          "references": "ORCHESTRATORStatusEnum"
        }
      ],
      "ORCHESTRATORPatchedServicesRequest": [],
      "ORCHESTRATORResponseBadRequestNodeGroupsById": [],
      "ORCHESTRATORResponseBadRequestNodeServiceBind": [],
      "ORCHESTRATORResponseBadRequestNodeServices": [],
      "ORCHESTRATORResponseBadRequestNodes": [],
      "ORCHESTRATORResponseBadRequestServices": [],
      "ORCHESTRATORResponseDeleteNodeServiceBind": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        }
      ],
      "ORCHESTRATORResponseDeleteNodes": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        }
      ],
      "ORCHESTRATORResponseDeleteServices": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        }
      ],
      "ORCHESTRATORResponseListNodeGroupsById": [],
      "ORCHESTRATORResponseListNodeServices": [],
      "ORCHESTRATORResponseListNodes": [
        {
          "property": "status",
          "references": "ORCHESTRATORStatusEnum"
        }
      ],
      "ORCHESTRATORResponseListServices": [],
      "ORCHESTRATORResponseNodeGroupsById": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        },
        {
          "property": "data",
          "references": "ORCHESTRATORNodeGroupsById"
        }
      ],
      "ORCHESTRATORResponseNodeServices": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        },
        {
          "property": "data",
          "references": "ORCHESTRATORNodeServices"
        }
      ],
      "ORCHESTRATORResponseNodes": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        },
        {
          "property": "data",
          "references": "ORCHESTRATORNodes"
        }
      ],
      "ORCHESTRATORResponseRetrieveNodeServiceBind": [
        {
          "property": "data",
          "references": "ORCHESTRATORNodeServiceBind"
        }
      ],
      "ORCHESTRATORResponseRetrieveNodes": [
        {
          "property": "data",
          "references": "ORCHESTRATORNodes"
        }
      ],
      "ORCHESTRATORResponseRetrieveServices": [
        {
          "property": "data",
          "references": "ORCHESTRATORServices"
        }
      ],
      "ORCHESTRATORResponseServices": [
        {
          "property": "state",
          "references": "ORCHESTRATORStateEnum"
        },
        {
          "property": "data",
          "references": "ORCHESTRATORServices"
        }
      ],
      "ORCHESTRATORServiceResource": [],
      "ORCHESTRATORServiceResourceId": [],
      "ORCHESTRATORServiceResourceIdRequest": [],
      "ORCHESTRATORServiceResourceRequest": [],
      "ORCHESTRATORServices": [],
      "ORCHESTRATORServicesRequest": [],
      "ORCHESTRATORStateEnum": [],
      "ORCHESTRATORStatusEnum": [],
      "ORCHESTRATORTriggerEnum": [],
      "VCSBuildContextField": [],
      "VCSBuildContextFieldRequest": [],
      "VCSContinuousDeployment": [],
      "VCSContinuousDeploymentRequest": [],
      "VCSExecution": [],
      "VCSExecutionScript": [],
      "VCSExecutionScriptRequest": [],
      "VCSExecutor": [],
      "VCSIntegration": [
        {
          "property": "provider",
          "references": "VCSPlatform"
        }
      ],
      "VCSJSONAPIErrorObject": [],
      "VCSJSONAPIErrorResponse": [],
      "VCSJSONAPIErrorSource": [],
      "VCSPaginatedResponseListContinuousDeploymentList": [],
      "VCSPaginatedResponseListExecutionList": [],
      "VCSPaginatedResponseListExecutionScriptList": [],
      "VCSPaginatedResponseListIntegrationList": [],
      "VCSPaginatedResponseListPlatformList": [],
      "VCSPaginatedResponseListRepositoryList": [],
      "VCSPatchedContinuousDeploymentRequest": [],
      "VCSPlatform": [],
      "VCSResponseAsyncContinuousDeployment": [
        {
          "property": "data",
          "references": "VCSContinuousDeployment"
        }
      ],
      "VCSResponseAsyncDeleteContinuousDeployment": [],
      "VCSResponseAsyncDeleteIntegration": [],
      "VCSResponseAsyncExecution": [
        {
          "property": "data",
          "references": "VCSExecution"
        }
      ],
      "VCSResponseAsyncExecutor": [
        {
          "property": "data",
          "references": "VCSExecutor"
        }
      ],
      "VCSResponseContinuousDeployment": [
        {
          "property": "data",
          "references": "VCSContinuousDeployment"
        }
      ],
      "VCSResponseDeleteContinuousDeployment": [],
      "VCSResponseDeleteIntegration": [],
      "VCSResponseExecution": [
        {
          "property": "data",
          "references": "VCSExecution"
        }
      ],
      "VCSResponseExecutor": [
        {
          "property": "data",
          "references": "VCSExecutor"
        }
      ],
      "VCSResponseListContinuousDeployment": [],
      "VCSResponseListExecution": [],
      "VCSResponseListExecutionScript": [],
      "VCSResponseListIntegration": [
        {
          "property": "provider",
          "references": "VCSPlatform"
        }
      ],
      "VCSResponseListPlatform": [],
      "VCSResponseListRepository": [],
      "VCSResponseRetrieveContinuousDeployment": [
        {
          "property": "data",
          "references": "VCSContinuousDeployment"
        }
      ],
      "VCSResponseRetrieveExecutionScript": [
        {
          "property": "data",
          "references": "VCSExecutionScript"
        }
      ],
      "VCSResponseRetrieveExecutor": [
        {
          "property": "data",
          "references": "VCSExecutor"
        }
      ],
      "VCSResponseRetrieveIntegration": [
        {
          "property": "data",
          "references": "VCSIntegration"
        }
      ],
      "DNSAlgType": [],
      "DNSAlgTypeRequest": [],
      "DNSDNSSEC": [],
      "DNSDNSSECRequest": [],
      "DNSDelegationSigner": [
        {
          "property": "algorithm_type",
          "references": "DNSAlgType"
        },
        {
          "property": "digest_type",
          "references": "DNSAlgType"
        }
      ],
      "DNSDelegationSignerRequest": [
        {
          "property": "algorithm_type",
          "references": "DNSAlgTypeRequest"
        },
        {
          "property": "digest_type",
          "references": "DNSAlgTypeRequest"
        }
      ],
      "DNSJSONAPIErrorObject": [],
      "DNSJSONAPIErrorResponse": [],
      "DNSJSONAPIErrorSource": [],
      "DNSPaginatedRecordList": [],
      "DNSPaginatedZoneList": [],
      "DNSPatchedDNSSECRequest": [],
      "DNSPatchedRecordRequest": [
        {
          "property": "type",
          "references": "DNSTypeEnum"
        }
      ],
      "DNSPatchedUpdateZoneRequest": [],
      "DNSPolicyEnum": [],
      "DNSRecord": [
        {
          "property": "type",
          "references": "DNSTypeEnum"
        }
      ],
      "DNSRecordRequest": [
        {
          "property": "type",
          "references": "DNSTypeEnum"
        }
      ],
      "DNSResponseAsyncDNSSEC": [
        {
          "property": "data",
          "references": "DNSDNSSEC"
        }
      ],
      "DNSResponseAsyncDeleteRecord": [],
      "DNSResponseAsyncDeleteZone": [],
      "DNSResponseAsyncRecord": [
        {
          "property": "data",
          "references": "DNSRecord"
        }
      ],
      "DNSResponseAsyncZone": [
        {
          "property": "data",
          "references": "DNSZone"
        }
      ],
      "DNSResponseDNSSEC": [
        {
          "property": "data",
          "references": "DNSDNSSEC"
        }
      ],
      "DNSResponseDeleteRecord": [],
      "DNSResponseDeleteZone": [],
      "DNSResponseRecord": [
        {
          "property": "data",
          "references": "DNSRecord"
        }
      ],
      "DNSResponseRetrieveDNSSEC": [
        {
          "property": "data",
          "references": "DNSDNSSEC"
        }
      ],
      "DNSResponseRetrieveRecord": [
        {
          "property": "data",
          "references": "DNSRecord"
        }
      ],
      "DNSResponseRetrieveZone": [
        {
          "property": "data",
          "references": "DNSZone"
        }
      ],
      "DNSResponseZone": [
        {
          "property": "data",
          "references": "DNSZone"
        }
      ],
      "DNSStatusEnum": [],
      "DNSTypeEnum": [],
      "DNSUpdateZoneRequest": [],
      "DNSZone": [],
      "DNSZoneRequest": [],
      "BILLINGJSONAPIErrorObject": [],
      "BILLINGJSONAPIErrorResponse": [],
      "BILLINGJSONAPIErrorSource": [],
      "TLSAuthorityEnum": [],
      "TLSCertificate": [],
      "TLSCertificateRequest": [],
      "TLSCertificateRequestRequest": [
        {
          "property": "challenge",
          "references": "TLSChallengeEnum"
        },
        {
          "property": "authority",
          "references": "TLSAuthorityEnum"
        }
      ],
      "TLSCertificateRevocationList": [],
      "TLSCertificateRevocationListRequest": [],
      "TLSCertificateSigningRequestRequest": [],
      "TLSChallengeEnum": [],
      "TLSDefaultErrorResponse": [],
      "TLSJSONAPIErrorObject": [],
      "TLSJSONAPIErrorResponse": [],
      "TLSJSONAPIErrorSource": [],
      "TLSKeyAlgorithmEnum": [],
      "TLSNullEnum": [],
      "TLSPaginatedCertificateList": [],
      "TLSPaginatedCertificateRevocationListList": [],
      "TLSPatchedCertificateRequest": [],
      "TLSPatchedCertificateRevocationListRequest": [],
      "TLSResponseAsyncCertificate": [
        {
          "property": "data",
          "references": "TLSCertificate"
        }
      ],
      "TLSResponseAsyncCertificateRevocationList": [
        {
          "property": "data",
          "references": "TLSCertificateRevocationList"
        }
      ],
      "TLSResponseAsyncDeleteCertificate": [],
      "TLSResponseAsyncDeleteCertificateRevocationList": [],
      "TLSResponseBadRequestCertificate": [],
      "TLSResponseCertificate": [
        {
          "property": "data",
          "references": "TLSCertificate"
        }
      ],
      "TLSResponseCertificateRevocationList": [
        {
          "property": "data",
          "references": "TLSCertificateRevocationList"
        }
      ],
      "TLSResponseDeleteCertificate": [],
      "TLSResponseDeleteCertificateRevocationList": [],
      "TLSResponseRetrieveCertificate": [
        {
          "property": "data",
          "references": "TLSCertificate"
        }
      ],
      "TLSResponseRetrieveCertificateRevocationList": [
        {
          "property": "data",
          "references": "TLSCertificateRevocationList"
        }
      ],
      "TLSStatusEnum": [],
      "TLSTypeEnum": [],
      "MARKETPLACEDefaultErrorResponse": [],
      "MARKETPLACEPublisher": [],
      "MARKETPLACEPublisherRequest": [],
      "MARKETPLACEResponseBadRequestPublisher": [],
      "MARKETPLACEResponsePublisher": [
        {
          "property": "state",
          "references": "MARKETPLACEStateEnum"
        },
        {
          "property": "data",
          "references": "MARKETPLACEPublisher"
        }
      ],
      "MARKETPLACEResponseRetrievePublisher": [
        {
          "property": "data",
          "references": "MARKETPLACEPublisher"
        }
      ],
      "MARKETPLACEStateEnum": [],
      "IDENTITYDefaultErrorResponse": [],
      "IDENTITYFavorite": [],
      "IDENTITYFavoriteRequest": [],
      "IDENTITYGrant": [],
      "IDENTITYGrantRequest": [],
      "IDENTITYGroup": [],
      "IDENTITYGroupMembers": [],
      "IDENTITYGroupMembersRequest": [],
      "IDENTITYGroupRequest": [],
      "IDENTITYPaginatedResponseListFavoriteList": [],
      "IDENTITYPaginatedResponseListGrantList": [],
      "IDENTITYPaginatedResponseListGroupList": [],
      "IDENTITYPaginatedResponseListServiceTokenList": [],
      "IDENTITYPaginatedResponseListUserList": [],
      "IDENTITYPatchedGrantRequest": [],
      "IDENTITYPatchedGroupRequest": [],
      "IDENTITYPatchedServiceTokenUpdateRequest": [],
      "IDENTITYPatchedUserRequest": [],
      "IDENTITYResponseBadRequestFavorite": [],
      "IDENTITYResponseBadRequestGrant": [],
      "IDENTITYResponseBadRequestGroup": [],
      "IDENTITYResponseBadRequestGroupMembers": [],
      "IDENTITYResponseBadRequestServiceToken": [],
      "IDENTITYResponseBadRequestServiceTokenRenew": [],
      "IDENTITYResponseBadRequestUser": [],
      "IDENTITYResponseBadRequestUserInfo": [],
      "IDENTITYResponseDeleteFavorite": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        }
      ],
      "IDENTITYResponseDeleteGrant": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        }
      ],
      "IDENTITYResponseDeleteGroup": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        }
      ],
      "IDENTITYResponseDeleteServiceToken": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        }
      ],
      "IDENTITYResponseDeleteUser": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        }
      ],
      "IDENTITYResponseFavorite": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYFavorite"
        }
      ],
      "IDENTITYResponseGrant": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYGrant"
        }
      ],
      "IDENTITYResponseGroup": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYGroup"
        }
      ],
      "IDENTITYResponseGroupMembers": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYGroupMembers"
        }
      ],
      "IDENTITYResponseListFavorite": [],
      "IDENTITYResponseListGrant": [],
      "IDENTITYResponseListGroup": [],
      "IDENTITYResponseListServiceToken": [],
      "IDENTITYResponseListUser": [],
      "IDENTITYResponseRetrieveGrant": [
        {
          "property": "data",
          "references": "IDENTITYGrant"
        }
      ],
      "IDENTITYResponseRetrieveGroup": [
        {
          "property": "data",
          "references": "IDENTITYGroup"
        }
      ],
      "IDENTITYResponseRetrieveGroupMembers": [
        {
          "property": "data",
          "references": "IDENTITYGroupMembers"
        }
      ],
      "IDENTITYResponseRetrieveServiceToken": [
        {
          "property": "data",
          "references": "IDENTITYServiceToken"
        }
      ],
      "IDENTITYResponseRetrieveUser": [
        {
          "property": "data",
          "references": "IDENTITYUser"
        }
      ],
      "IDENTITYResponseRetrieveUserInfo": [
        {
          "property": "data",
          "references": "IDENTITYUserInfo"
        }
      ],
      "IDENTITYResponseServiceToken": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYServiceToken"
        }
      ],
      "IDENTITYResponseServiceTokenCreate": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYServiceTokenCreate"
        }
      ],
      "IDENTITYResponseServiceTokenRenew": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYServiceTokenRenew"
        }
      ],
      "IDENTITYResponseUser": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYUser"
        }
      ],
      "IDENTITYResponseUserInfo": [
        {
          "property": "state",
          "references": "IDENTITYStateEnum"
        },
        {
          "property": "data",
          "references": "IDENTITYUserInfo"
        }
      ],
      "IDENTITYServiceToken": [],
      "IDENTITYServiceTokenCreate": [],
      "IDENTITYServiceTokenCreateRequest": [],
      "IDENTITYServiceTokenRenew": [],
      "IDENTITYServiceTokenRenewRequest": [],
      "IDENTITYServiceTokenUpdateRequest": [],
      "IDENTITYStateEnum": [],
      "IDENTITYUser": [],
      "IDENTITYUserInfo": [],
      "IDENTITYUserRequest": []
    },
    "dependencies": {
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsShared": [
        {
          "type": "dependency",
          "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
        }
      ],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsShared": [
        {
          "type": "dependency",
          "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
        }
      ],
      "EDGEFirewallBehaviorsShared": [
        {
          "type": "dependency",
          "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
        }
      ],
      "METRICSComparisonTypeEnum": [
        {
          "type": "dependency",
          "description": "* `inverse` - The lower the value, the better the result or performance.\n* `neutral` - There is no general rule to say whether a value is good or bad, as it depends on the context.\n* `regular` - The higher the value, the better the result or performance."
        }
      ]
    },
    "conditionalDependencies": {}
  },
  "constraints": {
    "fieldValidation": {
      "USERSDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "AUTHDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "AUTHEffectEnum": {},
      "AUTHJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "AUTHJSONAPIErrorResponse": {},
      "AUTHJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "AUTHLockoutPolicy": {
        "max_attempts": {
          "minimum": 1
        }
      },
      "AUTHLockoutPolicyRequest": {
        "max_attempts": {
          "minimum": 1
        }
      },
      "AUTHLoginRequest": {
        "email": {
          "minLength": 1
        },
        "password": {
          "minLength": 1
        }
      },
      "AUTHLoginResponse": {},
      "AUTHMFAToken": {},
      "AUTHPaginatedPolicyList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "AUTHPaginatedTOTPDeviceListList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "AUTHPatchedPolicyRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "AUTHPolicy": {
        "name": {
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        }
      },
      "AUTHPolicyRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "AUTHPolicyRule": {
        "name": {
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "AUTHPolicyRuleCondition": {
        "ip_address": {
          "minItems": 1
        }
      },
      "AUTHPolicyRuleConditionRequest": {
        "ip_address": {
          "minItems": 1
        }
      },
      "AUTHPolicyRuleRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "resource": {
          "minLength": 1
        }
      },
      "AUTHResponseAsyncDeletePolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncDeleteTOTPDeviceCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncLockoutPolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncLogin": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncPolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncSessionTimeoutPolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncTOTPDeviceCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncToken": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseAsyncTokenPair": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseBadRequestPolicy": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "AUTHResponseDeletePolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseDeleteTOTPDeviceCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseLockoutPolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseLogin": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponsePolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseRetrieveLockoutPolicy": {},
      "AUTHResponseRetrievePolicy": {},
      "AUTHResponseRetrieveSessionTimeoutPolicy": {},
      "AUTHResponseSessionTimeoutPolicy": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseTOTPDeviceCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseToken": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHResponseTokenPair": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "AUTHSessionTimeoutPolicy": {
        "max_idle_time": {
          "minimum": 1,
          "maximum": 1440
        },
        "max_session_time": {
          "minimum": 5,
          "maximum": 21600
        }
      },
      "AUTHSessionTimeoutPolicyRequest": {
        "max_idle_time": {
          "minimum": 1,
          "maximum": 1440
        },
        "max_session_time": {
          "minimum": 5,
          "maximum": 21600
        }
      },
      "AUTHStateExecutedResponse": {},
      "AUTHStatePendingResponse": {},
      "AUTHTOTPDeviceCreate": {
        "url": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "AUTHTOTPDeviceList": {
        "name": {
          "maxLength": 64
        }
      },
      "AUTHTOTPVerificationRequest": {
        "code": {
          "minLength": 1
        }
      },
      "AUTHToken": {
        "access_token": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "AUTHTokenPair": {},
      "AUTHTokenRequest": {},
      "AUTHuser_login_method_response": {},
      "EDGEAWS4HMAC": {},
      "EDGEAWS4HMACAttributes": {
        "region": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "service": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "access_key": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "secret_key": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEAWS4HMACAttributesRequest": {
        "region": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "service": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "access_key": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "secret_key": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEAWS4HMACRequest": {},
      "EDGEAWS4HMACTypeEnum": {},
      "EDGEAddress": {
        "address": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "http_port": {
          "minimum": 1,
          "maximum": 65535
        },
        "https_port": {
          "minimum": 1,
          "maximum": 65535
        }
      },
      "EDGEAddressLoadBalancerModule": {
        "weight": {
          "minimum": 1,
          "maximum": 100
        }
      },
      "EDGEAddressLoadBalancerModuleRequest": {
        "weight": {
          "minimum": 1,
          "maximum": 100
        }
      },
      "EDGEAddressModules": {},
      "EDGEAddressModulesRequest": {},
      "EDGEAddressRequest": {
        "address": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "http_port": {
          "minimum": 1,
          "maximum": 65535
        },
        "https_port": {
          "minimum": 1,
          "maximum": 65535
        }
      },
      "EDGEApplication": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEApplicationAcceleratorModule": {},
      "EDGEApplicationAcceleratorModuleRequest": {},
      "EDGEApplicationDeviceGroups": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "user_agent": {
          "minLength": 1,
          "maxLength": 512,
          "pattern": ".*"
        }
      },
      "EDGEApplicationDeviceGroupsRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "user_agent": {
          "minLength": 1,
          "maxLength": 512,
          "pattern": ".*"
        }
      },
      "EDGEApplicationFunctionInstance": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "function": {
          "minimum": 1,
          "maximum": 9223372036854776000
        },
        "last_editor": {
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEApplicationFunctionInstanceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "function": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationModules": {},
      "EDGEApplicationModulesRequest": {},
      "EDGEApplicationRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRequestPhaseRuleEngine": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        },
        "order": {
          "minimum": 0,
          "maximum": 199
        },
        "last_editor": {
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRequestPhaseRuleEngineOrderRequest": {},
      "EDGEApplicationRequestPhaseRuleEngineRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationResponsePhaseRuleEngine": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        },
        "order": {
          "minimum": 0,
          "maximum": 199
        },
        "last_editor": {
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationResponsePhaseRuleEngineOrderRequest": {},
      "EDGEApplicationResponsePhaseRuleEngineRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddHeader": {},
      "EDGEApplicationRuleEngineAddHeaderAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddHeaderAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddHeaderRequest": {},
      "EDGEApplicationRuleEngineAddHeaderTypeEnum": {},
      "EDGEApplicationRuleEngineAddRequestCookie": {},
      "EDGEApplicationRuleEngineAddRequestCookieAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddRequestCookieAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddRequestCookieRequest": {},
      "EDGEApplicationRuleEngineAddRequestCookieTypeEnum": {},
      "EDGEApplicationRuleEngineAddResponseHeader": {},
      "EDGEApplicationRuleEngineAddResponseHeaderAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddResponseHeaderAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineAddResponseHeaderRequest": {},
      "EDGEApplicationRuleEngineAddResponseHeaderTypeEnum": {},
      "EDGEApplicationRuleEngineCaptureMatchGroups": {},
      "EDGEApplicationRuleEngineCaptureMatchGroupsAttributes": {
        "subject": {
          "minLength": 4,
          "maxLength": 50,
          "pattern": ".*"
        },
        "regex": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "captured_array": {
          "minLength": 1,
          "maxLength": 10,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineCaptureMatchGroupsAttributesRequest": {
        "subject": {
          "minLength": 4,
          "maxLength": 50,
          "pattern": ".*"
        },
        "regex": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "captured_array": {
          "minLength": 1,
          "maxLength": 10,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineCaptureMatchGroupsRequest": {},
      "EDGEApplicationRuleEngineCaptureMatchGroupsTypeEnum": {},
      "EDGEApplicationRuleEngineFilterHeader": {},
      "EDGEApplicationRuleEngineFilterHeaderAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineFilterHeaderAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineFilterHeaderRequest": {},
      "EDGEApplicationRuleEngineFilterHeaderTypeEnum": {},
      "EDGEApplicationRuleEngineFilterRequestCookie": {},
      "EDGEApplicationRuleEngineFilterRequestCookieAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineFilterRequestCookieAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineFilterRequestCookieRequest": {},
      "EDGEApplicationRuleEngineFilterRequestCookieTypeEnum": {},
      "EDGEApplicationRuleEngineFilterResponseHeader": {},
      "EDGEApplicationRuleEngineFilterResponseHeaderAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineFilterResponseHeaderAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineFilterResponseHeaderRequest": {},
      "EDGEApplicationRuleEngineFilterResponseHeaderTypeEnum": {},
      "EDGEApplicationRuleEngineNoArgs": {},
      "EDGEApplicationRuleEngineNoArgsRequest": {},
      "EDGEApplicationRuleEngineNoArgsTypeEnum": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviors": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest": {},
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsShared": {
        "type": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineResponseNoArgs": {},
      "EDGEApplicationRuleEngineResponseNoArgsRequest": {},
      "EDGEApplicationRuleEngineResponseNoArgsTypeEnum": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviors": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest": {},
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsShared": {
        "type": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineResponseString": {},
      "EDGEApplicationRuleEngineResponseStringAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineResponseStringAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineResponseStringRequest": {},
      "EDGEApplicationRuleEngineResponseStringTypeEnum": {},
      "EDGEApplicationRuleEngineRewriteRequest": {},
      "EDGEApplicationRuleEngineRewriteRequestAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineRewriteRequestAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineRewriteRequestRequest": {},
      "EDGEApplicationRuleEngineRunFunction": {},
      "EDGEApplicationRuleEngineRunFunctionAttributes": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineRunFunctionAttributesRequest": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineRunFunctionRequest": {},
      "EDGEApplicationRuleEngineRunFunctionResponse": {},
      "EDGEApplicationRuleEngineRunFunctionResponseAttributes": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineRunFunctionResponseAttributesRequest": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineRunFunctionResponseRequest": {},
      "EDGEApplicationRuleEngineSetCachePolicy": {},
      "EDGEApplicationRuleEngineSetCachePolicyAttributes": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineSetCachePolicyAttributesRequest": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineSetCachePolicyRequest": {},
      "EDGEApplicationRuleEngineSetCachePolicyTypeEnum": {},
      "EDGEApplicationRuleEngineSetConnector": {},
      "EDGEApplicationRuleEngineSetConnectorAttributes": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineSetConnectorAttributesRequest": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineSetConnectorRequest": {},
      "EDGEApplicationRuleEngineSetConnectorTypeEnum": {},
      "EDGEApplicationRuleEngineSetCookie": {},
      "EDGEApplicationRuleEngineSetCookieAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineSetCookieAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineSetCookieRequest": {},
      "EDGEApplicationRuleEngineSetCookieTypeEnum": {},
      "EDGEApplicationRuleEngineSetOrigin": {},
      "EDGEApplicationRuleEngineSetOriginAttributes": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineSetOriginAttributesRequest": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEApplicationRuleEngineSetOriginRequest": {},
      "EDGEApplicationRuleEngineSetOriginTypeEnum": {},
      "EDGEApplicationRuleEngineString": {},
      "EDGEApplicationRuleEngineStringAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineStringAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 2000,
          "pattern": ".*"
        }
      },
      "EDGEApplicationRuleEngineStringRequest": {},
      "EDGEApplicationRuleEngineStringTypeEnum": {},
      "EDGEBehaviorA69Enum": {},
      "EDGEBlankEnum": {},
      "EDGEBrowserCacheModule": {
        "max_age": {
          "minimum": 0,
          "maximum": 31536000
        }
      },
      "EDGEBrowserCacheModuleBehaviorEnum": {},
      "EDGEBrowserCacheModuleRequest": {
        "max_age": {
          "minimum": 0,
          "maximum": 31536000
        }
      },
      "EDGECacheModule": {},
      "EDGECacheModuleRequest": {},
      "EDGECacheSetting": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
        }
      },
      "EDGECacheSettingRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
        }
      },
      "EDGECacheSettingsApplicationAcceleratorModule": {
        "cache_vary_by_method": {
          "maxItems": 2
        }
      },
      "EDGECacheSettingsApplicationAcceleratorModuleRequest": {
        "cache_vary_by_method": {
          "maxItems": 2
        }
      },
      "EDGECacheSettingsEdgeCacheModule": {
        "max_age": {
          "minimum": 0,
          "maximum": 31536000
        }
      },
      "EDGECacheSettingsEdgeCacheModuleBehaviorEnum": {},
      "EDGECacheSettingsEdgeCacheModuleRequest": {
        "max_age": {
          "minimum": 0,
          "maximum": 31536000
        }
      },
      "EDGECacheSettingsModules": {},
      "EDGECacheSettingsModulesRequest": {},
      "EDGECacheSettingsTieredCacheModule": {
        "max_age": {
          "minimum": 0,
          "maximum": 31536000
        }
      },
      "EDGECacheSettingsTieredCacheModuleBehaviorEnum": {},
      "EDGECacheSettingsTieredCacheModuleRequest": {},
      "EDGECacheVaryByCookiesModule": {},
      "EDGECacheVaryByCookiesModuleRequest": {},
      "EDGECacheVaryByDevicesModule": {},
      "EDGECacheVaryByDevicesModuleBehaviorEnum": {},
      "EDGECacheVaryByDevicesModuleRequest": {},
      "EDGECacheVaryByMethodEnum": {},
      "EDGECacheVaryByQuerystringModule": {},
      "EDGECacheVaryByQuerystringModuleRequest": {},
      "EDGECiphersEnum": {},
      "EDGECloneApplicationRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "EDGECloneFirewallRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGECloneWAFRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGECodeEnum": {},
      "EDGEConditionalEnum": {},
      "EDGEConnectorHTTP": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEConnectorHTTPAttributes": {},
      "EDGEConnectorHTTPAttributesRequest": {},
      "EDGEConnectorHTTPRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEConnectorLiveIngest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEConnectorLiveIngestAttributes": {},
      "EDGEConnectorLiveIngestAttributesRequest": {},
      "EDGEConnectorLiveIngestRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEConnectorPolymorphic": {},
      "EDGEConnectorPolymorphicRequest": {},
      "EDGEConnectorStorage": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEConnectorStorageAttributes": {
        "bucket": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "prefix": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEConnectorStorageAttributesRequest": {
        "bucket": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "prefix": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEConnectorStorageRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGECustomPage": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGECustomPageRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEDefaultDeploymentStrategy": {},
      "EDGEDefaultDeploymentStrategyAttrs": {
        "application": {
          "minimum": 1,
          "maximum": 9223372036854776000
        },
        "custom_page": {
          "minimum": 1
        }
      },
      "EDGEDefaultDeploymentStrategyAttrsRequest": {
        "application": {
          "minimum": 1,
          "maximum": 9223372036854776000
        },
        "custom_page": {
          "minimum": 1
        }
      },
      "EDGEDefaultDeploymentStrategyRequest": {},
      "EDGEDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "EDGEDeploymentStrategy": {},
      "EDGEDeploymentStrategyDefaultDeploymentStrategy": {},
      "EDGEDeploymentStrategyDefaultDeploymentStrategyRequest": {},
      "EDGEDeploymentStrategyRequest": {},
      "EDGEDeploymentStrategyShared": {
        "type": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEDnsResolutionEnum": {},
      "EDGEEdgeApplicationCriterionField": {},
      "EDGEEdgeApplicationCriterionFieldRequest": {},
      "EDGEEdgeApplicationCriterionFieldVariableEnum": {},
      "EDGEEdgeApplicationCriterionPolymorphicArgument": {},
      "EDGEEdgeApplicationCriterionPolymorphicArgumentRequest": {},
      "EDGEEdgeFirewallCriterionField": {},
      "EDGEEdgeFirewallCriterionFieldRequest": {},
      "EDGEEdgeFirewallCriterionFieldVariableEnum": {},
      "EDGEEdgeFirewallCriterionPolymorphicArgument": {},
      "EDGEEdgeFirewallCriterionPolymorphicArgumentRequest": {},
      "EDGEEdgeFunctionModule": {},
      "EDGEEdgeFunctionModuleRequest": {},
      "EDGEEdgeFunctions": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "last_editor": {
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "maxLength": 50,
          "pattern": ".*"
        },
        "code": {
          "minLength": 1,
          "maxLength": 52428800,
          "pattern": ".*"
        }
      },
      "EDGEEdgeFunctionsRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "code": {
          "minLength": 1,
          "maxLength": 52428800,
          "pattern": ".*"
        }
      },
      "EDGEEngineVersionEnum": {},
      "EDGEExecutionEnvironmentEnum": {},
      "EDGEFirewall": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "last_editor": {
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEFirewallBehaviorNoArguments": {},
      "EDGEFirewallBehaviorNoArgumentsRequest": {},
      "EDGEFirewallBehaviorNoArgumentsTypeEnum": {},
      "EDGEFirewallBehaviorRunFunction": {},
      "EDGEFirewallBehaviorRunFunctionAttributes": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEFirewallBehaviorRunFunctionAttributesRequest": {
        "value": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEFirewallBehaviorRunFunctionRequest": {},
      "EDGEFirewallBehaviorSetCustomResponse": {},
      "EDGEFirewallBehaviorSetCustomResponseAttributes": {
        "status_code": {
          "minimum": 200,
          "maximum": 499
        },
        "content_type": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        },
        "content_body": {
          "minLength": 0,
          "maxLength": 500,
          "pattern": ".*"
        }
      },
      "EDGEFirewallBehaviorSetCustomResponseAttributesRequest": {
        "status_code": {
          "minimum": 200,
          "maximum": 499
        },
        "content_type": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        },
        "content_body": {
          "minLength": 0,
          "maxLength": 500,
          "pattern": ".*"
        }
      },
      "EDGEFirewallBehaviorSetCustomResponseRequest": {},
      "EDGEFirewallBehaviorSetCustomResponseTypeEnum": {},
      "EDGEFirewallBehaviorSetRateLimit": {},
      "EDGEFirewallBehaviorSetRateLimitAttributes": {
        "average_rate_limit": {
          "minimum": 1,
          "maximum": 2147483647
        },
        "maximum_burst_size": {
          "minimum": 1,
          "maximum": 2147483647
        }
      },
      "EDGEFirewallBehaviorSetRateLimitAttributesRequest": {
        "average_rate_limit": {
          "minimum": 1,
          "maximum": 2147483647
        },
        "maximum_burst_size": {
          "minimum": 1,
          "maximum": 2147483647
        }
      },
      "EDGEFirewallBehaviorSetRateLimitAttributesTypeEnum": {},
      "EDGEFirewallBehaviorSetRateLimitRequest": {},
      "EDGEFirewallBehaviorSetRateLimitTypeEnum": {},
      "EDGEFirewallBehaviorSetWaf": {},
      "EDGEFirewallBehaviorSetWafAttributes": {
        "waf_id": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEFirewallBehaviorSetWafAttributesRequest": {
        "waf_id": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEFirewallBehaviorSetWafRequest": {},
      "EDGEFirewallBehaviorSetWafTypeEnum": {},
      "EDGEFirewallBehaviorTagEvent": {},
      "EDGEFirewallBehaviorTagEventAttributes": {
        "value": {
          "minLength": 1,
          "maxLength": 128,
          "pattern": ".*"
        }
      },
      "EDGEFirewallBehaviorTagEventAttributesRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 128,
          "pattern": ".*"
        }
      },
      "EDGEFirewallBehaviorTagEventRequest": {},
      "EDGEFirewallBehaviorTagEventTypeEnum": {},
      "EDGEFirewallBehaviors": {},
      "EDGEFirewallBehaviorsFirewallBehaviorNoArguments": {},
      "EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest": {},
      "EDGEFirewallBehaviorsFirewallBehaviorRunFunction": {},
      "EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest": {},
      "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse": {},
      "EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest": {},
      "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit": {},
      "EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest": {},
      "EDGEFirewallBehaviorsFirewallBehaviorSetWaf": {},
      "EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest": {},
      "EDGEFirewallBehaviorsFirewallBehaviorTagEvent": {},
      "EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest": {},
      "EDGEFirewallBehaviorsRequest": {},
      "EDGEFirewallBehaviorsShared": {
        "type": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEFirewallFunctionInstance": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "function": {
          "minimum": 1,
          "maximum": 9223372036854776000
        },
        "last_editor": {
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEFirewallFunctionInstanceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "function": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEFirewallModule": {},
      "EDGEFirewallModuleRequest": {},
      "EDGEFirewallModules": {},
      "EDGEFirewallModulesRequest": {},
      "EDGEFirewallRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEFirewallRuleEngine": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "last_editor": {
          "maxLength": 255,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        },
        "order": {
          "minimum": 0,
          "maximum": 199
        }
      },
      "EDGEFirewallRuleEngineOrderRequest": {},
      "EDGEFirewallRuleEngineRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        }
      },
      "EDGEHMAC": {},
      "EDGEHMACPolymorphic": {},
      "EDGEHMACPolymorphicRequest": {},
      "EDGEHMACRequest": {},
      "EDGEHTTPConnectionOptions": {
        "host": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "path_prefix": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        },
        "real_ip_header": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "real_port_header": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "EDGEHTTPConnectionOptionsRequest": {
        "host": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "path_prefix": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        },
        "real_ip_header": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "real_port_header": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "EDGEHTTPModules": {},
      "EDGEHTTPModulesRequest": {},
      "EDGEHttpProtocol": {
        "versions": {
          "maxItems": 3
        },
        "http_ports": {
          "minItems": 1,
          "maxItems": 4
        },
        "https_ports": {
          "minItems": 1,
          "maxItems": 12
        },
        "quic_ports": {
          "maxItems": 12
        }
      },
      "EDGEHttpProtocolRequest": {
        "versions": {
          "maxItems": 3
        },
        "http_ports": {
          "minItems": 1,
          "maxItems": 4
        },
        "https_ports": {
          "minItems": 1,
          "maxItems": 12
        },
        "quic_ports": {
          "maxItems": 12
        }
      },
      "EDGEHttpVersionPolicyEnum": {},
      "EDGEImageProcessorModule": {},
      "EDGEImageProcessorModuleRequest": {},
      "EDGEInfrastructureEnum": {},
      "EDGEJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "EDGEJSONAPIErrorResponse": {},
      "EDGEJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "EDGELargeFileCacheModule": {
        "offset": {
          "minimum": 1024,
          "maximum": 1024
        }
      },
      "EDGELargeFileCacheModuleRequest": {
        "offset": {
          "minimum": 1024,
          "maximum": 1024
        }
      },
      "EDGELayerEnum": {},
      "EDGELimitByEnum": {},
      "EDGELoadBalancerModule": {},
      "EDGELoadBalancerModuleConfig": {
        "max_retries": {
          "minimum": 0,
          "maximum": 20
        },
        "connection_timeout": {
          "minimum": 1,
          "maximum": 300
        },
        "read_write_timeout": {
          "minimum": 1,
          "maximum": 600
        }
      },
      "EDGELoadBalancerModuleConfigRequest": {
        "max_retries": {
          "minimum": 0,
          "maximum": 20
        },
        "connection_timeout": {
          "minimum": 1,
          "maximum": 300
        },
        "read_write_timeout": {
          "minimum": 1,
          "maximum": 600
        }
      },
      "EDGELoadBalancerModuleRequest": {},
      "EDGEMTLS": {
        "certificate": {
          "minimum": 1
        },
        "crl": {
          "maxItems": 100
        }
      },
      "EDGEMTLSRequest": {
        "certificate": {
          "minimum": 1
        },
        "crl": {
          "maxItems": 100
        }
      },
      "EDGEMethodEnum": {},
      "EDGEMinimumVersionEnum": {},
      "EDGEModeEnum": {},
      "EDGENetworkList": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "last_editor": {
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGENetworkListDetail": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "items": {
          "minItems": 1,
          "maxItems": 20000
        },
        "last_editor": {
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGENetworkListDetailRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "items": {
          "minItems": 1,
          "maxItems": 20000
        }
      },
      "EDGENullEnum": {},
      "EDGEOperator565Enum": {},
      "EDGEOriginIPACL": {},
      "EDGEOriginIPACLRequest": {},
      "EDGEOriginShieldConfig": {},
      "EDGEOriginShieldConfigRequest": {},
      "EDGEOriginShieldModule": {},
      "EDGEOriginShieldModuleRequest": {},
      "EDGEPage": {},
      "EDGEPageConnector": {
        "type": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEPageConnectorAttributes": {
        "ttl": {
          "minimum": 0,
          "maximum": 31536000
        },
        "uri": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^\\/[\\/a-zA-Z0-9\\-_\\.\\~@:]*$"
        },
        "custom_status_code": {
          "minimum": 100,
          "maximum": 599
        }
      },
      "EDGEPageConnectorAttributesRequest": {
        "ttl": {
          "minimum": 0,
          "maximum": 31536000
        },
        "uri": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^\\/[\\/a-zA-Z0-9\\-_\\.\\~@:]*$"
        },
        "custom_status_code": {
          "minimum": 100,
          "maximum": 599
        }
      },
      "EDGEPageConnectorRequest": {
        "type": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEPagePolymorphic": {},
      "EDGEPagePolymorphicRequest": {},
      "EDGEPageRequest": {},
      "EDGEPaginatedApplicationDeviceGroupsList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedApplicationFunctionInstanceList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedApplicationList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedApplicationRequestPhaseRuleEngineList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedApplicationResponsePhaseRuleEngineList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedConnectorPolymorphicList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedCustomPageList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedEdgeFunctionsList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedFirewallFunctionInstanceList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedFirewallList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedFirewallRuleEngineList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedNetworkListList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedResponseListCacheSettingList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedWAFList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedWAFRuleList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedWorkloadDeploymentList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPaginatedWorkloadList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGEPatchedApplicationDeviceGroupsRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "user_agent": {
          "minLength": 1,
          "maxLength": 512,
          "pattern": ".*"
        }
      },
      "EDGEPatchedApplicationFunctionInstanceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "function": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEPatchedApplicationRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "EDGEPatchedApplicationRequestPhaseRuleEngineRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        }
      },
      "EDGEPatchedApplicationResponsePhaseRuleEngineRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        }
      },
      "EDGEPatchedCacheSettingRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
        }
      },
      "EDGEPatchedConnectorHTTPRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEPatchedConnectorLiveIngestRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEPatchedConnectorPolymorphicRequest": {},
      "EDGEPatchedConnectorStorageRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEPatchedCustomPageRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "EDGEPatchedEdgeFunctionsRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "code": {
          "minLength": 1,
          "maxLength": 52428800,
          "pattern": ".*"
        }
      },
      "EDGEPatchedFirewallFunctionInstanceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "function": {
          "minimum": 1,
          "maximum": 9223372036854776000
        }
      },
      "EDGEPatchedFirewallRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEPatchedFirewallRuleEngineRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "criteria": {
          "minItems": 1,
          "maxItems": 5
        },
        "behaviors": {
          "minItems": 1,
          "maxItems": 10
        },
        "description": {
          "minLength": 0,
          "maxLength": 1000,
          "pattern": ".*"
        }
      },
      "EDGEPatchedNetworkListDetailRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "items": {
          "minItems": 1,
          "maxItems": 20000
        }
      },
      "EDGEPatchedWAFRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEPatchedWAFRuleRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "path": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^[^|]*$"
        },
        "conditions": {
          "minItems": 1
        }
      },
      "EDGEPatchedWorkloadDeploymentRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 254,
          "pattern": ".*"
        }
      },
      "EDGEPatchedWorkloadRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "EDGEProtocols": {},
      "EDGEProtocolsRequest": {},
      "EDGEPurgeInput": {
        "items": {
          "minItems": 1
        }
      },
      "EDGEPurgeInputRequest": {
        "items": {
          "minItems": 1
        }
      },
      "EDGERegionEnum": {},
      "EDGEResponseApplication": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseApplicationDeviceGroups": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseApplicationFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseApplicationRequestPhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseApplicationResponsePhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncApplication": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncApplicationDeviceGroups": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncApplicationFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncApplicationRequestPhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncApplicationResponsePhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncCacheSetting": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncConnectorPolymorphic": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncCustomPage": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteApplication": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteApplicationDeviceGroups": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteApplicationFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteCacheSetting": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteConnectorPolymorphic": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteCustomPage": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteFirewall": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteFirewallFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteFirewallRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteFunctionsDoc": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteNetworkListDetail": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteWAF": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteWAFRule": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteWorkload": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncDeleteWorkloadDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncFirewall": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncFirewallFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncFirewallRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncFunctionsDoc": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncNetworkListDetail": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncPurgeInput": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncWAF": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncWAFRule": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncWorkload": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseAsyncWorkloadDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseBadRequestApplication": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "EDGEResponseBadRequestCacheSetting": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_cookiesField": {},
      "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_devicesField": {},
      "EDGEResponseBadRequestCacheSettingsApplicationAcceleratorModuleCache_vary_by_querystringField": {},
      "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleLarge_file_cacheField": {},
      "EDGEResponseBadRequestCacheSettingsEdgeCacheModuleStale_cacheField": {},
      "EDGEResponseBadRequestCacheSettingsModulesApplication_acceleratorField": {},
      "EDGEResponseBadRequestCacheSettingsModulesEdge_cacheField": {},
      "EDGEResponseBadRequestCacheSettingsModulesTiered_cacheField": {},
      "EDGEResponseBadRequestSerializerMetaclassBrowser_cacheField": {},
      "EDGEResponseBadRequestSerializerMetaclassModulesField": {},
      "EDGEResponseBadRequestSerializerMetaclassStrategyField": {},
      "EDGEResponseBadRequestWorkloadDeployment": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "EDGEResponseConnectorPolymorphic": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseCustomPage": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteApplication": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteApplicationFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteApplicationRequestPhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteApplicationResponsePhaseRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteConnectorPolymorphic": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteCustomPage": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteFirewall": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteFirewallFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteFirewallRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteFunctionsDoc": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteNetworkListDetail": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteWAF": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseDeleteWAFRule": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseFirewall": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseFirewallFunctionInstance": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseFirewallRuleEngine": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseFunctionsDoc": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseListCacheSetting": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^[a-zA-Z0-9 \\-\\.\\'\\,|]+$"
        }
      },
      "EDGEResponseNetworkListDetail": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponsePurgeInput": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseRetrieveApplication": {},
      "EDGEResponseRetrieveApplicationDeviceGroups": {},
      "EDGEResponseRetrieveApplicationFunctionInstance": {},
      "EDGEResponseRetrieveApplicationRequestPhaseRuleEngine": {},
      "EDGEResponseRetrieveCacheSetting": {},
      "EDGEResponseRetrieveConnectorPolymorphic": {},
      "EDGEResponseRetrieveCustomPage": {},
      "EDGEResponseRetrieveFirewall": {},
      "EDGEResponseRetrieveFirewallFunctionInstance": {},
      "EDGEResponseRetrieveFirewallRuleEngine": {},
      "EDGEResponseRetrieveFunctionsDoc": {},
      "EDGEResponseRetrieveNetworkListDetail": {},
      "EDGEResponseRetrieveWAF": {},
      "EDGEResponseRetrieveWAFRule": {},
      "EDGEResponseRetrieveWorkload": {},
      "EDGEResponseRetrieveWorkloadDeployment": {},
      "EDGEResponseWAF": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseWAFRule": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseWorkload": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGEResponseWorkloadDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGERuleIdEnum": {},
      "EDGERulesetsEnum": {},
      "EDGERuntimeEnum": {},
      "EDGESensitivityEnum": {},
      "EDGEServerRoleEnum": {},
      "EDGEStateCacheModule": {},
      "EDGEStateCacheModuleRequest": {},
      "EDGETLSWorkload": {
        "certificate": {
          "minimum": 1
        }
      },
      "EDGETLSWorkloadRequest": {
        "certificate": {
          "minimum": 1
        }
      },
      "EDGEThreatEnum": {},
      "EDGEThresholdsConfigField": {},
      "EDGEThresholdsConfigFieldRequest": {},
      "EDGETieredCacheModule": {},
      "EDGETieredCacheModuleRequest": {},
      "EDGETopologyEnum": {},
      "EDGETransportPolicyEnum": {},
      "EDGEType15cEnum": {},
      "EDGEType528Enum": {},
      "EDGEType689Enum": {},
      "EDGETypeF11Enum": {},
      "EDGEVerificationEnum": {},
      "EDGEWAF": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEWAFEngineSettingsAttributesField": {
        "thresholds": {
          "maxItems": 8
        }
      },
      "EDGEWAFEngineSettingsAttributesFieldRequest": {
        "thresholds": {
          "maxItems": 8
        }
      },
      "EDGEWAFEngineSettingsField": {},
      "EDGEWAFEngineSettingsFieldRequest": {},
      "EDGEWAFEngineSettingsFieldTypeEnum": {},
      "EDGEWAFExceptionGenericCondition": {},
      "EDGEWAFExceptionGenericConditionMatchEnum": {},
      "EDGEWAFExceptionGenericConditionRequest": {},
      "EDGEWAFExceptionPolymorphicCondition": {},
      "EDGEWAFExceptionPolymorphicConditionRequest": {},
      "EDGEWAFExceptionSpecificConditionOnName": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "[a-zA-Z0-9<>?()]+"
        }
      },
      "EDGEWAFExceptionSpecificConditionOnNameMatchEnum": {},
      "EDGEWAFExceptionSpecificConditionOnNameRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "[a-zA-Z0-9<>?()]+"
        }
      },
      "EDGEWAFExceptionSpecificConditionOnValue": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "[a-zA-Z0-9<>?()]+"
        }
      },
      "EDGEWAFExceptionSpecificConditionOnValueMatchEnum": {},
      "EDGEWAFExceptionSpecificConditionOnValueRequest": {
        "value": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "[a-zA-Z0-9<>?()]+"
        }
      },
      "EDGEWAFRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "EDGEWAFRule": {
        "name": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".*"
        },
        "path": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^[^|]*$"
        },
        "conditions": {
          "minItems": 1
        }
      },
      "EDGEWAFRuleOperatorEnum": {},
      "EDGEWAFRuleRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "path": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^[^|]*$"
        },
        "conditions": {
          "minItems": 1
        }
      },
      "EDGEWorkload": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "workload_domain": {
          "pattern": ".*"
        },
        "product_version": {
          "pattern": "^(custom|\\d+\\.\\d+)$"
        }
      },
      "EDGEWorkloadDeployment": {
        "name": {
          "minLength": 1,
          "maxLength": 254,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        }
      },
      "EDGEWorkloadDeploymentRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 254,
          "pattern": ".*"
        }
      },
      "EDGEWorkloadRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "METRICSAggregatedField": {
        "aggregation": {
          "maxLength": 255
        },
        "variable": {
          "maxLength": 255
        }
      },
      "METRICSAggregatedFieldRequest": {
        "aggregation": {
          "minLength": 1,
          "maxLength": 255
        },
        "variable": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSAggregationTypeEnum": {},
      "METRICSBaseQuery": {
        "dataset": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "limit": {
          "minimum": 0,
          "maximum": 10000
        }
      },
      "METRICSBaseQueryRequest": {
        "dataset": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "limit": {
          "minimum": 0,
          "maximum": 10000
        }
      },
      "METRICSComparisonTypeEnum": {},
      "METRICSDashboard": {
        "name": {
          "maxLength": 255
        }
      },
      "METRICSDashboardRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSDataUnitEnum": {},
      "METRICSFolder": {
        "name": {
          "maxLength": 255
        }
      },
      "METRICSFolderRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "METRICSJSONAPIErrorResponse": {},
      "METRICSJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "METRICSLibraryReportRequest": {
        "description": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "x_axis": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "name": {
          "minLength": 1,
          "maxLength": 255
        },
        "help_center_path": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSOrder": {},
      "METRICSOrderDirectionEnum": {},
      "METRICSOrderRequest": {},
      "METRICSPaginatedResponseListDashboardList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "METRICSPaginatedResponseListFolderList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "METRICSPaginatedResponseListReportList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "METRICSPaginatedResponseListRowList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "METRICSPatchedDashboardRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSPatchedFolderRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSRecommendationRequest": {},
      "METRICSReport": {
        "description": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "x_axis": {
          "maxLength": 100,
          "pattern": ".*"
        },
        "name": {
          "maxLength": 255
        },
        "help_center_path": {
          "maxLength": 255
        }
      },
      "METRICSReportRequest": {
        "description": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "x_axis": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "columns": {
          "maximum": 12
        },
        "name": {
          "minLength": 1,
          "maxLength": 255
        },
        "help_center_path": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSResponseAsyncDashboard": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncDeleteDashboard": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncDeleteFolder": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncDeleteReport": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncDeleteRow": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncFolder": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncOrder": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncReport": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseAsyncRow": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseDashboard": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseDeleteDashboard": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseDeleteFolder": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseDeleteReport": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseDeleteRow": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseFolder": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseListDashboard": {
        "name": {
          "maxLength": 255
        }
      },
      "METRICSResponseListFolder": {
        "name": {
          "maxLength": 255
        }
      },
      "METRICSResponseListReport": {
        "description": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "x_axis": {
          "maxLength": 100,
          "pattern": ".*"
        },
        "name": {
          "maxLength": 255
        },
        "help_center_path": {
          "maxLength": 255
        }
      },
      "METRICSResponseListRow": {
        "title": {
          "maxLength": 255
        }
      },
      "METRICSResponseOrder": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseReport": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSResponseRetrieveDashboard": {},
      "METRICSResponseRetrieveFolder": {},
      "METRICSResponseRetrieveReport": {},
      "METRICSResponseRetrieveRow": {},
      "METRICSResponseRow": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "METRICSRow": {
        "title": {
          "maxLength": 255
        }
      },
      "METRICSRowRequest": {
        "title": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "METRICSScopeEnum": {},
      "METRICSTypeEnum": {},
      "EDGESQLDatabaseRequest": {
        "name": {
          "minLength": 6,
          "maxLength": 50,
          "pattern": "^[A-Za-z0-9-]{6,50}$"
        }
      },
      "EDGESQLJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "EDGESQLJSONAPIErrorResponse": {},
      "EDGESQLJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "EDGESQLOpenAPISchema": {
        "name": {
          "minLength": 6,
          "maxLength": 50,
          "pattern": "^[A-Za-z0-9-]{6,50}$"
        }
      },
      "EDGESQLPaginatedOpenAPISchemaList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "EDGESQLResponseAsyncDeleteOpenAPISchema": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGESQLResponseAsyncOpenAPISchema": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGESQLResponseAsyncSQLResult": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGESQLResponseDeleteOpenAPISchema": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGESQLResponseOpenAPISchema": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGESQLResponseRetrieveOpenAPISchema": {},
      "EDGESQLResponseSQLResult": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "EDGESQLSQLResult": {},
      "EDGESQLSQLStatementsRequest": {
        "statements": {
          "maxItems": 1000
        }
      },
      "EDGESQLStatusEnum": {},
      "PAYMENTSCredit": {
        "amount": {
          "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$"
        },
        "client_id": {
          "minLength": 1,
          "maxLength": 255
        },
        "currency": {
          "minLength": 1,
          "maxLength": 255
        },
        "entry_type": {
          "minLength": 1,
          "maxLength": 255
        },
        "expiration_date": {
          "minLength": 1,
          "maxLength": 255
        },
        "created": {
          "minLength": 1,
          "maxLength": 255
        },
        "customer_stripe_id": {
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "PAYMENTSCreditRequest": {
        "amount": {
          "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$"
        }
      },
      "PAYMENTSJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "PAYMENTSJSONAPIErrorResponse": {},
      "PAYMENTSJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "PAYMENTSPaginatedPaymentHistoryList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "PAYMENTSPaginatedResponsePaymentMethodList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "PAYMENTSPatchedPartialUpdateRequest": {},
      "PAYMENTSPaymentHistory": {
        "amount_with_currency": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "invoice_number": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "invoice_url": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^/account/\\d+/invoice\\?billing_month=\\d{4}-\\d{2}$"
        },
        "status": {
          "minLength": 1,
          "maxLength": 30,
          "pattern": "^[\\w\\s]*$"
        },
        "card_brand": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[\\w\\s]*$"
        },
        "payment_method_details": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "PAYMENTSPaymentMethod": {
        "card_holder": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^[a-zA-Z ]+$"
        },
        "card_brand": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-zA-Z ]+$"
        },
        "card_expiration_month": {
          "minimum": 1,
          "maximum": 12
        },
        "card_expiration_year": {
          "minimum": 2022,
          "maximum": 2099
        },
        "card_last_4_digits": {
          "minLength": 4,
          "maxLength": 4,
          "pattern": "^\\d{4}$"
        },
        "card_address_zip": {
          "minLength": 1,
          "maxLength": 20,
          "pattern": "^[\\w\\s-]+$"
        },
        "card_country": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[a-zA-Z ]+$"
        },
        "card_address_line1": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "card_address_line2": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "card_id": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "PAYMENTSPaymentMethodRequest": {
        "card_holder": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^[a-zA-Z ]+$"
        },
        "card_brand": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-zA-Z ]+$"
        },
        "card_expiration_month": {
          "minimum": 1,
          "maximum": 12
        },
        "card_expiration_year": {
          "minimum": 2022,
          "maximum": 2099
        },
        "card_last_4_digits": {
          "minLength": 4,
          "maxLength": 4,
          "pattern": "^\\d{4}$"
        },
        "card_address_zip": {
          "minLength": 1,
          "maxLength": 20,
          "pattern": "^[\\w\\s-]+$"
        },
        "card_country": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[a-zA-Z ]+$"
        },
        "card_address_line1": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "card_address_line2": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "stripe_token": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "card_id": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "PAYMENTSResponseAsyncCredit": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "PAYMENTSResponseAsyncDeletePaymentMethod": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "PAYMENTSResponseAsyncPaymentMethod": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "PAYMENTSResponseCredit": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "PAYMENTSResponseDeletePaymentMethod": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "PAYMENTSResponsePaymentMethod": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "ACCOUNTSAccount": {},
      "ACCOUNTSAccountInfo": {},
      "ACCOUNTSAccountRequest": {},
      "ACCOUNTSBrand": {
        "name": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        }
      },
      "ACCOUNTSBrandRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSCreateAccountRequest": {},
      "ACCOUNTSCreateBrandRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSCreateOrganizationRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSCreateResellerRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "terms_of_service_url": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "ACCOUNTSCreateWorkspaceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSCurrencyIsoCodeEnum": {},
      "ACCOUNTSJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "ACCOUNTSJSONAPIErrorResponse": {},
      "ACCOUNTSJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "ACCOUNTSOrganization": {
        "name": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        }
      },
      "ACCOUNTSOrganizationRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSPaginatedResponseListAccountList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ACCOUNTSPatchedAccountRequest": {},
      "ACCOUNTSPatchedBrandRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSPatchedOrganizationRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSPatchedResellerRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "terms_of_service_url": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "ACCOUNTSPatchedWorkspaceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "ACCOUNTSReasonEnum": {},
      "ACCOUNTSReseller": {
        "name": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "terms_of_service_url": {
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "ACCOUNTSResellerRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "terms_of_service_url": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "ACCOUNTSResponseAccount": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "ACCOUNTSResponseAccountInfo": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "ACCOUNTSResponseAsyncAccount": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "ACCOUNTSResponseAsyncAccountInfo": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "ACCOUNTSResponseListAccount": {},
      "ACCOUNTSResponseRetrieveAccount": {},
      "ACCOUNTSResponseRetrieveAccountInfo": {},
      "ACCOUNTSStatusEnum": {},
      "ACCOUNTSTypeEnum": {},
      "ACCOUNTSWorkspace": {
        "name": {
          "maxLength": 150,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "workspace_id": {
          "pattern": "^[0-9]{4}[A-Z]$"
        }
      },
      "ACCOUNTSWorkspaceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        }
      },
      "STORAGEBucket": {
        "name": {
          "minLength": 6,
          "maxLength": 63
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "STORAGEBucketCreate": {
        "name": {
          "minLength": 6,
          "maxLength": 63,
          "pattern": ".{6,63}"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "STORAGEBucketCreateRequest": {
        "name": {
          "minLength": 6,
          "maxLength": 63,
          "pattern": ".{6,63}"
        }
      },
      "STORAGEBucketObject": {},
      "STORAGECapabilitiesEnum": {},
      "STORAGECredential": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[a-zA-Z0-9\\-]+$"
        },
        "bucket": {
          "minLength": 6,
          "maxLength": 63,
          "pattern": ".{6,63}"
        }
      },
      "STORAGECredentialCreateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[a-zA-Z0-9\\-]+$"
        },
        "bucket": {
          "minLength": 6,
          "maxLength": 63,
          "pattern": ".{6,63}"
        }
      },
      "STORAGEDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "STORAGEEdgeAccessEnum": {},
      "STORAGEJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "STORAGEJSONAPIErrorResponse": {},
      "STORAGEJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "STORAGEObjectResponseAsyncData": {
        "object_key": {
          "minLength": 1,
          "maxLength": 1024,
          "pattern": "^[0-9a-zA-Z!\\\"\\~\\-\\_\\.\\*\\'\\(\\)\\&\\$\\@\\=\\;\\/\\:\\+\\,\\\\\\{\\}\\^\\`\\[\\]\\>\\<\\|\\ \\%\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u00c7\\u00c8\\u00c9\\u00ca\\u00cb\\u00cc\\u00cd\\u00ce\\u00cf\\u00d1\\u00d2\\u00d3\\u00d4\\u00d5\\u00d6\\u00d9\\u00da\\u00db\\u00dc\\u00dd\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u00e7\\u00e8\\u00e9\\u00ea\\u00ec\\u00ed\\u00ee\\u00f1\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u00f9\\u00fa\\u00fb\\u00fc\\u00fd\\u00eb\\u00ef]+$"
        }
      },
      "STORAGEObjectResponseData": {
        "object_key": {
          "minLength": 1,
          "maxLength": 1024,
          "pattern": "^[0-9a-zA-Z!\\\"\\~\\-\\_\\.\\*\\'\\(\\)\\&\\$\\@\\=\\;\\/\\:\\+\\,\\\\\\{\\}\\^\\`\\[\\]\\>\\<\\|\\ \\%\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u00c7\\u00c8\\u00c9\\u00ca\\u00cb\\u00cc\\u00cd\\u00ce\\u00cf\\u00d1\\u00d2\\u00d3\\u00d4\\u00d5\\u00d6\\u00d9\\u00da\\u00db\\u00dc\\u00dd\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u00e7\\u00e8\\u00e9\\u00ea\\u00ec\\u00ed\\u00ee\\u00f1\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u00f9\\u00fa\\u00fb\\u00fc\\u00fd\\u00eb\\u00ef]+$"
        }
      },
      "STORAGEPaginatedBucketList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "STORAGEPaginatedResponseListCredentialList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "STORAGEPatchedBucketRequest": {},
      "STORAGEResponseAsyncBucketCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseAsyncCredential": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseAsyncDeleteBucketCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseAsyncDeleteBucketObject": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseAsyncDeleteCredential": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseBadRequestBucket": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "STORAGEResponseBadRequestCredential": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "STORAGEResponseBucketCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseBucketObject": {
        "continuation_token": {
          "minLength": 0,
          "maxLength": 255,
          "pattern": ".{0,255}"
        }
      },
      "STORAGEResponseCredential": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseDeleteBucketCreate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseDeleteBucketObject": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGEResponseListCredential": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[a-zA-Z0-9\\-]+$"
        },
        "bucket": {
          "minLength": 6,
          "maxLength": 63,
          "pattern": ".{6,63}"
        }
      },
      "STORAGEResponseRetrieveBucket": {},
      "STORAGEResponseRetrieveCredential": {},
      "STORAGESuccessObjectOperation": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "STORAGESuccessObjectOperationAsync": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAAWSKinesisFirehoseEndpoint": {
        "access_key": {
          "maxLength": 150
        },
        "stream_name": {
          "maxLength": 64
        },
        "region": {
          "maxLength": 50
        },
        "secret_key": {
          "maxLength": 150
        }
      },
      "DATAAWSKinesisFirehoseEndpointRequest": {
        "access_key": {
          "minLength": 1,
          "maxLength": 150
        },
        "stream_name": {
          "minLength": 1,
          "maxLength": 64
        },
        "region": {
          "minLength": 1,
          "maxLength": 50
        },
        "secret_key": {
          "minLength": 1,
          "maxLength": 150
        }
      },
      "DATAAzureBlobStorageEndpoint": {
        "storage_account": {
          "maxLength": 100
        },
        "container_name": {
          "maxLength": 150
        },
        "blob_sas_token": {
          "maxLength": 250
        }
      },
      "DATAAzureBlobStorageEndpointRequest": {
        "storage_account": {
          "minLength": 1,
          "maxLength": 100
        },
        "container_name": {
          "minLength": 1,
          "maxLength": 150
        },
        "blob_sas_token": {
          "minLength": 1,
          "maxLength": 250
        }
      },
      "DATAAzureMonitorEndpoint": {
        "log_type": {
          "maxLength": 100
        },
        "shared_key": {
          "maxLength": 150
        },
        "time_generated_field": {
          "maxLength": 50
        },
        "workspace_id": {
          "maxLength": 150
        }
      },
      "DATAAzureMonitorEndpointRequest": {
        "log_type": {
          "minLength": 1,
          "maxLength": 100
        },
        "shared_key": {
          "minLength": 1,
          "maxLength": 150
        },
        "time_generated_field": {
          "minLength": 1,
          "maxLength": 50
        },
        "workspace_id": {
          "minLength": 1,
          "maxLength": 150
        }
      },
      "DATABigQueryEndpoint": {
        "dataset_id": {
          "maxLength": 1024
        },
        "project_id": {
          "maxLength": 100
        },
        "table_id": {
          "maxLength": 1024
        }
      },
      "DATABigQueryEndpointRequest": {
        "dataset_id": {
          "minLength": 1,
          "maxLength": 1024
        },
        "project_id": {
          "minLength": 1,
          "maxLength": 100
        },
        "table_id": {
          "minLength": 1,
          "maxLength": 1024
        },
        "service_account_key": {
          "minLength": 1
        }
      },
      "DATAContentTypeEnum": {},
      "DATADataSourceEnum": {},
      "DATADataStream": {
        "name": {
          "maxLength": 100,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 1,
          "pattern": ".*"
        }
      },
      "DATADataStreamRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "DATADatadogEndpoint": {
        "api_key": {
          "maxLength": 255
        }
      },
      "DATADatadogEndpointRequest": {
        "url": {
          "minLength": 1
        },
        "api_key": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "DATAElasticsearchEndpoint": {
        "api_key": {
          "maxLength": 255
        }
      },
      "DATAElasticsearchEndpointRequest": {
        "url": {
          "minLength": 1
        },
        "api_key": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "DATAHttpPostEndpoint": {
        "log_line_separator": {
          "maxLength": 100
        },
        "payload_format": {
          "maxLength": 250
        },
        "max_size": {
          "minimum": 1000000,
          "maximum": 2147483647
        }
      },
      "DATAHttpPostEndpointRequest": {
        "url": {
          "minLength": 1
        },
        "log_line_separator": {
          "maxLength": 100
        },
        "payload_format": {
          "minLength": 1,
          "maxLength": 250
        },
        "max_size": {
          "minimum": 1000000,
          "maximum": 2147483647
        }
      },
      "DATAInputDataSource": {},
      "DATAInputDataSourceAttributes": {},
      "DATAInputDataSourceAttributesRequest": {},
      "DATAInputDataSourceAttributesTypeEnum": {},
      "DATAInputDataSourceRequest": {},
      "DATAInputPolymorphic": {},
      "DATAInputPolymorphicInputDataSourceAttributes": {},
      "DATAInputPolymorphicInputDataSourceAttributesRequest": {},
      "DATAInputPolymorphicRequest": {},
      "DATAInputPolymorphicShared": {},
      "DATAJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "DATAJSONAPIErrorResponse": {},
      "DATAJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "DATAKafkaEndpoint": {
        "bootstrap_servers": {
          "maxLength": 150
        },
        "kafka_topic": {
          "maxLength": 150
        }
      },
      "DATAKafkaEndpointRequest": {
        "bootstrap_servers": {
          "minLength": 1,
          "maxLength": 150
        },
        "kafka_topic": {
          "minLength": 1,
          "maxLength": 150
        }
      },
      "DATAOutput": {},
      "DATAOutputPolymorphic": {},
      "DATAOutputPolymorphicRequest": {},
      "DATAOutputRequest": {},
      "DATAOutputTypeEnum": {},
      "DATAPaginatedResponseListDataSourceList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "DATAPaginatedResponseListDataStreamList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "DATAPaginatedResponseListTemplateList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "DATAPatchedDataStreamRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        }
      },
      "DATAPatchedTemplateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "data_set": {
          "minLength": 1,
          "pattern": ".*"
        }
      },
      "DATAQRadarEndpoint": {},
      "DATAQRadarEndpointRequest": {
        "url": {
          "minLength": 1
        }
      },
      "DATAResponseAsyncDataStream": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseAsyncDeleteDataStream": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseAsyncDeleteTemplate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseAsyncTemplate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseDataStream": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseDeleteDataStream": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseDeleteTemplate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAResponseListDataSource": {
        "slug": {
          "pattern": "^[-a-zA-Z0-9_]+$"
        }
      },
      "DATAResponseListDataStream": {
        "name": {
          "maxLength": 100,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 1,
          "pattern": ".*"
        }
      },
      "DATAResponseListTemplate": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "pattern": ".*"
        },
        "data_set": {
          "minLength": 1,
          "pattern": ".*"
        }
      },
      "DATAResponseRetrieveDataStream": {},
      "DATAResponseRetrieveTemplate": {},
      "DATAResponseTemplate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DATAS3Endpoint": {
        "access_key": {
          "maxLength": 150
        },
        "region": {
          "maxLength": 50
        },
        "object_key_prefix": {
          "maxLength": 150
        },
        "bucket_name": {
          "maxLength": 150
        },
        "host_url": {
          "maxLength": 200
        }
      },
      "DATAS3EndpointRequest": {
        "access_key": {
          "minLength": 1,
          "maxLength": 150
        },
        "region": {
          "minLength": 1,
          "maxLength": 50
        },
        "object_key_prefix": {
          "minLength": 1,
          "maxLength": 150
        },
        "bucket_name": {
          "minLength": 1,
          "maxLength": 150
        },
        "host_url": {
          "minLength": 1,
          "maxLength": 200
        }
      },
      "DATASplunkEndpoint": {
        "api_key": {
          "maxLength": 255
        }
      },
      "DATASplunkEndpointRequest": {
        "url": {
          "minLength": 1
        },
        "api_key": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "DATATemplate": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "last_editor": {
          "minLength": 1,
          "pattern": ".*"
        },
        "data_set": {
          "minLength": 1,
          "pattern": ".*"
        }
      },
      "DATATemplateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": ".*"
        },
        "data_set": {
          "minLength": 1,
          "pattern": ".*"
        }
      },
      "DATATransformFilterWorkloads": {
        "workloads": {
          "minItems": 1,
          "maxItems": 600
        }
      },
      "DATATransformFilterWorkloadsAttributes": {},
      "DATATransformFilterWorkloadsAttributesRequest": {},
      "DATATransformFilterWorkloadsAttributesTypeEnum": {},
      "DATATransformFilterWorkloadsRequest": {
        "workloads": {
          "minItems": 1,
          "maxItems": 600
        }
      },
      "DATATransformPolymorphic": {},
      "DATATransformPolymorphicRequest": {},
      "DATATransformPolymorphicShared": {},
      "DATATransformPolymorphicTransformFilterWorkloadsAttributes": {},
      "DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest": {},
      "DATATransformPolymorphicTransformRenderTemplateAttributes": {},
      "DATATransformPolymorphicTransformRenderTemplateAttributesRequest": {},
      "DATATransformPolymorphicTransformSamplingAttributes": {},
      "DATATransformPolymorphicTransformSamplingAttributesRequest": {},
      "DATATransformRenderTemplate": {
        "template": {
          "minimum": 1
        }
      },
      "DATATransformRenderTemplateAttributes": {},
      "DATATransformRenderTemplateAttributesRequest": {},
      "DATATransformRenderTemplateAttributesTypeEnum": {},
      "DATATransformRenderTemplateRequest": {
        "template": {
          "minimum": 1
        }
      },
      "DATATransformSampling": {
        "rate": {
          "minimum": 1,
          "maximum": 100
        }
      },
      "DATATransformSamplingAttributes": {},
      "DATATransformSamplingAttributesRequest": {},
      "DATATransformSamplingAttributesTypeEnum": {},
      "DATATransformSamplingRequest": {
        "rate": {
          "minimum": 1,
          "maximum": 100
        }
      },
      "DATAType4f5Enum": {},
      "ORCHESTRATORBlankEnum": {},
      "ORCHESTRATORContent": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_type": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_hash": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        }
      },
      "ORCHESTRATORContentRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_type": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_hash": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORNodeGroups": {
        "name": {
          "maxLength": 100
        }
      },
      "ORCHESTRATORNodeGroupsById": {
        "name": {
          "maxLength": 100
        }
      },
      "ORCHESTRATORNodeGroupsByIdRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100
        }
      },
      "ORCHESTRATORNodeGroupsRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100
        }
      },
      "ORCHESTRATORNodeServiceBind": {
        "service_name": {
          "minLength": 1,
          "maxLength": 50
        }
      },
      "ORCHESTRATORNodeServices": {
        "service_name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        }
      },
      "ORCHESTRATORNodeServicesRequest": {
        "service_name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORNodes": {
        "hash_id": {
          "pattern": ".*"
        },
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "ORCHESTRATORNodesRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORPaginatedNodeGroupsList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ORCHESTRATORPaginatedResponseListNodeGroupsByIdList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ORCHESTRATORPaginatedResponseListNodeServicesList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ORCHESTRATORPaginatedResponseListNodesList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ORCHESTRATORPaginatedResponseListServicesList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ORCHESTRATORPaginatedServiceResourceList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "ORCHESTRATORPatchedNodesRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORPatchedServicesRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "min_version": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseBadRequestNodeGroupsById": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseBadRequestNodeServiceBind": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseBadRequestNodeServices": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseBadRequestNodes": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseBadRequestServices": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseDeleteNodeServiceBind": {},
      "ORCHESTRATORResponseDeleteNodes": {},
      "ORCHESTRATORResponseDeleteServices": {},
      "ORCHESTRATORResponseListNodeGroupsById": {
        "name": {
          "maxLength": 100
        }
      },
      "ORCHESTRATORResponseListNodeServices": {
        "service_name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        }
      },
      "ORCHESTRATORResponseListNodes": {
        "hash_id": {
          "pattern": ".*"
        },
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "ORCHESTRATORResponseListServices": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "min_version": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "ORCHESTRATORResponseNodeGroupsById": {},
      "ORCHESTRATORResponseNodeServices": {},
      "ORCHESTRATORResponseNodes": {},
      "ORCHESTRATORResponseRetrieveNodeServiceBind": {},
      "ORCHESTRATORResponseRetrieveNodes": {},
      "ORCHESTRATORResponseRetrieveServices": {},
      "ORCHESTRATORResponseServices": {},
      "ORCHESTRATORServiceResource": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_hash": {
          "minLength": 1,
          "maxLength": 150,
          "pattern": ".*"
        },
        "content_type": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_group": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_mode": {
          "minLength": 1,
          "maxLength": 4,
          "pattern": ".*"
        },
        "file_owner": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        }
      },
      "ORCHESTRATORServiceResourceId": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_hash": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_type": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_group": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_mode": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_owner": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        }
      },
      "ORCHESTRATORServiceResourceIdRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_type": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_group": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_mode": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_owner": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORServiceResourceRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "content_type": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_group": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "file_mode": {
          "minLength": 1,
          "maxLength": 4,
          "pattern": ".*"
        },
        "file_owner": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORServices": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "min_version": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "last_modified": {
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "ORCHESTRATORServicesRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "min_version": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "ORCHESTRATORStateEnum": {},
      "ORCHESTRATORStatusEnum": {},
      "ORCHESTRATORTriggerEnum": {},
      "VCSBuildContextField": {
        "field": {
          "maxLength": 255
        },
        "value": {
          "maxLength": 255
        },
        "instantiation_data_path": {
          "maxLength": 255
        }
      },
      "VCSBuildContextFieldRequest": {
        "field": {
          "minLength": 1,
          "maxLength": 255
        },
        "value": {
          "minLength": 1,
          "maxLength": 255
        },
        "instantiation_data_path": {
          "maxLength": 255
        }
      },
      "VCSContinuousDeployment": {
        "name": {
          "maxLength": 100
        },
        "repository": {
          "maxLength": 100,
          "pattern": "^[A-Za-z0-9\\_.\\-]+$"
        },
        "branch": {
          "maxLength": 255
        }
      },
      "VCSContinuousDeploymentRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100
        },
        "repository": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[A-Za-z0-9\\_.\\-]+$"
        },
        "branch": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "VCSExecution": {
        "status": {
          "maxLength": 50
        }
      },
      "VCSExecutionScript": {},
      "VCSExecutionScriptRequest": {
        "name": {
          "minLength": 1
        }
      },
      "VCSExecutor": {},
      "VCSIntegration": {},
      "VCSJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "VCSJSONAPIErrorResponse": {},
      "VCSJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "VCSPaginatedResponseListContinuousDeploymentList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "VCSPaginatedResponseListExecutionList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "VCSPaginatedResponseListExecutionScriptList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "VCSPaginatedResponseListIntegrationList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "VCSPaginatedResponseListPlatformList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "VCSPaginatedResponseListRepositoryList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "VCSPatchedContinuousDeploymentRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 100
        },
        "repository": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "^[A-Za-z0-9\\_.\\-]+$"
        },
        "branch": {
          "minLength": 1,
          "maxLength": 255
        }
      },
      "VCSPlatform": {
        "id": {
          "pattern": "^[-a-zA-Z0-9_]+$"
        }
      },
      "VCSResponseAsyncContinuousDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseAsyncDeleteContinuousDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseAsyncDeleteIntegration": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseAsyncExecution": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseAsyncExecutor": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseContinuousDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseDeleteContinuousDeployment": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseDeleteIntegration": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseExecution": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseExecutor": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "VCSResponseListContinuousDeployment": {
        "name": {
          "maxLength": 100
        },
        "repository": {
          "maxLength": 100,
          "pattern": "^[A-Za-z0-9\\_.\\-]+$"
        },
        "branch": {
          "maxLength": 255
        }
      },
      "VCSResponseListExecution": {
        "status": {
          "maxLength": 50
        }
      },
      "VCSResponseListExecutionScript": {},
      "VCSResponseListIntegration": {},
      "VCSResponseListPlatform": {
        "id": {
          "pattern": "^[-a-zA-Z0-9_]+$"
        }
      },
      "VCSResponseListRepository": {},
      "VCSResponseRetrieveContinuousDeployment": {},
      "VCSResponseRetrieveExecutionScript": {},
      "VCSResponseRetrieveExecutor": {},
      "VCSResponseRetrieveIntegration": {},
      "DNSAlgType": {
        "id": {
          "minimum": 1,
          "maximum": 4294967295
        },
        "slug": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "\\w"
        }
      },
      "DNSAlgTypeRequest": {
        "id": {
          "minimum": 1,
          "maximum": 4294967295
        },
        "slug": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "\\w"
        }
      },
      "DNSDNSSEC": {},
      "DNSDNSSECRequest": {},
      "DNSDelegationSigner": {
        "digest": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "\\w"
        },
        "key_tag": {
          "minimum": 1,
          "maximum": 65535
        }
      },
      "DNSDelegationSignerRequest": {
        "digest": {
          "minLength": 1,
          "maxLength": 100,
          "pattern": "\\w"
        },
        "key_tag": {
          "minimum": 1,
          "maximum": 65535
        }
      },
      "DNSJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "DNSJSONAPIErrorResponse": {},
      "DNSJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "DNSPaginatedRecordList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "DNSPaginatedZoneList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "DNSPatchedDNSSECRequest": {},
      "DNSPatchedRecordRequest": {
        "description": {
          "minLength": 0,
          "maxLength": 45,
          "pattern": ".*"
        },
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"
        },
        "ttl": {
          "minimum": 1,
          "maximum": 2147483647
        },
        "weight": {
          "minimum": 0,
          "maximum": 255
        }
      },
      "DNSPatchedUpdateZoneRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "DNSPolicyEnum": {},
      "DNSRecord": {
        "description": {
          "minLength": 0,
          "maxLength": 45,
          "pattern": ".*"
        },
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"
        },
        "ttl": {
          "minimum": 1,
          "maximum": 2147483647
        },
        "weight": {
          "minimum": 0,
          "maximum": 255
        }
      },
      "DNSRecordRequest": {
        "description": {
          "minLength": 0,
          "maxLength": 45,
          "pattern": ".*"
        },
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^(?:(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_])\\.)*(?:(?!-)[a-zA-Z0-9-_*]{1,63}(?<![-_]))|@)$"
        },
        "ttl": {
          "minimum": 1,
          "maximum": 2147483647
        },
        "weight": {
          "minimum": 0,
          "maximum": 255
        }
      },
      "DNSResponseAsyncDNSSEC": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseAsyncDeleteRecord": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseAsyncDeleteZone": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseAsyncRecord": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseAsyncZone": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseDNSSEC": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseDeleteRecord": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseDeleteZone": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseRecord": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSResponseRetrieveDNSSEC": {},
      "DNSResponseRetrieveRecord": {},
      "DNSResponseRetrieveZone": {},
      "DNSResponseZone": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "DNSStatusEnum": {},
      "DNSTypeEnum": {},
      "DNSUpdateZoneRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        }
      },
      "DNSZone": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "domain": {
          "minLength": 1,
          "maxLength": 200,
          "pattern": "(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\.)+[a-zA-Z]{2,63}$)"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "DNSZoneRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 50,
          "pattern": ".*"
        },
        "domain": {
          "minLength": 1,
          "maxLength": 200,
          "pattern": "(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\.)+[a-zA-Z]{2,63}$)"
        }
      },
      "BILLINGJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "BILLINGJSONAPIErrorResponse": {},
      "BILLINGJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "TLSAuthorityEnum": {},
      "TLSCertificate": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "certificate": {
          "minLength": 1,
          "maxLength": 600000,
          "pattern": ".*"
        },
        "issuer": {
          "pattern": ".*"
        },
        "status_detail": {
          "minLength": 0,
          "maxLength": 500,
          "pattern": ".*"
        },
        "csr": {
          "pattern": ".*"
        },
        "key_algorithm": {
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        }
      },
      "TLSCertificateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "certificate": {
          "minLength": 1,
          "maxLength": 600000,
          "pattern": ".*"
        },
        "private_key": {
          "minLength": 1,
          "maxLength": 64000,
          "pattern": ".*"
        }
      },
      "TLSCertificateRequestRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "certificate": {
          "minLength": 1,
          "maxLength": 600000,
          "pattern": ".*"
        },
        "private_key": {
          "minLength": 1,
          "maxLength": 64000,
          "pattern": ".*"
        },
        "common_name": {
          "minLength": 1,
          "maxLength": 64,
          "pattern": "^(((\\*\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"
        },
        "source_certificate": {
          "minimum": 1,
          "maximum": 2147483647
        }
      },
      "TLSCertificateRevocationList": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "product_version": {
          "minLength": 3,
          "maxLength": 50,
          "pattern": "\\d+\\.\\d+"
        },
        "issuer": {
          "minLength": 1
        },
        "crl": {
          "minLength": 1,
          "maxLength": 30720000,
          "pattern": ".*"
        }
      },
      "TLSCertificateRevocationListRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "crl": {
          "minLength": 1,
          "maxLength": 30720000,
          "pattern": ".*"
        }
      },
      "TLSCertificateSigningRequestRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "certificate": {
          "minLength": 1,
          "maxLength": 600000,
          "pattern": ".*"
        },
        "private_key": {
          "minLength": 1,
          "maxLength": 64000,
          "pattern": ".*"
        },
        "common_name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": "^(((\\*\\.)?[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)$"
        },
        "country": {
          "minLength": 2,
          "maxLength": 2,
          "pattern": "[a-zA-Z]{2}"
        },
        "state": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "locality": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "organization": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "organization_unity": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "email": {
          "minLength": 1
        }
      },
      "TLSChallengeEnum": {},
      "TLSDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "TLSJSONAPIErrorObject": {
        "status": {
          "minLength": 3,
          "maxLength": 3,
          "pattern": "^\\d{3}$"
        },
        "code": {
          "minLength": 5,
          "maxLength": 5,
          "pattern": "^\\d{5}$"
        },
        "title": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "TLSJSONAPIErrorResponse": {},
      "TLSJSONAPIErrorSource": {
        "pointer": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(/[^/]+)+$"
        },
        "parameter": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        },
        "header": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^.*$"
        }
      },
      "TLSKeyAlgorithmEnum": {},
      "TLSNullEnum": {},
      "TLSPaginatedCertificateList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "TLSPaginatedCertificateRevocationListList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "TLSPatchedCertificateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "certificate": {
          "minLength": 1,
          "maxLength": 600000,
          "pattern": ".*"
        },
        "private_key": {
          "minLength": 1,
          "maxLength": 64000,
          "pattern": ".*"
        }
      },
      "TLSPatchedCertificateRevocationListRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 250,
          "pattern": ".*"
        },
        "crl": {
          "minLength": 1,
          "maxLength": 30720000,
          "pattern": ".*"
        }
      },
      "TLSResponseAsyncCertificate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseAsyncCertificateRevocationList": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseAsyncDeleteCertificate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseAsyncDeleteCertificateRevocationList": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseBadRequestCertificate": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "TLSResponseCertificate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseCertificateRevocationList": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseDeleteCertificate": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseDeleteCertificateRevocationList": {
        "state": {
          "minLength": 1,
          "maxLength": 8,
          "pattern": ".*"
        }
      },
      "TLSResponseRetrieveCertificate": {},
      "TLSResponseRetrieveCertificateRevocationList": {},
      "TLSStatusEnum": {},
      "TLSTypeEnum": {},
      "MARKETPLACEDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "MARKETPLACEPublisher": {
        "icon": {
          "maxLength": 200
        }
      },
      "MARKETPLACEPublisherRequest": {
        "icon": {
          "minLength": 1,
          "maxLength": 200
        }
      },
      "MARKETPLACEResponseBadRequestPublisher": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "MARKETPLACEResponsePublisher": {},
      "MARKETPLACEResponseRetrievePublisher": {},
      "MARKETPLACEStateEnum": {},
      "IDENTITYDefaultErrorResponse": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYFavorite": {
        "uri": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^/v\\d/[a-zA-Z0-9_-]+/"
        }
      },
      "IDENTITYFavoriteRequest": {
        "uri": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^/v\\d/[a-zA-Z0-9_-]+/"
        }
      },
      "IDENTITYGrant": {
        "account_id": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYGrantRequest": {
        "account_id": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYGroup": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        }
      },
      "IDENTITYGroupMembers": {},
      "IDENTITYGroupMembersRequest": {},
      "IDENTITYGroupRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYPaginatedResponseListFavoriteList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYPaginatedResponseListGrantList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYPaginatedResponseListGroupList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYPaginatedResponseListServiceTokenList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYPaginatedResponseListUserList": {
        "count": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYPatchedGrantRequest": {
        "account_id": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYPatchedGroupRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYPatchedServiceTokenUpdateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYPatchedUserRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "email": {
          "minLength": 1,
          "maxLength": 255
        },
        "phone": {
          "minLength": 1,
          "maxLength": 31,
          "pattern": "^[+\\d()\\-/.\\s]*$"
        }
      },
      "IDENTITYResponseBadRequestFavorite": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestGrant": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestGroup": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestGroupMembers": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestServiceToken": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestServiceTokenRenew": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestUser": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseBadRequestUserInfo": {
        "detail": {
          "minLength": 1,
          "maxLength": 4096,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseDeleteFavorite": {},
      "IDENTITYResponseDeleteGrant": {},
      "IDENTITYResponseDeleteGroup": {},
      "IDENTITYResponseDeleteServiceToken": {},
      "IDENTITYResponseDeleteUser": {},
      "IDENTITYResponseFavorite": {},
      "IDENTITYResponseGrant": {},
      "IDENTITYResponseGroup": {},
      "IDENTITYResponseGroupMembers": {},
      "IDENTITYResponseListFavorite": {
        "uri": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^/v\\d/[a-zA-Z0-9_-]+/"
        }
      },
      "IDENTITYResponseListGrant": {
        "account_id": {
          "minimum": 0,
          "maximum": 2147483647
        }
      },
      "IDENTITYResponseListGroup": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        }
      },
      "IDENTITYResponseListServiceToken": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYResponseListUser": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "email": {
          "maxLength": 255
        },
        "last_editor": {
          "pattern": ".*"
        },
        "phone": {
          "minLength": 1,
          "maxLength": 31,
          "pattern": "^[+\\d()\\-/.\\s]*$"
        }
      },
      "IDENTITYResponseRetrieveGrant": {},
      "IDENTITYResponseRetrieveGroup": {},
      "IDENTITYResponseRetrieveGroupMembers": {},
      "IDENTITYResponseRetrieveServiceToken": {},
      "IDENTITYResponseRetrieveUser": {},
      "IDENTITYResponseRetrieveUserInfo": {},
      "IDENTITYResponseServiceToken": {},
      "IDENTITYResponseServiceTokenCreate": {},
      "IDENTITYResponseServiceTokenRenew": {},
      "IDENTITYResponseUser": {},
      "IDENTITYResponseUserInfo": {},
      "IDENTITYServiceToken": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYServiceTokenCreate": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "token": {
          "pattern": ".*"
        }
      },
      "IDENTITYServiceTokenCreateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYServiceTokenRenew": {
        "name": {
          "minLength": 1,
          "pattern": ".*"
        },
        "last_editor": {
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "pattern": ".*"
        },
        "token": {
          "pattern": ".*"
        }
      },
      "IDENTITYServiceTokenRenewRequest": {},
      "IDENTITYServiceTokenUpdateRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "description": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        }
      },
      "IDENTITYStateEnum": {},
      "IDENTITYUser": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "email": {
          "maxLength": 255
        },
        "last_editor": {
          "pattern": ".*"
        },
        "phone": {
          "minLength": 1,
          "maxLength": 31,
          "pattern": "^[+\\d()\\-/.\\s]*$"
        }
      },
      "IDENTITYUserInfo": {},
      "IDENTITYUserRequest": {
        "name": {
          "minLength": 1,
          "maxLength": 255,
          "pattern": ".*"
        },
        "email": {
          "minLength": 1,
          "maxLength": 255
        },
        "phone": {
          "minLength": 1,
          "maxLength": 31,
          "pattern": "^[+\\d()\\-/.\\s]*$"
        }
      }
    },
    "businessRules": {
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsShared": [
        {
          "type": "dependency",
          "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
        }
      ],
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsShared": [
        {
          "type": "dependency",
          "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
        }
      ],
      "EDGEFirewallBehaviorsShared": [
        {
          "type": "dependency",
          "description": "Polymorphic serializer base class.\n\nNote that the discriminator field must exist at the same depth as the mapped\nserializer fields for the OpenAPI introspection. See\nhttps://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for\nmore information. As such, it's not possible to define something like:\n\n{\n    \"object_type\": \"foo\",\n    \"polymorphic_context\": {\n        <foo-specific fields>\n    }\n}\n\nwithout explicitly wrapping this in a parent serializer, i.e. -\n``polymorphic_context`` can not be a PolymorphicSerializer itself, as it requires\naccess to the ``object_type`` in the parent scope."
        }
      ],
      "METRICSComparisonTypeEnum": [
        {
          "type": "dependency",
          "description": "* `inverse` - The lower the value, the better the result or performance.\n* `neutral` - There is no general rule to say whether a value is good or bad, as it depends on the context.\n* `regular` - The higher the value, the better the result or performance."
        }
      ]
    },
    "crossFieldValidation": {
      "AUTHLoginResponse": {
        "discriminator": {
          "propertyName": "response_type",
          "mapping": {
            "TokenPair": "#/components/schemas/AUTHTokenPair",
            "MFAToken": "#/components/schemas/AUTHMFAToken"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/AUTHTokenPair"
          },
          {
            "reference": "#/components/schemas/AUTHMFAToken"
          }
        ]
      },
      "EDGEApplicationAcceleratorModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEApplicationAcceleratorModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEApplicationRuleEngineRequestPhaseBehaviors": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "no_content": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "finish_request_phase": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString",
            "forward_cookies": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "optimize_images": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "bypass_cache": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "filter_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction",
            "set_origin": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin",
            "redirect_http_to_https": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs",
            "set_connector": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector",
            "set_cache_policy": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy",
            "rewrite_request": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest",
            "add_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader",
            "filter_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups",
            "add_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgs"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineString"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookie"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunction"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOrigin"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnector"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicy"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroups"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookie"
          }
        ]
      },
      "EDGEApplicationRuleEngineRequestPhaseBehaviorsRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "no_content": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "finish_request_phase": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest",
            "forward_cookies": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "optimize_images": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "bypass_cache": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "filter_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest",
            "set_origin": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest",
            "redirect_http_to_https": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest",
            "set_connector": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest",
            "set_cache_policy": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest",
            "rewrite_request": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest",
            "add_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest",
            "filter_request_header": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest",
            "add_request_cookie": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineNoArgsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineStringRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterRequestCookieRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRunFunctionRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetOriginRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetConnectorRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineSetCachePolicyRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineRewriteRequestRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineFilterHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineRequestPhaseBehaviorsApplicationRuleEngineAddRequestCookieRequest"
          }
        ]
      },
      "EDGEApplicationRuleEngineResponsePhaseBehaviors": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
            "filter_response_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse",
            "set_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie",
            "add_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader",
            "filter_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgs"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseString"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponse"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookie"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeader"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroups"
          }
        ]
      },
      "EDGEApplicationRuleEngineResponsePhaseBehaviorsRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "enable_gzip": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest",
            "deliver": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest",
            "redirect_to_301": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
            "redirect_to_302": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
            "filter_response_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest",
            "run_function": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest",
            "set_cookie": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest",
            "add_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest",
            "filter_response_header": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest",
            "capture_match_groups": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseNoArgsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineResponseStringRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineRunFunctionResponseRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineSetCookieRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineAddResponseHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineFilterResponseHeaderRequest"
          },
          {
            "reference": "#/components/schemas/EDGEApplicationRuleEngineResponsePhaseBehaviorsApplicationRuleEngineCaptureMatchGroupsRequest"
          }
        ]
      },
      "EDGECacheModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGECacheModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGECacheVaryByQuerystringModule": {
        "toggles": [
          {
            "field": "sort_enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGECacheVaryByQuerystringModuleRequest": {
        "toggles": [
          {
            "field": "sort_enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGEConnectorPolymorphic": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/EDGEConnectorHTTP",
            "storage": "#/components/schemas/EDGEConnectorStorage",
            "live_ingest": "#/components/schemas/EDGEConnectorLiveIngest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEConnectorHTTP"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorStorage"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorLiveIngest"
          }
        ]
      },
      "EDGEConnectorPolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/EDGEConnectorHTTPRequest",
            "storage": "#/components/schemas/EDGEConnectorStorageRequest",
            "live_ingest": "#/components/schemas/EDGEConnectorLiveIngestRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEConnectorHTTPRequest"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorStorageRequest"
          },
          {
            "reference": "#/components/schemas/EDGEConnectorLiveIngestRequest"
          }
        ]
      },
      "EDGEDeploymentStrategy": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "default": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategy"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategy"
          }
        ]
      },
      "EDGEDeploymentStrategyRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "default": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategyRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEDeploymentStrategyDefaultDeploymentStrategyRequest"
          }
        ]
      },
      "EDGEEdgeApplicationCriterionPolymorphicArgument": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "EDGEEdgeApplicationCriterionPolymorphicArgumentRequest": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "EDGEEdgeFirewallCriterionPolymorphicArgument": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "EDGEEdgeFirewallCriterionPolymorphicArgumentRequest": {
        "oneOf": [
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "integer",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          },
          {
            "name": "oneOf_variant",
            "type": "string",
            "properties": {},
            "required": [],
            "constraints": {},
            "relationships": [],
            "conditional_fields": {},
            "examples": []
          }
        ]
      },
      "EDGEEdgeFunctionModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGEEdgeFunctionModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGEFirewallBehaviors": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArguments",
            "drop": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArguments",
            "set_custom_response": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse",
            "set_rate_limit": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit",
            "tag_event": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEvent",
            "set_waf": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWaf",
            "run_function": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunction"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArguments"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponse"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimit"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEvent"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWaf"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunction"
          }
        ]
      },
      "EDGEFirewallBehaviorsRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deny": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest",
            "drop": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest",
            "set_custom_response": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest",
            "set_rate_limit": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest",
            "tag_event": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest",
            "set_waf": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest",
            "run_function": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorNoArgumentsRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetCustomResponseRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetRateLimitRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorTagEventRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorSetWafRequest"
          },
          {
            "reference": "#/components/schemas/EDGEFirewallBehaviorsFirewallBehaviorRunFunctionRequest"
          }
        ]
      },
      "EDGEFirewallModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGEFirewallModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": true
          }
        ]
      },
      "EDGEHMAC": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEHMACPolymorphic": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "aws4_hmac_sha256": "#/components/schemas/EDGEAWS4HMAC"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEAWS4HMAC"
          }
        ]
      },
      "EDGEHMACPolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "aws4_hmac_sha256": "#/components/schemas/EDGEAWS4HMACRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEAWS4HMACRequest"
          }
        ]
      },
      "EDGEHMACRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEImageProcessorModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEImageProcessorModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGELargeFileCacheModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGELargeFileCacheModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGELoadBalancerModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGELoadBalancerModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEOriginIPACL": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEOriginIPACLRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEOriginShieldModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEOriginShieldModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEPagePolymorphic": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "page_connector": "#/components/schemas/EDGEPageConnector"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEPageConnector"
          }
        ]
      },
      "EDGEPagePolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "page_connector": "#/components/schemas/EDGEPageConnectorRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEPageConnectorRequest"
          }
        ]
      },
      "EDGEPatchedConnectorPolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "http": "#/components/schemas/EDGEPatchedConnectorHTTPRequest",
            "storage": "#/components/schemas/EDGEPatchedConnectorStorageRequest",
            "live_ingest": "#/components/schemas/EDGEPatchedConnectorLiveIngestRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEPatchedConnectorHTTPRequest"
          },
          {
            "reference": "#/components/schemas/EDGEPatchedConnectorStorageRequest"
          },
          {
            "reference": "#/components/schemas/EDGEPatchedConnectorLiveIngestRequest"
          }
        ]
      },
      "EDGEStateCacheModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEStateCacheModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGETieredCacheModule": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGETieredCacheModuleRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "EDGEWAFExceptionPolymorphicCondition": {
        "discriminator": {
          "propertyName": "match",
          "mapping": {
            "any_http_header_name": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_http_header_value": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_query_string_name": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_query_string_value": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "any_url": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "body_form_field_name": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "body_form_field_value": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "file_extension": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "raw_body": "#/components/schemas/EDGEWAFExceptionGenericCondition",
            "specific_body_form_field_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName",
            "specific_body_form_field_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue",
            "specific_http_header_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName",
            "specific_http_header_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue",
            "specific_query_string_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName",
            "specific_query_string_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEWAFExceptionGenericCondition"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnName"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValue"
          }
        ]
      },
      "EDGEWAFExceptionPolymorphicConditionRequest": {
        "discriminator": {
          "propertyName": "match",
          "mapping": {
            "any_http_header_name": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_http_header_value": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_query_string_name": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_query_string_value": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "any_url": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "body_form_field_name": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "body_form_field_value": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "file_extension": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "raw_body": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest",
            "specific_body_form_field_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest",
            "specific_body_form_field_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest",
            "specific_http_header_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest",
            "specific_http_header_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest",
            "specific_query_string_name": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest",
            "specific_query_string_value": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/EDGEWAFExceptionGenericConditionRequest"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnNameRequest"
          },
          {
            "reference": "#/components/schemas/EDGEWAFExceptionSpecificConditionOnValueRequest"
          }
        ]
      },
      "ACCOUNTSAccount": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSBrand",
            "Organization": "#/components/schemas/ACCOUNTSOrganization",
            "Reseller": "#/components/schemas/ACCOUNTSReseller",
            "Workspace": "#/components/schemas/ACCOUNTSWorkspace"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSBrand"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSOrganization"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSReseller"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSWorkspace"
          }
        ]
      },
      "ACCOUNTSAccountRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSBrandRequest",
            "Organization": "#/components/schemas/ACCOUNTSOrganizationRequest",
            "Reseller": "#/components/schemas/ACCOUNTSResellerRequest",
            "Workspace": "#/components/schemas/ACCOUNTSWorkspaceRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSBrandRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSOrganizationRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSResellerRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSWorkspaceRequest"
          }
        ]
      },
      "ACCOUNTSCreateAccountRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSCreateBrandRequest",
            "Organization": "#/components/schemas/ACCOUNTSCreateOrganizationRequest",
            "Reseller": "#/components/schemas/ACCOUNTSCreateResellerRequest",
            "Workspace": "#/components/schemas/ACCOUNTSCreateWorkspaceRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSCreateBrandRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSCreateOrganizationRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSCreateResellerRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSCreateWorkspaceRequest"
          }
        ]
      },
      "ACCOUNTSPatchedAccountRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSPatchedBrandRequest",
            "Organization": "#/components/schemas/ACCOUNTSPatchedOrganizationRequest",
            "Reseller": "#/components/schemas/ACCOUNTSPatchedResellerRequest",
            "Workspace": "#/components/schemas/ACCOUNTSPatchedWorkspaceRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedBrandRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedOrganizationRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedResellerRequest"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSPatchedWorkspaceRequest"
          }
        ]
      },
      "ACCOUNTSResponseListAccount": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Brand": "#/components/schemas/ACCOUNTSBrand",
            "Organization": "#/components/schemas/ACCOUNTSOrganization",
            "Reseller": "#/components/schemas/ACCOUNTSReseller",
            "Workspace": "#/components/schemas/ACCOUNTSWorkspace"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/ACCOUNTSBrand"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSOrganization"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSReseller"
          },
          {
            "reference": "#/components/schemas/ACCOUNTSWorkspace"
          }
        ]
      },
      "DATAInputPolymorphic": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "raw_logs": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributes"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributes"
          }
        ]
      },
      "DATAInputPolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "raw_logs": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributesRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAInputPolymorphicInputDataSourceAttributesRequest"
          }
        ]
      },
      "DATAOutputPolymorphic": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "standard": "#/components/schemas/DATAHttpPostEndpoint",
            "kafka": "#/components/schemas/DATAKafkaEndpoint",
            "s3": "#/components/schemas/DATAS3Endpoint",
            "big_query": "#/components/schemas/DATABigQueryEndpoint",
            "elasticsearch": "#/components/schemas/DATAElasticsearchEndpoint",
            "aws_kinesis_firehose": "#/components/schemas/DATAAWSKinesisFirehoseEndpoint",
            "datadog": "#/components/schemas/DATADatadogEndpoint",
            "qradar": "#/components/schemas/DATAQRadarEndpoint",
            "azure_monitor": "#/components/schemas/DATAAzureMonitorEndpoint",
            "azure_blob_storage": "#/components/schemas/DATAAzureBlobStorageEndpoint",
            "splunk": "#/components/schemas/DATASplunkEndpoint"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAHttpPostEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAKafkaEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAS3Endpoint"
          },
          {
            "reference": "#/components/schemas/DATABigQueryEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAElasticsearchEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAAWSKinesisFirehoseEndpoint"
          },
          {
            "reference": "#/components/schemas/DATADatadogEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAQRadarEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAAzureMonitorEndpoint"
          },
          {
            "reference": "#/components/schemas/DATAAzureBlobStorageEndpoint"
          },
          {
            "reference": "#/components/schemas/DATASplunkEndpoint"
          }
        ]
      },
      "DATAOutputPolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "standard": "#/components/schemas/DATAHttpPostEndpointRequest",
            "kafka": "#/components/schemas/DATAKafkaEndpointRequest",
            "s3": "#/components/schemas/DATAS3EndpointRequest",
            "big_query": "#/components/schemas/DATABigQueryEndpointRequest",
            "elasticsearch": "#/components/schemas/DATAElasticsearchEndpointRequest",
            "aws_kinesis_firehose": "#/components/schemas/DATAAWSKinesisFirehoseEndpointRequest",
            "datadog": "#/components/schemas/DATADatadogEndpointRequest",
            "qradar": "#/components/schemas/DATAQRadarEndpointRequest",
            "azure_monitor": "#/components/schemas/DATAAzureMonitorEndpointRequest",
            "azure_blob_storage": "#/components/schemas/DATAAzureBlobStorageEndpointRequest",
            "splunk": "#/components/schemas/DATASplunkEndpointRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATAHttpPostEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAKafkaEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAS3EndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATABigQueryEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAElasticsearchEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAAWSKinesisFirehoseEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATADatadogEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAQRadarEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAAzureMonitorEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATAAzureBlobStorageEndpointRequest"
          },
          {
            "reference": "#/components/schemas/DATASplunkEndpointRequest"
          }
        ]
      },
      "DATATransformPolymorphic": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sampling": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributes",
            "filter_workloads": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributes",
            "render_template": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributes"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributes"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributes"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributes"
          }
        ]
      },
      "DATATransformPolymorphicRequest": {
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sampling": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributesRequest",
            "filter_workloads": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest",
            "render_template": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributesRequest"
          }
        },
        "oneOf": [
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformSamplingAttributesRequest"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformFilterWorkloadsAttributesRequest"
          },
          {
            "reference": "#/components/schemas/DATATransformPolymorphicTransformRenderTemplateAttributesRequest"
          }
        ]
      },
      "DNSDNSSEC": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle"
          }
        ]
      },
      "DNSDNSSECRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle"
          }
        ]
      },
      "DNSPatchedDNSSECRequest": {
        "toggles": [
          {
            "field": "enabled",
            "type": "boolean_toggle"
          }
        ]
      },
      "IDENTITYPatchedUserRequest": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "IDENTITYResponseListUser": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "IDENTITYUser": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      },
      "IDENTITYUserRequest": {
        "toggles": [
          {
            "field": "two_factor_enabled",
            "type": "boolean_toggle",
            "default": false
          }
        ]
      }
    }
  },
  "examples": {
    "requestExamples": {},
    "responseExamples": {},
    "propertyExamples": {
      "AUTHResponseAsyncDeletePolicy.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncDeleteTOTPDeviceCreate.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncLockoutPolicy.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncLogin.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncPolicy.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncSessionTimeoutPolicy.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncTOTPDeviceCreate.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncToken.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseAsyncTokenPair.state": {
        "default": "pending",
        "type": "string"
      },
      "AUTHResponseDeletePolicy.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseDeleteTOTPDeviceCreate.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseLockoutPolicy.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseLogin.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponsePolicy.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseSessionTimeoutPolicy.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseTOTPDeviceCreate.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseToken.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHResponseTokenPair.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHStateExecutedResponse.state": {
        "default": "executed",
        "type": "string"
      },
      "AUTHStatePendingResponse.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEAWS4HMACAttributes.service": {
        "default": "s3",
        "type": "string"
      },
      "EDGEAWS4HMACAttributesRequest.service": {
        "default": "s3",
        "type": "string"
      },
      "EDGEAddress.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEAddress.http_port": {
        "default": 80,
        "type": "integer"
      },
      "EDGEAddress.https_port": {
        "default": 443,
        "type": "integer"
      },
      "EDGEAddressLoadBalancerModule.server_role": {
        "default": "primary",
        "type": "unknown"
      },
      "EDGEAddressLoadBalancerModule.weight": {
        "default": 1,
        "type": "integer"
      },
      "EDGEAddressLoadBalancerModuleRequest.server_role": {
        "default": "primary",
        "type": "unknown"
      },
      "EDGEAddressLoadBalancerModuleRequest.weight": {
        "default": 1,
        "type": "integer"
      },
      "EDGEAddressRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEAddressRequest.http_port": {
        "default": 80,
        "type": "integer"
      },
      "EDGEAddressRequest.https_port": {
        "default": 443,
        "type": "integer"
      },
      "EDGEApplication.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEApplication.debug": {
        "default": false,
        "type": "boolean"
      },
      "EDGEApplicationAcceleratorModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEApplicationAcceleratorModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEApplicationFunctionInstance.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEApplicationFunctionInstanceRequest.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEApplicationModules.edge_cache": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEApplicationModules.functions": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEApplicationModules.application_accelerator": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEApplicationModules.image_processor": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEApplicationModules.tiered_cache": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEApplicationModulesRequest.edge_cache": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEApplicationModulesRequest.functions": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEApplicationModulesRequest.application_accelerator": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEApplicationModulesRequest.image_processor": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEApplicationModulesRequest.tiered_cache": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEApplicationRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEApplicationRequest.debug": {
        "default": false,
        "type": "boolean"
      },
      "EDGEApplicationRequestPhaseRuleEngine.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEApplicationRequestPhaseRuleEngineRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEApplicationResponsePhaseRuleEngine.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEApplicationResponsePhaseRuleEngineRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEBrowserCacheModule.behavior": {
        "default": "honor",
        "type": "unknown"
      },
      "EDGEBrowserCacheModule.max_age": {
        "default": 0,
        "type": "integer"
      },
      "EDGEBrowserCacheModuleRequest.behavior": {
        "default": "honor",
        "type": "unknown"
      },
      "EDGEBrowserCacheModuleRequest.max_age": {
        "default": 0,
        "type": "integer"
      },
      "EDGECacheModule.enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGECacheModuleRequest.enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGECacheSettingsEdgeCacheModule.behavior": {
        "default": "honor",
        "type": "unknown"
      },
      "EDGECacheSettingsEdgeCacheModule.max_age": {
        "default": 60,
        "type": "integer"
      },
      "EDGECacheSettingsEdgeCacheModuleRequest.behavior": {
        "default": "honor",
        "type": "unknown"
      },
      "EDGECacheSettingsEdgeCacheModuleRequest.max_age": {
        "default": 60,
        "type": "integer"
      },
      "EDGECacheSettingsTieredCacheModule.behavior": {
        "default": "override",
        "type": "unknown"
      },
      "EDGECacheSettingsTieredCacheModule.max_age": {
        "default": 31536000,
        "type": "integer"
      },
      "EDGECacheVaryByCookiesModule.behavior": {
        "default": "ignore",
        "type": "unknown"
      },
      "EDGECacheVaryByCookiesModule.cookie_names": {
        "default": [],
        "type": "array"
      },
      "EDGECacheVaryByCookiesModuleRequest.behavior": {
        "default": "ignore",
        "type": "unknown"
      },
      "EDGECacheVaryByCookiesModuleRequest.cookie_names": {
        "default": [],
        "type": "array"
      },
      "EDGECacheVaryByDevicesModule.behavior": {
        "default": "ignore",
        "type": "unknown"
      },
      "EDGECacheVaryByDevicesModuleRequest.behavior": {
        "default": "ignore",
        "type": "unknown"
      },
      "EDGECacheVaryByQuerystringModule.behavior": {
        "default": "ignore",
        "type": "unknown"
      },
      "EDGECacheVaryByQuerystringModule.fields": {
        "default": [],
        "type": "array"
      },
      "EDGECacheVaryByQuerystringModule.sort_enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGECacheVaryByQuerystringModuleRequest.behavior": {
        "default": "ignore",
        "type": "unknown"
      },
      "EDGECacheVaryByQuerystringModuleRequest.fields": {
        "default": [],
        "type": "array"
      },
      "EDGECacheVaryByQuerystringModuleRequest.sort_enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGEConnectorHTTP.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEConnectorHTTPAttributes.connection_options": {
        "default": {
          "dns_resolution": "preserve",
          "transport_policy": "preserve",
          "http_version_policy": "http1_1",
          "host": "${host}",
          "path_prefix": "",
          "following_redirect": false,
          "real_ip_header": "X-Real-IP",
          "real_port_header": "X-Real-PORT"
        },
        "type": "unknown"
      },
      "EDGEConnectorHTTPAttributes.modules": {
        "default": {
          "load_balancer": {
            "enabled": false,
            "config": null
          },
          "origin_shield": {
            "enabled": false,
            "config": null
          }
        },
        "type": "unknown"
      },
      "EDGEConnectorHTTPAttributesRequest.connection_options": {
        "default": {
          "dns_resolution": "preserve",
          "transport_policy": "preserve",
          "http_version_policy": "http1_1",
          "host": "${host}",
          "path_prefix": "",
          "following_redirect": false,
          "real_ip_header": "X-Real-IP",
          "real_port_header": "X-Real-PORT"
        },
        "type": "unknown"
      },
      "EDGEConnectorHTTPAttributesRequest.modules": {
        "default": {
          "load_balancer": {
            "enabled": false,
            "config": null
          },
          "origin_shield": {
            "enabled": false,
            "config": null
          }
        },
        "type": "unknown"
      },
      "EDGEConnectorHTTPRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEConnectorLiveIngest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEConnectorLiveIngestRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEConnectorStorage.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEConnectorStorageRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGECustomPage.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGECustomPage.product_version": {
        "default": "1.0",
        "type": "string"
      },
      "EDGECustomPageRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEEdgeApplicationCriterionField.argument": {
        "default": "",
        "type": "unknown"
      },
      "EDGEEdgeApplicationCriterionFieldRequest.argument": {
        "default": "",
        "type": "unknown"
      },
      "EDGEEdgeFirewallCriterionField.argument": {
        "default": "",
        "type": "unknown"
      },
      "EDGEEdgeFirewallCriterionFieldRequest.argument": {
        "default": "",
        "type": "unknown"
      },
      "EDGEEdgeFunctionModule.enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGEEdgeFunctionModuleRequest.enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGEEdgeFunctions.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEEdgeFunctions.runtime": {
        "default": "azion_js",
        "type": "unknown"
      },
      "EDGEEdgeFunctions.execution_environment": {
        "default": "application",
        "type": "unknown"
      },
      "EDGEEdgeFunctions.default_args": {
        "default": {},
        "type": "object"
      },
      "EDGEEdgeFunctions.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEEdgeFunctionsRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEEdgeFunctionsRequest.runtime": {
        "default": "azion_js",
        "type": "unknown"
      },
      "EDGEEdgeFunctionsRequest.execution_environment": {
        "default": "application",
        "type": "unknown"
      },
      "EDGEEdgeFunctionsRequest.default_args": {
        "default": {},
        "type": "object"
      },
      "EDGEEdgeFunctionsRequest.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEFirewall.debug": {
        "default": false,
        "type": "boolean"
      },
      "EDGEFirewall.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEFirewallBehaviorSetCustomResponseAttributes.content_type": {
        "default": "",
        "type": "string"
      },
      "EDGEFirewallBehaviorSetCustomResponseAttributes.content_body": {
        "default": "",
        "type": "string"
      },
      "EDGEFirewallBehaviorSetCustomResponseAttributesRequest.content_type": {
        "default": "",
        "type": "string"
      },
      "EDGEFirewallBehaviorSetCustomResponseAttributesRequest.content_body": {
        "default": "",
        "type": "string"
      },
      "EDGEFirewallBehaviorSetRateLimitAttributes.type": {
        "default": "second",
        "type": "unknown"
      },
      "EDGEFirewallBehaviorSetRateLimitAttributesRequest.type": {
        "default": "second",
        "type": "unknown"
      },
      "EDGEFirewallFunctionInstance.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEFirewallFunctionInstanceRequest.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEFirewallModule.enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGEFirewallModuleRequest.enabled": {
        "default": true,
        "type": "boolean"
      },
      "EDGEFirewallModules.ddos_protection": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEFirewallModules.functions": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEFirewallModules.network_protection": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEFirewallModules.waf": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEFirewallModulesRequest.functions": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEFirewallModulesRequest.network_protection": {
        "default": {
          "enabled": true
        },
        "type": "unknown"
      },
      "EDGEFirewallModulesRequest.waf": {
        "default": {
          "enabled": false
        },
        "type": "unknown"
      },
      "EDGEFirewallRequest.debug": {
        "default": false,
        "type": "boolean"
      },
      "EDGEFirewallRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEFirewallRuleEngine.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEFirewallRuleEngineRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEHMAC.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEHMACRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEHTTPConnectionOptions.dns_resolution": {
        "default": "preserve",
        "type": "unknown"
      },
      "EDGEHTTPConnectionOptions.transport_policy": {
        "default": "preserve",
        "type": "unknown"
      },
      "EDGEHTTPConnectionOptions.http_version_policy": {
        "default": "http1_1",
        "type": "unknown"
      },
      "EDGEHTTPConnectionOptions.host": {
        "default": "${host}",
        "type": "string"
      },
      "EDGEHTTPConnectionOptions.path_prefix": {
        "default": "",
        "type": "string"
      },
      "EDGEHTTPConnectionOptions.following_redirect": {
        "default": false,
        "type": "boolean"
      },
      "EDGEHTTPConnectionOptions.real_ip_header": {
        "default": "X-Real-IP",
        "type": "string"
      },
      "EDGEHTTPConnectionOptions.real_port_header": {
        "default": "X-Real-PORT",
        "type": "string"
      },
      "EDGEHTTPConnectionOptionsRequest.dns_resolution": {
        "default": "preserve",
        "type": "unknown"
      },
      "EDGEHTTPConnectionOptionsRequest.transport_policy": {
        "default": "preserve",
        "type": "unknown"
      },
      "EDGEHTTPConnectionOptionsRequest.http_version_policy": {
        "default": "http1_1",
        "type": "unknown"
      },
      "EDGEHTTPConnectionOptionsRequest.host": {
        "default": "${host}",
        "type": "string"
      },
      "EDGEHTTPConnectionOptionsRequest.path_prefix": {
        "default": "",
        "type": "string"
      },
      "EDGEHTTPConnectionOptionsRequest.following_redirect": {
        "default": false,
        "type": "boolean"
      },
      "EDGEHTTPConnectionOptionsRequest.real_ip_header": {
        "default": "X-Real-IP",
        "type": "string"
      },
      "EDGEHTTPConnectionOptionsRequest.real_port_header": {
        "default": "X-Real-PORT",
        "type": "string"
      },
      "EDGEHTTPModules.load_balancer": {
        "default": {
          "enabled": false,
          "config": null
        },
        "type": "unknown"
      },
      "EDGEHTTPModules.origin_shield": {
        "default": {
          "enabled": false,
          "config": null
        },
        "type": "unknown"
      },
      "EDGEHTTPModulesRequest.load_balancer": {
        "default": {
          "enabled": false,
          "config": null
        },
        "type": "unknown"
      },
      "EDGEHTTPModulesRequest.origin_shield": {
        "default": {
          "enabled": false,
          "config": null
        },
        "type": "unknown"
      },
      "EDGEHttpProtocol.versions": {
        "default": [
          "http1",
          "http2"
        ],
        "type": "array"
      },
      "EDGEHttpProtocol.http_ports": {
        "default": [
          80
        ],
        "type": "array"
      },
      "EDGEHttpProtocol.https_ports": {
        "default": [
          443
        ],
        "type": "array"
      },
      "EDGEHttpProtocolRequest.versions": {
        "default": [
          "http1",
          "http2"
        ],
        "type": "array"
      },
      "EDGEHttpProtocolRequest.http_ports": {
        "default": [
          80
        ],
        "type": "array"
      },
      "EDGEHttpProtocolRequest.https_ports": {
        "default": [
          443
        ],
        "type": "array"
      },
      "EDGEImageProcessorModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEImageProcessorModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGELargeFileCacheModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGELargeFileCacheModule.offset": {
        "default": 1024,
        "type": "integer"
      },
      "EDGELargeFileCacheModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGELargeFileCacheModuleRequest.offset": {
        "default": 1024,
        "type": "integer"
      },
      "EDGELoadBalancerModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGELoadBalancerModuleConfig.method": {
        "default": "round_robin",
        "type": "unknown"
      },
      "EDGELoadBalancerModuleConfig.max_retries": {
        "default": 0,
        "type": "integer"
      },
      "EDGELoadBalancerModuleConfig.connection_timeout": {
        "default": 60,
        "type": "integer"
      },
      "EDGELoadBalancerModuleConfig.read_write_timeout": {
        "default": 120,
        "type": "integer"
      },
      "EDGELoadBalancerModuleConfigRequest.method": {
        "default": "round_robin",
        "type": "unknown"
      },
      "EDGELoadBalancerModuleConfigRequest.max_retries": {
        "default": 0,
        "type": "integer"
      },
      "EDGELoadBalancerModuleConfigRequest.connection_timeout": {
        "default": 60,
        "type": "integer"
      },
      "EDGELoadBalancerModuleConfigRequest.read_write_timeout": {
        "default": 120,
        "type": "integer"
      },
      "EDGELoadBalancerModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGENetworkList.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGENetworkListDetail.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGENetworkListDetailRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEOriginIPACL.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEOriginIPACLRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEOriginShieldModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEOriginShieldModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEPageConnector.type": {
        "default": "page_connector",
        "type": "string"
      },
      "EDGEPageConnectorAttributes.ttl": {
        "default": 0,
        "type": "integer"
      },
      "EDGEPageConnectorAttributesRequest.ttl": {
        "default": 0,
        "type": "integer"
      },
      "EDGEPageConnectorRequest.type": {
        "default": "page_connector",
        "type": "string"
      },
      "EDGEPatchedApplicationFunctionInstanceRequest.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEPatchedApplicationRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedApplicationRequest.debug": {
        "default": false,
        "type": "boolean"
      },
      "EDGEPatchedApplicationRequestPhaseRuleEngineRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedApplicationResponsePhaseRuleEngineRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedConnectorHTTPRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedConnectorLiveIngestRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedConnectorStorageRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedCustomPageRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedEdgeFunctionsRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedEdgeFunctionsRequest.runtime": {
        "default": "azion_js",
        "type": "unknown"
      },
      "EDGEPatchedEdgeFunctionsRequest.execution_environment": {
        "default": "application",
        "type": "unknown"
      },
      "EDGEPatchedEdgeFunctionsRequest.default_args": {
        "default": {},
        "type": "object"
      },
      "EDGEPatchedEdgeFunctionsRequest.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEPatchedFirewallFunctionInstanceRequest.azion_form": {
        "default": {},
        "type": "object"
      },
      "EDGEPatchedFirewallRequest.debug": {
        "default": false,
        "type": "boolean"
      },
      "EDGEPatchedFirewallRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedFirewallRuleEngineRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedNetworkListDetailRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedWAFRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedWAFRequest.product_version": {
        "default": "1.0",
        "type": "string"
      },
      "EDGEPatchedWAFRuleRequest.rule_id": {
        "default": 0,
        "type": "unknown"
      },
      "EDGEPatchedWAFRuleRequest.operator": {
        "default": "contains",
        "type": "unknown"
      },
      "EDGEPatchedWAFRuleRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedWorkloadDeploymentRequest.current": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedWorkloadDeploymentRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedWorkloadRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEPatchedWorkloadRequest.infrastructure": {
        "default": 1,
        "type": "unknown"
      },
      "EDGEPatchedWorkloadRequest.tls": {
        "default": {},
        "type": "unknown"
      },
      "EDGEPatchedWorkloadRequest.protocols": {
        "default": {},
        "type": "unknown"
      },
      "EDGEProtocols.http": {
        "default": {
          "versions": [
            "http1",
            "http2"
          ],
          "http_ports": [
            80
          ],
          "https_ports": [
            443
          ],
          "quic_ports": null
        },
        "type": "unknown"
      },
      "EDGEProtocolsRequest.http": {
        "default": {
          "versions": [
            "http1",
            "http2"
          ],
          "http_ports": [
            80
          ],
          "https_ports": [
            443
          ],
          "quic_ports": null
        },
        "type": "unknown"
      },
      "EDGEPurgeInput.layer": {
        "default": "edge_cache",
        "type": "unknown"
      },
      "EDGEPurgeInputRequest.layer": {
        "default": "edge_cache",
        "type": "unknown"
      },
      "EDGEResponseApplication.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseApplicationDeviceGroups.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseApplicationFunctionInstance.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseApplicationRequestPhaseRuleEngine.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseApplicationResponsePhaseRuleEngine.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseAsyncApplication.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncApplicationDeviceGroups.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncApplicationFunctionInstance.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncApplicationRequestPhaseRuleEngine.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncApplicationResponsePhaseRuleEngine.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncCacheSetting.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncConnectorPolymorphic.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncCustomPage.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteApplication.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteApplicationDeviceGroups.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteApplicationFunctionInstance.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteApplicationRequestPhaseRuleEngine.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteApplicationResponsePhaseRuleEngine.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteCacheSetting.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteConnectorPolymorphic.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteCustomPage.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteFirewall.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteFirewallFunctionInstance.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteFirewallRuleEngine.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteFunctionsDoc.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteNetworkListDetail.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteWAF.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteWAFRule.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteWorkload.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncDeleteWorkloadDeployment.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncFirewall.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncFirewallFunctionInstance.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncFirewallRuleEngine.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncFunctionsDoc.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncNetworkListDetail.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncPurgeInput.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncWAF.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncWAFRule.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncWorkload.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseAsyncWorkloadDeployment.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGEResponseConnectorPolymorphic.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseCustomPage.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteApplication.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteApplicationFunctionInstance.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteApplicationRequestPhaseRuleEngine.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteApplicationResponsePhaseRuleEngine.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteConnectorPolymorphic.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteCustomPage.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteFirewall.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteFirewallFunctionInstance.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteFirewallRuleEngine.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteFunctionsDoc.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteNetworkListDetail.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteWAF.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseDeleteWAFRule.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseFirewall.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseFirewallFunctionInstance.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseFirewallRuleEngine.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseFunctionsDoc.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseNetworkListDetail.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponsePurgeInput.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseWAF.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseWAFRule.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseWorkload.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEResponseWorkloadDeployment.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGEStateCacheModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEStateCacheModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGETLSWorkload.minimum_version": {
        "default": "tls_1_3",
        "type": "unknown"
      },
      "EDGETLSWorkloadRequest.minimum_version": {
        "default": "tls_1_3",
        "type": "unknown"
      },
      "EDGEThresholdsConfigField.sensitivity": {
        "default": "medium",
        "type": "unknown"
      },
      "EDGEThresholdsConfigFieldRequest.sensitivity": {
        "default": "medium",
        "type": "unknown"
      },
      "EDGETieredCacheModule.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGETieredCacheModuleRequest.enabled": {
        "default": false,
        "type": "boolean"
      },
      "EDGEWAF.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWAF.product_version": {
        "default": "1.0",
        "type": "string"
      },
      "EDGEWAFEngineSettingsAttributesField.rulesets": {
        "default": [
          1
        ],
        "type": "array"
      },
      "EDGEWAFEngineSettingsAttributesField.thresholds": {
        "default": [
          {
            "threat": "cross_site_scripting",
            "sensitivity": "medium"
          },
          {
            "threat": "directory_traversal",
            "sensitivity": "medium"
          },
          {
            "threat": "evading_tricks",
            "sensitivity": "medium"
          },
          {
            "threat": "file_upload",
            "sensitivity": "medium"
          },
          {
            "threat": "identified_attack",
            "sensitivity": "medium"
          },
          {
            "threat": "remote_file_inclusion",
            "sensitivity": "medium"
          },
          {
            "threat": "sql_injection",
            "sensitivity": "medium"
          },
          {
            "threat": "unwanted_access",
            "sensitivity": "medium"
          }
        ],
        "type": "array"
      },
      "EDGEWAFEngineSettingsAttributesFieldRequest.rulesets": {
        "default": [
          1
        ],
        "type": "array"
      },
      "EDGEWAFEngineSettingsAttributesFieldRequest.thresholds": {
        "default": [
          {
            "threat": "cross_site_scripting",
            "sensitivity": "medium"
          },
          {
            "threat": "directory_traversal",
            "sensitivity": "medium"
          },
          {
            "threat": "evading_tricks",
            "sensitivity": "medium"
          },
          {
            "threat": "file_upload",
            "sensitivity": "medium"
          },
          {
            "threat": "identified_attack",
            "sensitivity": "medium"
          },
          {
            "threat": "remote_file_inclusion",
            "sensitivity": "medium"
          },
          {
            "threat": "sql_injection",
            "sensitivity": "medium"
          },
          {
            "threat": "unwanted_access",
            "sensitivity": "medium"
          }
        ],
        "type": "array"
      },
      "EDGEWAFEngineSettingsField.engine_version": {
        "default": "2021-Q3",
        "type": "unknown"
      },
      "EDGEWAFEngineSettingsField.type": {
        "default": "score",
        "type": "unknown"
      },
      "EDGEWAFEngineSettingsFieldRequest.engine_version": {
        "default": "2021-Q3",
        "type": "unknown"
      },
      "EDGEWAFEngineSettingsFieldRequest.type": {
        "default": "score",
        "type": "unknown"
      },
      "EDGEWAFRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWAFRequest.product_version": {
        "default": "1.0",
        "type": "string"
      },
      "EDGEWAFRule.rule_id": {
        "default": 0,
        "type": "unknown"
      },
      "EDGEWAFRule.operator": {
        "default": "contains",
        "type": "unknown"
      },
      "EDGEWAFRule.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWAFRuleRequest.rule_id": {
        "default": 0,
        "type": "unknown"
      },
      "EDGEWAFRuleRequest.operator": {
        "default": "contains",
        "type": "unknown"
      },
      "EDGEWAFRuleRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkload.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkload.infrastructure": {
        "default": 1,
        "type": "unknown"
      },
      "EDGEWorkload.tls": {
        "default": {
          "certificate": null,
          "minimum_version": "tls_1_3"
        },
        "type": "unknown"
      },
      "EDGEWorkload.protocols": {
        "default": {
          "http": {
            "versions": [
              "http1",
              "http2"
            ],
            "http_ports": [
              80
            ],
            "https_ports": [
              443
            ],
            "quic_ports": null
          }
        },
        "type": "unknown"
      },
      "EDGEWorkload.workload_domain": {
        "default": "",
        "type": "string"
      },
      "EDGEWorkloadDeployment.current": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkloadDeployment.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkloadDeploymentRequest.current": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkloadDeploymentRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkloadRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGEWorkloadRequest.infrastructure": {
        "default": 1,
        "type": "unknown"
      },
      "EDGEWorkloadRequest.tls": {
        "default": {
          "certificate": null,
          "minimum_version": "tls_1_3"
        },
        "type": "unknown"
      },
      "EDGEWorkloadRequest.protocols": {
        "default": {
          "http": {
            "versions": [
              "http1",
              "http2"
            ],
            "http_ports": [
              80
            ],
            "https_ports": [
              443
            ],
            "quic_ports": null
          }
        },
        "type": "unknown"
      },
      "METRICSLibraryReportRequest.library": {
        "default": true,
        "type": "boolean"
      },
      "METRICSResponseAsyncDashboard.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncDeleteDashboard.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncDeleteFolder.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncDeleteReport.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncDeleteRow.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncFolder.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncOrder.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncReport.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseAsyncRow.state": {
        "default": "pending",
        "type": "string"
      },
      "METRICSResponseDashboard.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseDeleteDashboard.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseDeleteFolder.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseDeleteReport.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseDeleteRow.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseFolder.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseOrder.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseReport.state": {
        "default": "executed",
        "type": "string"
      },
      "METRICSResponseRow.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGESQLDatabaseRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGESQLOpenAPISchema.status": {
        "default": "creating",
        "type": "unknown"
      },
      "EDGESQLOpenAPISchema.active": {
        "default": true,
        "type": "boolean"
      },
      "EDGESQLResponseAsyncDeleteOpenAPISchema.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGESQLResponseAsyncOpenAPISchema.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGESQLResponseAsyncSQLResult.state": {
        "default": "pending",
        "type": "string"
      },
      "EDGESQLResponseDeleteOpenAPISchema.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGESQLResponseOpenAPISchema.state": {
        "default": "executed",
        "type": "string"
      },
      "EDGESQLResponseSQLResult.state": {
        "default": "executed",
        "type": "string"
      },
      "PAYMENTSResponseAsyncCredit.state": {
        "default": "pending",
        "type": "string"
      },
      "PAYMENTSResponseAsyncDeletePaymentMethod.state": {
        "default": "pending",
        "type": "string"
      },
      "PAYMENTSResponseAsyncPaymentMethod.state": {
        "default": "pending",
        "type": "string"
      },
      "PAYMENTSResponseCredit.state": {
        "default": "executed",
        "type": "string"
      },
      "PAYMENTSResponseDeletePaymentMethod.state": {
        "default": "executed",
        "type": "string"
      },
      "PAYMENTSResponsePaymentMethod.state": {
        "default": "executed",
        "type": "string"
      },
      "ACCOUNTSCreateResellerRequest.terms_of_service_url": {
        "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/",
        "type": "string"
      },
      "ACCOUNTSPatchedResellerRequest.terms_of_service_url": {
        "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/",
        "type": "string"
      },
      "ACCOUNTSReseller.terms_of_service_url": {
        "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/",
        "type": "string"
      },
      "ACCOUNTSResellerRequest.terms_of_service_url": {
        "default": "https://www.azion.com/pt-br/documentacao/contratos/tds/",
        "type": "string"
      },
      "ACCOUNTSResponseAccount.state": {
        "default": "executed",
        "type": "string"
      },
      "ACCOUNTSResponseAccountInfo.state": {
        "default": "executed",
        "type": "string"
      },
      "ACCOUNTSResponseAsyncAccount.state": {
        "default": "pending",
        "type": "string"
      },
      "ACCOUNTSResponseAsyncAccountInfo.state": {
        "default": "pending",
        "type": "string"
      },
      "STORAGEBucket.product_version": {
        "default": "1.0",
        "type": "string"
      },
      "STORAGEBucketCreate.product_version": {
        "default": "1.0",
        "type": "string"
      },
      "STORAGEResponseAsyncBucketCreate.state": {
        "default": "pending",
        "type": "string"
      },
      "STORAGEResponseAsyncCredential.state": {
        "default": "pending",
        "type": "string"
      },
      "STORAGEResponseAsyncDeleteBucketCreate.state": {
        "default": "pending",
        "type": "string"
      },
      "STORAGEResponseAsyncDeleteBucketObject.state": {
        "default": "pending",
        "type": "string"
      },
      "STORAGEResponseAsyncDeleteCredential.state": {
        "default": "pending",
        "type": "string"
      },
      "STORAGEResponseBucketCreate.state": {
        "default": "executed",
        "type": "string"
      },
      "STORAGEResponseCredential.state": {
        "default": "executed",
        "type": "string"
      },
      "STORAGEResponseDeleteBucketCreate.state": {
        "default": "executed",
        "type": "string"
      },
      "STORAGEResponseDeleteBucketObject.state": {
        "default": "executed",
        "type": "string"
      },
      "STORAGESuccessObjectOperation.state": {
        "default": "executed",
        "type": "string"
      },
      "STORAGESuccessObjectOperationAsync.state": {
        "default": "pending",
        "type": "string"
      },
      "DATADataStream.active": {
        "default": true,
        "type": "boolean"
      },
      "DATADataStreamRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "DATAPatchedDataStreamRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "DATAPatchedTemplateRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "DATAResponseAsyncDataStream.state": {
        "default": "pending",
        "type": "string"
      },
      "DATAResponseAsyncDeleteDataStream.state": {
        "default": "pending",
        "type": "string"
      },
      "DATAResponseAsyncDeleteTemplate.state": {
        "default": "pending",
        "type": "string"
      },
      "DATAResponseAsyncTemplate.state": {
        "default": "pending",
        "type": "string"
      },
      "DATAResponseDataStream.state": {
        "default": "executed",
        "type": "string"
      },
      "DATAResponseDeleteDataStream.state": {
        "default": "executed",
        "type": "string"
      },
      "DATAResponseDeleteTemplate.state": {
        "default": "executed",
        "type": "string"
      },
      "DATAResponseListDataStream.active": {
        "default": true,
        "type": "boolean"
      },
      "DATAResponseListTemplate.active": {
        "default": true,
        "type": "boolean"
      },
      "DATAResponseTemplate.state": {
        "default": "executed",
        "type": "string"
      },
      "DATATemplate.active": {
        "default": true,
        "type": "boolean"
      },
      "DATATemplateRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "ORCHESTRATORNodeGroups.active": {
        "default": true,
        "type": "boolean"
      },
      "ORCHESTRATORNodeGroupsRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "VCSResponseAsyncContinuousDeployment.state": {
        "default": "pending",
        "type": "string"
      },
      "VCSResponseAsyncDeleteContinuousDeployment.state": {
        "default": "pending",
        "type": "string"
      },
      "VCSResponseAsyncDeleteIntegration.state": {
        "default": "pending",
        "type": "string"
      },
      "VCSResponseAsyncExecution.state": {
        "default": "pending",
        "type": "string"
      },
      "VCSResponseAsyncExecutor.state": {
        "default": "pending",
        "type": "string"
      },
      "VCSResponseContinuousDeployment.state": {
        "default": "executed",
        "type": "string"
      },
      "VCSResponseDeleteContinuousDeployment.state": {
        "default": "executed",
        "type": "string"
      },
      "VCSResponseDeleteIntegration.state": {
        "default": "executed",
        "type": "string"
      },
      "VCSResponseExecution.state": {
        "default": "executed",
        "type": "string"
      },
      "VCSResponseExecutor.state": {
        "default": "executed",
        "type": "string"
      },
      "DNSPatchedRecordRequest.description": {
        "default": "",
        "type": "string"
      },
      "DNSPatchedRecordRequest.ttl": {
        "default": 3600,
        "type": "integer"
      },
      "DNSPatchedRecordRequest.policy": {
        "default": "simple",
        "type": "unknown"
      },
      "DNSPatchedRecordRequest.weight": {
        "default": 255,
        "type": "integer"
      },
      "DNSRecord.description": {
        "default": "",
        "type": "string"
      },
      "DNSRecord.ttl": {
        "default": 3600,
        "type": "integer"
      },
      "DNSRecord.policy": {
        "default": "simple",
        "type": "unknown"
      },
      "DNSRecord.weight": {
        "default": 255,
        "type": "integer"
      },
      "DNSRecordRequest.description": {
        "default": "",
        "type": "string"
      },
      "DNSRecordRequest.ttl": {
        "default": 3600,
        "type": "integer"
      },
      "DNSRecordRequest.policy": {
        "default": "simple",
        "type": "unknown"
      },
      "DNSRecordRequest.weight": {
        "default": 255,
        "type": "integer"
      },
      "DNSResponseAsyncDNSSEC.state": {
        "default": "pending",
        "type": "string"
      },
      "DNSResponseAsyncDeleteRecord.state": {
        "default": "pending",
        "type": "string"
      },
      "DNSResponseAsyncDeleteZone.state": {
        "default": "pending",
        "type": "string"
      },
      "DNSResponseAsyncRecord.state": {
        "default": "pending",
        "type": "string"
      },
      "DNSResponseAsyncZone.state": {
        "default": "pending",
        "type": "string"
      },
      "DNSResponseDNSSEC.state": {
        "default": "executed",
        "type": "string"
      },
      "DNSResponseDeleteRecord.state": {
        "default": "executed",
        "type": "string"
      },
      "DNSResponseDeleteZone.state": {
        "default": "executed",
        "type": "string"
      },
      "DNSResponseRecord.state": {
        "default": "executed",
        "type": "string"
      },
      "DNSResponseZone.state": {
        "default": "executed",
        "type": "string"
      },
      "TLSCertificate.type": {
        "default": "edge_certificate",
        "type": "unknown"
      },
      "TLSCertificate.managed": {
        "default": false,
        "type": "boolean"
      },
      "TLSCertificate.status_detail": {
        "default": "",
        "type": "string"
      },
      "TLSCertificateRequest.type": {
        "default": "edge_certificate",
        "type": "unknown"
      },
      "TLSCertificateRequestRequest.type": {
        "default": "edge_certificate",
        "type": "unknown"
      },
      "TLSCertificateRequestRequest.key_algorithm": {
        "default": "ecc_384",
        "type": "unknown"
      },
      "TLSCertificateRevocationList.active": {
        "default": true,
        "type": "boolean"
      },
      "TLSCertificateRevocationListRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "TLSCertificateSigningRequestRequest.type": {
        "default": "edge_certificate",
        "type": "unknown"
      },
      "TLSCertificateSigningRequestRequest.key_algorithm": {
        "default": "rsa_2048",
        "type": "unknown"
      },
      "TLSPatchedCertificateRequest.type": {
        "default": "edge_certificate",
        "type": "unknown"
      },
      "TLSPatchedCertificateRevocationListRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "TLSResponseAsyncCertificate.state": {
        "default": "pending",
        "type": "string"
      },
      "TLSResponseAsyncCertificateRevocationList.state": {
        "default": "pending",
        "type": "string"
      },
      "TLSResponseAsyncDeleteCertificate.state": {
        "default": "pending",
        "type": "string"
      },
      "TLSResponseAsyncDeleteCertificateRevocationList.state": {
        "default": "pending",
        "type": "string"
      },
      "TLSResponseCertificate.state": {
        "default": "executed",
        "type": "string"
      },
      "TLSResponseCertificateRevocationList.state": {
        "default": "executed",
        "type": "string"
      },
      "TLSResponseDeleteCertificate.state": {
        "default": "executed",
        "type": "string"
      },
      "TLSResponseDeleteCertificateRevocationList.state": {
        "default": "executed",
        "type": "string"
      },
      "IDENTITYGroup.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYGroupRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYPatchedGroupRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYPatchedServiceTokenUpdateRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYPatchedUserRequest.two_factor_enabled": {
        "default": false,
        "type": "boolean"
      },
      "IDENTITYResponseListGroup.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYResponseListServiceToken.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYResponseListUser.two_factor_enabled": {
        "default": false,
        "type": "boolean"
      },
      "IDENTITYServiceToken.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYServiceTokenCreate.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYServiceTokenCreateRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYServiceTokenUpdateRequest.active": {
        "default": true,
        "type": "boolean"
      },
      "IDENTITYUser.two_factor_enabled": {
        "default": false,
        "type": "boolean"
      },
      "IDENTITYUserRequest.two_factor_enabled": {
        "default": false,
        "type": "boolean"
      }
    }
  },
  "statistics": {
    "totalSchemas": 1045,
    "totalPaths": 72,
    "totalOperations": 177,
    "totalConstraints": 2557
  }
}